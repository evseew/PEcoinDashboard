'use client'

import { useEffect, useState } from 'react'

export default function EcosystemInitializer() {
  const [initStatus, setInitStatus] = useState<'idle' | 'initializing' | 'initialized' | 'error'>('idle')

  useEffect(() => {
    const initializeEcosystem = async () => {
      if (initStatus !== 'idle') return
      
      setInitStatus('initializing')
      console.log('üåê –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã...')
      
      try {
        const response = await fetch('/api/ecosystem-init', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' }
        })
        
        if (response.ok) {
          const data = await response.json()
          
          if (data.alreadyInitialized) {
            console.log('‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞')
            console.log(`üìä –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${data.stats.totalParticipants}`)
            setInitStatus('initialized')
          } else if (data.initializing) {
            console.log('‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞...')
            // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            await trackInitializationStatus()
          }
        } else {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã')
          setInitStatus('error')
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error)
        setInitStatus('error')
      }
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const timer = setTimeout(initializeEcosystem, 1000)
    
    return () => clearTimeout(timer)
  }, [initStatus])

  const trackInitializationStatus = async () => {
    let attempts = 0
    const maxAttempts = 30 // 60 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
    
    const checkStatus = async (): Promise<void> => {
      try {
        const response = await fetch('/api/ecosystem-init')
        if (response.ok) {
          const data = await response.json()
          
          if (data.status.initialized) {
            console.log('‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!')
            if (data.stats) {
              console.log(`üìä –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${data.stats.totalParticipants} (${data.stats.teams} –∫–æ–º–∞–Ω–¥, ${data.stats.startups} —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤)`)
              console.log(`üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${data.stats.totalBalance} PEcoin`)
            }
            setInitStatus('initialized')
            return
          }
          
          if (attempts < maxAttempts) {
            attempts++
            console.log(`‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ... (${attempts}/${maxAttempts})`)
            setTimeout(checkStatus, 2000) // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
          } else {
            console.error('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏')
            setInitStatus('error')
          }
        }
      } catch (error) {
        console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error)
        if (attempts < maxAttempts) {
          attempts++
          setTimeout(checkStatus, 2000)
        } else {
          setInitStatus('error')
        }
      }
    }
    
    checkStatus()
  }

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏—Ç –Ω–∏—á–µ–≥–æ –≤–∏–¥–∏–º–æ–≥–æ, —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
  return null
} 