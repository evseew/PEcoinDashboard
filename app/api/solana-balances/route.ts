import { NextRequest, NextResponse } from 'next/server'
import { getMultipleSolanaBalances } from '@/lib/alchemy/solana'
import { getAlchemyKey } from '@/lib/alchemy/solana'

// ‚úÖ –ü–†–û–°–¢–û–ô 2-–£–†–û–í–ù–ï–í–´–ô –ö–≠–®–ò–†–û–í–ê–ù–ò–ï: In-memory –∫—ç—à –¥–ª—è SOL –±–∞–ª–∞–Ω—Å–æ–≤
const solBalanceCache = new Map<string, { balance: number; timestamp: number }>()
const SOL_BALANCE_CACHE_TTL = 2 * 60 * 1000 // 2 –º–∏–Ω—É—Ç—ã

export async function POST(request: NextRequest) {
  const startTime = Date.now()
  
  try {
    const { wallets } = await request.json()
    
    if (!wallets || !Array.isArray(wallets)) {
      return NextResponse.json(
        { error: 'Wallets array is required' },
        { status: 400 }
      )
    }
    
    console.log(`[SolanaBalances API] üöÄ –ó–∞–ø—Ä–æ—Å SOL –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è ${wallets.length} –∫–æ—à–µ–ª—å–∫–æ–≤`)
    
    const apiKey = getAlchemyKey()
    const now = Date.now()
    
    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ç–æ–π –∫—ç—à
    const cachedBalances = new Map<string, number>()
    const walletsToFetch: string[] = []
    
    for (const wallet of wallets) {
      const cacheKey = `sol:${wallet}`
      const cached = solBalanceCache.get(cacheKey)
      
      if (cached && (now - cached.timestamp) < SOL_BALANCE_CACHE_TTL) {
        cachedBalances.set(wallet, cached.balance)
        console.log(`[SolanaBalances] üíæ –ö—ç—à: ${wallet.slice(0,8)}... = ${cached.balance.toFixed(4)} SOL`)
      } else {
        walletsToFetch.push(wallet)
      }
    }
    
    console.log(`[SolanaBalances] üìä –ò–∑ –∫—ç—à–∞: ${cachedBalances.size}, –∑–∞–≥—Ä—É–∂–∞–µ–º: ${walletsToFetch.length}`)
    
    // ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ SOL –±–∞–ª–∞–Ω—Å—ã —á–µ—Ä–µ–∑ Alchemy
    let fetchedBalances = new Map<string, number>()
    if (walletsToFetch.length > 0) {
      const balancesStart = Date.now()
      fetchedBalances = await getMultipleSolanaBalances(walletsToFetch, apiKey)
      const balancesTime = Date.now() - balancesStart
      
      console.log(`[SolanaBalances] ‚ö° –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${fetchedBalances.size} –Ω–æ–≤—ã—Ö SOL –±–∞–ª–∞–Ω—Å–æ–≤ –∑–∞ ${balancesTime}ms`)
      
      // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø—Ä–æ—Å—Ç–æ–π –∫—ç—à
      for (const [wallet, balance] of fetchedBalances) {
        const cacheKey = `sol:${wallet}`
        solBalanceCache.set(cacheKey, { balance, timestamp: now })
      }
    }
    
    // ‚úÖ –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const allBalances = new Map([...cachedBalances, ...fetchedBalances])
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –æ–±—ä–µ–∫—Ç –¥–ª—è JSON
    const balancesObject: Record<string, number> = {}
    allBalances.forEach((balance, wallet) => {
      balancesObject[wallet] = balance
    })
    
    const totalTime = Date.now() - startTime
    console.log(`[SolanaBalances] ‚úÖ 2-–£–†–û–í–ù–ï–í–´–ô –ö–≠–®–ò: ${allBalances.size} SOL –±–∞–ª–∞–Ω—Å–æ–≤ –∑–∞ ${totalTime}ms`)
    console.log(`[SolanaBalances] üìà –ö—ç—à: ${cachedBalances.size} + –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${fetchedBalances.size}`)

    return NextResponse.json({
      success: true,
      balances: balancesObject,
      cached: cachedBalances.size > 0,
      timing: {
        total: totalTime,
        walletsCount: wallets.length,
        fromCache: cachedBalances.size,
        fromAPI: fetchedBalances.size
      }
    })
    
  } catch (error) {
    const totalTime = Date.now() - startTime
    console.error(`[SolanaBalances] ‚ùå –û—à–∏–±–∫–∞ –∑–∞ ${totalTime}ms:`, error)
    return NextResponse.json(
      { 
        error: 'Failed to fetch SOL balances',
        details: error instanceof Error ? error.message : 'Unknown error',
        timing: { total: totalTime }
      },
      { status: 500 }
    )
  }
} 