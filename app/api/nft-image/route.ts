import { NextRequest, NextResponse } from 'next/server'
import { serverCache } from '@/lib/server-cache'

// –ö—ç—à –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏ (–¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
const imageCache = new Map<string, { data: Buffer; contentType: string; timestamp: number }>()
const IMAGE_CACHE_TTL = 60 * 60 * 1000 // 1 —á–∞—Å

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const imageUrl = searchParams.get('url')
    
    if (!imageUrl) {
      return NextResponse.json(
        { error: 'Image URL is required' },
        { status: 400 }
      )
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è URL
    try {
      new URL(imageUrl)
    } catch {
      return NextResponse.json(
        { error: 'Invalid image URL' },
        { status: 400 }
      )
    }

    console.log(`[Image Proxy] –ó–∞–ø—Ä–æ—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${imageUrl}`)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –≤ –ø–∞–º—è—Ç–∏
    const cached = imageCache.get(imageUrl)
    if (cached && (Date.now() - cached.timestamp) < IMAGE_CACHE_TTL) {
      console.log(`üéØ Image Cache HIT: ${imageUrl}`)
      
      return new NextResponse(cached.data, {
        headers: {
          'Content-Type': cached.contentType,
          'Cache-Control': 'public, max-age=3600', // 1 —á–∞—Å –≤ –±—Ä–∞—É–∑–µ—Ä–µ
          'X-Cache-Status': 'HIT'
        }
      })
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    console.log(`üîÑ Image Cache MISS: ${imageUrl} - fetching`)
    
    const imageResponse = await fetch(imageUrl, {
      headers: {
        'User-Agent': 'PEcoin-Dashboard/1.0',
      },
      // –¢–∞–π–º–∞—É—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      signal: AbortSignal.timeout(15000)
    })

    if (!imageResponse.ok) {
      throw new Error(`HTTP ${imageResponse.status}: ${imageResponse.statusText}`)
    }

    const contentType = imageResponse.headers.get('content-type') || 'image/jpeg'
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if (!contentType.startsWith('image/')) {
      throw new Error(`Not an image: ${contentType}`)
    }

    const imageBuffer = await imageResponse.arrayBuffer()
    const buffer = Buffer.from(imageBuffer)
    
    // –ö—ç—à–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–±–æ–ª—å—à–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (< 2MB)
    if (buffer.length < 2 * 1024 * 1024) {
      imageCache.set(imageUrl, {
        data: buffer,
        contentType,
        timestamp: Date.now()
      })
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ (–º–∞–∫—Å–∏–º—É–º 100 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
      if (imageCache.size > 100) {
        const oldestEntry = imageCache.keys().next()
        if (oldestEntry.value) {
          imageCache.delete(oldestEntry.value)
        }
      }
    }

    console.log(`‚úÖ Image loaded: ${imageUrl} (${buffer.length} bytes)`)

    return new NextResponse(buffer, {
      headers: {
        'Content-Type': contentType,
        'Cache-Control': 'public, max-age=3600', // 1 —á–∞—Å –≤ –±—Ä–∞—É–∑–µ—Ä–µ
        'X-Cache-Status': 'MISS',
        'Content-Length': buffer.length.toString()
      }
    })

  } catch (error) {
    console.error('[Image Proxy] Error:', error)
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º placeholder –ø—Ä–∏ –æ—à–∏–±–∫–µ
    return NextResponse.redirect('/images/nft-placeholder.png')
  }
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
export async function POST(request: NextRequest) {
  try {
    const now = Date.now()
    const stats = {
      totalImages: imageCache.size,
      totalSize: Array.from(imageCache.values()).reduce((sum, item) => sum + item.data.length, 0),
      avgAge: imageCache.size > 0 
        ? Math.round(Array.from(imageCache.values()).reduce((sum, item) => sum + (now - item.timestamp), 0) / imageCache.size / 1000)
        : 0
    }
    
    return NextResponse.json({
      success: true,
      imageCache: stats
    })
  } catch (error) {
    return NextResponse.json(
      { error: 'Failed to get image cache stats' },
      { status: 500 }
    )
  }
} 