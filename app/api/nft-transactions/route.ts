import { NextRequest, NextResponse } from 'next/server'
import { Connection, PublicKey } from '@solana/web3.js'
import { serverCache, ServerCache } from '@/lib/server-cache'
import { getAlchemyUrl, getAlchemyKey } from '@/lib/alchemy/solana'

// --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
if (!getAlchemyKey()) {
  console.error("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
  console.error("!!! FATAL: ALCHEMY_API_KEY is not configured.        !!!")
  console.error("!!! The nft-transactions API endpoint will not work. !!!")
  console.error("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
}
// ---

const ALCHEMY_URL = getAlchemyUrl()
const connection = new Connection(ALCHEMY_URL, 'confirmed')
const SPL_MEMO_PROGRAM_ID = 'MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr'

interface NFTTransaction {
  signature: string
  type: 'NFT_TRANSFER' | 'NFT_MINT' | 'NFT_BURN'
  nftMint: string
  nftName: string
  nftImage?: string
  collection: string
  from: string
  to: string
  date: string
  blockTime: number
  verified: boolean
  memo?: string
}

// –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
const cache = new Map<string, { data: any, timestamp: number }>()

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç memo –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ Solana
 */
function extractMemoFromTransaction(tx: any): string | undefined {
  try {
    // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–û–î–•–û–î: –ò—â–µ–º memo –≤ –ª–æ–≥–∞—Ö –ø—Ä–æ–≥—Ä–∞–º–º—ã
    if (tx.meta?.logMessages) {
      for (const log of tx.meta.logMessages) {
        // –ò—â–µ–º –ª–æ–≥ —Ñ–æ—Ä–º–∞—Ç–∞: "Program log: Memo (len X): "—Ç–µ–∫—Å—Ç""
        const memoMatch = log.match(/Program log: Memo \(len \d+\): "(.+)"/);
        if (memoMatch && memoMatch[1]) {
          const memo = memoMatch[1].trim();
          console.log(`[extractMemoFromTransaction] ‚úÖ Memo –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–≥–∞—Ö: "${memo}"`);
          return memo;
        }
        
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ –∫–∞–≤—ã—á–µ–∫: "Program log: Memo (len X): —Ç–µ–∫—Å—Ç"
        const simpleMemoMatch = log.match(/Program log: Memo \(len \d+\): (.+)/);
        if (simpleMemoMatch && simpleMemoMatch[1]) {
          const memo = simpleMemoMatch[1].trim();
          // –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
          const cleanMemo = memo.replace(/^["']|["']$/g, '');
          console.log(`[extractMemoFromTransaction] ‚úÖ Memo –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–≥–∞—Ö (–ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç): "${cleanMemo}"`);
          return cleanMemo;
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        if (log.includes('Program log:') && log.includes('Memo')) {
          console.log(`[extractMemoFromTransaction] üîç –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π memo –ª–æ–≥: "${log}"`);
        }
      }
    }
    
    console.log(`[extractMemoFromTransaction] ‚ùå Memo –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–≥–∞—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏`);
    return undefined;
  } catch (error) {
    console.warn(`[extractMemoFromTransaction] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ memo –≤ –ª–æ–≥–∞—Ö: ${error}`);
    return undefined;
  }
}

function getCachedData(type: string, key: string): any | null {
  const cacheKey = `${type}:${key}`
  const cached = cache.get(cacheKey)
  
  if (cached && Date.now() - cached.timestamp < 60000) { // 1 –º–∏–Ω—É—Ç–∞
    return cached.data
  }
  
  cache.delete(cacheKey)
  return null
}

function setCachedData(type: string, key: string, data: any, ttlMinutes: number = 1): void {
  const cacheKey = `${type}:${key}`
  cache.set(cacheKey, {
    data,
    timestamp: Date.now()
  })
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
async function getTransactionSignatures(walletAddress: string, limit: number): Promise<string[]> {
  try {
    const signatures = await connection.getSignaturesForAddress(
      new PublicKey(walletAddress),
      { limit }
    )
    
    return signatures.map(sig => sig.signature)
  } catch (error) {
    console.error('[getTransactionSignatures] –û—à–∏–±–∫–∞:', error)
    return []
  }
}

async function getNFTTransactions(walletAddress: string, limit: number = 10): Promise<NFTTransaction[]> {
  try {
    console.log(`[getNFTTransactions] –ü–æ–∏—Å–∫ NFT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è: ${walletAddress}`)
    
    // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    const cacheKey = `limit:${limit}|wallet:${walletAddress}`
    const cachedData = getCachedData('NFT_TRANSACTIONS', cacheKey)
    if (cachedData) {
      console.log('üéØ Cache HIT: nft-transactions:', cacheKey)
      return cachedData
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const signatures = await getTransactionSignatures(walletAddress, limit * 5) // –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    console.log(`[getNFTTransactions] –ü–æ–ª—É—á–µ–Ω–æ ${signatures.length} –ø–æ–¥–ø–∏—Å–µ–π`)
    
    const nftTransactions: NFTTransaction[] = []
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–∞—Ç—á–∞–º–∏
    const batchSize = 10
    for (let i = 0; i < Math.min(signatures.length, 50); i += batchSize) {
      const batch = signatures.slice(i, i + batchSize)
      
      try {
        const parsedTransactions = await connection.getParsedTransactions(
          batch,
          {
            maxSupportedTransactionVersion: 1,
            commitment: 'confirmed'
          }
        )
        
        for (let j = 0; j < parsedTransactions.length; j++) {
          const tx = parsedTransactions[j]
          if (!tx?.meta || tx.meta.err) continue
          
          const signature = batch[j]
          const blockTime = tx.blockTime || 0
          
          console.log(`\n[getNFTTransactions] üîç –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${signature}`)
          
          // –ò–∑–≤–ª–µ–∫–∞–µ–º memo –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
          const memo = extractMemoFromTransaction(tx)
          
          // –ü–∞—Ä—Å–∏–º Standard/Core NFT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
           const standardNFTs = await parseStandardNFTTransfers(tx.meta, tx, walletAddress, blockTime, memo)
           nftTransactions.push(...standardNFTs)
          
          // –ü–∞—Ä—Å–∏–º Compressed NFT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–æ–≤)
          const compressedNFTs = await parseAllCompressedNFTMethods(tx, walletAddress, blockTime, signature, memo)
          nftTransactions.push(...compressedNFTs)
        }
      } catch (error) {
        console.error(`[getNFTTransactions] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞:`, error)
      }
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const sortedTransactions = nftTransactions
      .sort((a, b) => b.blockTime - a.blockTime)
      .slice(0, limit)
    
    console.log(`[getNFTTransactions] üéØ –ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ NFT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${sortedTransactions.length}`)
    
    // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    setCachedData('NFT_TRANSACTIONS', cacheKey, sortedTransactions, 1) // 1 –º–∏–Ω—É—Ç–∞
    
    return sortedTransactions
    
  } catch (error) {
    console.error('[getNFTTransactions] –û—à–∏–±–∫–∞:', error)
    return []
  }
}

async function parseNFTTransfersFromTransaction(transaction: any, userWallet: string): Promise<NFTTransaction[]> {
  const nftTransfers: NFTTransaction[] = []
  
  try {
    const { meta, transaction: tx, blockTime } = transaction
    
    // 1. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ NFT —á–µ—Ä–µ–∑ token balance changes
    if (meta?.preTokenBalances && meta?.postTokenBalances) {
      const standardNFTs = await parseStandardNFTTransfers(meta, tx, userWallet, blockTime)
      nftTransfers.push(...standardNFTs)
    }
    
    // 2. Compressed NFT —á–µ—Ä–µ–∑ program logs
    if (meta?.logMessages) {
      const compressedNFTs = await parseCompressedNFTTransfers(meta.logMessages, tx, userWallet, blockTime)
      nftTransfers.push(...compressedNFTs)
    }
    
  } catch (error) {
    console.error('[parseNFTTransfersFromTransaction] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error)
  }
  
  return nftTransfers
}

// –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö NFT (—Ç–µ–∫—É—â–∞—è –ª–æ–≥–∏–∫–∞)
async function parseStandardNFTTransfers(meta: any, tx: any, userWallet: string, blockTime: number, memo?: string): Promise<NFTTransaction[]> {
  const nftTransfers: NFTTransaction[] = []
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è token balances –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è NFT —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤
  const tokenChanges = new Map<string, { pre: any, post: any }>()
  
  // –°–æ–±–∏—Ä–∞–µ–º pre –±–∞–ª–∞–Ω—Å—ã
  meta.preTokenBalances.forEach((balance: any) => {
    const mint = balance.mint
    if (!tokenChanges.has(mint)) {
      tokenChanges.set(mint, { pre: balance, post: null })
    } else {
      tokenChanges.get(mint)!.pre = balance
    }
  })
  
  // –°–æ–±–∏—Ä–∞–µ–º post –±–∞–ª–∞–Ω—Å—ã
  meta.postTokenBalances.forEach((balance: any) => {
    const mint = balance.mint
    if (!tokenChanges.has(mint)) {
      tokenChanges.set(mint, { pre: null, post: balance })
    } else {
      tokenChanges.get(mint)!.post = balance
    }
  })
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
  for (const [mint, changes] of tokenChanges) {
    const { pre, post } = changes
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ NFT (decimals = 0 –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ amount = 1)
    const isNFT = (pre?.uiTokenAmount?.decimals === 0 || post?.uiTokenAmount?.decimals === 0)
    
    if (!isNFT) continue
    
    const preAmount = pre?.uiTokenAmount?.uiAmount || 0
    const postAmount = post?.uiTokenAmount?.uiAmount || 0
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
    let transferType: 'NFT_TRANSFER' | 'NFT_MINT' | 'NFT_BURN' = 'NFT_TRANSFER'
    let from = ''
    let to = ''
    
    if (preAmount === 0 && postAmount === 1) {
      // Mint –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ
      transferType = 'NFT_MINT'
      to = tx.message.accountKeys[post.accountIndex]?.toBase58() || ''
    } else if (preAmount === 1 && postAmount === 0) {
      // Burn –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
      transferType = 'NFT_BURN'
      from = tx.message.accountKeys[pre.accountIndex]?.toBase58() || ''
    } else if (preAmount !== postAmount) {
      // –¢—Ä–∞–Ω—Å—Ñ–µ—Ä
      transferType = 'NFT_TRANSFER'
      from = pre ? tx.message.accountKeys[pre.accountIndex]?.toBase58() || '' : ''
      to = post ? tx.message.accountKeys[post.accountIndex]?.toBase58() || '' : ''
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—à –∫–æ—à–µ–ª–µ–∫ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const isUserInvolved = from.includes(userWallet) || to.includes(userWallet) || 
                         tx.message.accountKeys.some((key: any) => key.toBase58() === userWallet)
    
    if (!isUserInvolved) continue
    
    // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ NFT
    const nftMetadata = await getNFTMetadataForTransaction(mint)
    
    const nftTransaction: NFTTransaction = {
      signature: tx.signatures[0],
      type: transferType,
      nftMint: mint,
      nftName: nftMetadata?.name || 'Unknown NFT',
      nftImage: nftMetadata?.image,
      collection: nftMetadata?.collection || 'Unknown Collection',
      from,
      to,
      date: blockTime ? new Date(blockTime * 1000).toISOString() : new Date().toISOString(),
      blockTime: blockTime || 0,
      verified: nftMetadata?.verified || false,
      memo: memo
    }
    
    nftTransfers.push(nftTransaction)
  }
  
  return nftTransfers
}

// –ü–∞—Ä—Å–∏–Ω–≥ Compressed NFT —á–µ—Ä–µ–∑ program logs
async function parseCompressedNFTTransfers(logMessages: string[], tx: any, userWallet: string, blockTime: number): Promise<NFTTransaction[]> {
  const nftTransfers: NFTTransaction[] = []
  
  try {
    const BUBBLEGUM_PROGRAM_ID = 'BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY'
    const SPL_NOOP_PROGRAM_ID = 'noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV'
    
    console.log(`[parseCompressedNFTTransfers] –ê–Ω–∞–ª–∏–∑ transaction: ${tx.signatures[0]}`)
    console.log(`[parseCompressedNFTTransfers] –í—Å–µ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${tx.message.accountKeys?.length || 0}`)
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    if (tx.message.instructions) {
      console.log(`[parseCompressedNFTTransfers] –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:`)
      tx.message.instructions.forEach((ix: any, index: number) => {
        const programId = tx.message.accountKeys[ix.programIdIndex]?.toBase58()
        console.log(`  ${index}: Program ${programId}`)
      })
    }
    
    // –ò—â–µ–º Bubblegum program –≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è—Ö
    const hasBubblegumInstruction = tx.message.instructions?.some((ix: any) => {
      const programId = tx.message.accountKeys[ix.programIdIndex]?.toBase58()
      return programId === BUBBLEGUM_PROGRAM_ID
    })
    
    console.log(`[parseCompressedNFTTransfers] Bubblegum instruction –Ω–∞–π–¥–µ–Ω–∞: ${hasBubblegumInstruction}`)
    
    if (!hasBubblegumInstruction) {
      console.log(`[parseCompressedNFTTransfers] –ù–µ—Ç Bubblegum –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`)
      return []
    }
    
    console.log(`[parseCompressedNFTTransfers] –ê–Ω–∞–ª–∏–∑ ${logMessages.length} –ª–æ–≥–æ–≤:`)
    
    // –ò—â–µ–º NoOp logs —Å –¥–∞–Ω–Ω—ã–º–∏ –æ cNFT
    for (const [index, log] of logMessages.entries()) {
      console.log(`  Log ${index}: ${log}`)
      
      // –ò—â–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –ª–æ–≥–æ–≤
      if (log.includes('Program data:') || log.includes('Program log:') || log.includes('Invoke')) {
        console.log(`    ^ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –≤–∞–∂–Ω—ã–π –ª–æ–≥`)
        
        // –ò—â–µ–º –ª–æ–≥ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç SPL NoOp program
        if (log.includes('Program data:')) {
          try {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º base64 –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–≥–∞
            const dataMatch = log.match(/Program data: (.+)/)
            if (dataMatch) {
              const base64Data = dataMatch[1]
              console.log(`    Base64 data: ${base64Data.substring(0, 50)}...`)
              
              const decodedData = Buffer.from(base64Data, 'base64')
              console.log(`    Decoded length: ${decodedData.length} bytes`)
              console.log(`    First 16 bytes: ${decodedData.slice(0, 16).toString('hex')}`)
              
              // –ü–∞—Ä—Å–∏–º Compressed NFT —Å–æ–±—ã—Ç–∏–µ
              const cNFTEvent = parseCompressedNFTEvent(decodedData)
              if (cNFTEvent) {
                console.log(`    ‚úì Parsed cNFT event:`, cNFTEvent)
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const isUserInvolved = 
                  cNFTEvent.leafOwner === userWallet ||
                  cNFTEvent.leafDelegate === userWallet ||
                  cNFTEvent.previousLeafOwner === userWallet
                
                console.log(`    User involved: ${isUserInvolved}`)
                
                if (isUserInvolved) {
                  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
                  let transferType: 'NFT_TRANSFER' | 'NFT_MINT' | 'NFT_BURN' = 'NFT_TRANSFER'
                  let from = ''
                  let to = ''
                  
                  if (cNFTEvent.eventType === 'mint') {
                    transferType = 'NFT_MINT'
                    to = cNFTEvent.leafOwner
                  } else if (cNFTEvent.eventType === 'transfer') {
                    transferType = 'NFT_TRANSFER'
                    from = cNFTEvent.previousLeafOwner || ''
                    to = cNFTEvent.leafOwner
                  } else if (cNFTEvent.eventType === 'burn') {
                    transferType = 'NFT_BURN'
                    from = cNFTEvent.previousLeafOwner || cNFTEvent.leafOwner
                  }
                  
                  const nftTransaction: NFTTransaction = {
                    signature: tx.signatures[0],
                    type: transferType,
                    nftMint: cNFTEvent.assetId || `compressed_${cNFTEvent.treeId}_${cNFTEvent.leafIndex}`,
                    nftName: cNFTEvent.metadata?.name || 'Compressed NFT',
                    nftImage: cNFTEvent.metadata?.image,
                    collection: cNFTEvent.metadata?.collection || 'Compressed Collection',
                    from,
                    to,
                    date: blockTime ? new Date(blockTime * 1000).toISOString() : new Date().toISOString(),
                    blockTime: blockTime || 0,
                    verified: false // TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è cNFT
                  }
                  
                  nftTransfers.push(nftTransaction)
                  console.log(`    ‚úì –î–æ–±–∞–≤–ª–µ–Ω–∞ cNFT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${nftTransaction.nftName}`)
                }
              } else {
                console.log(`    ‚úó –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å cNFT event`)
              }
            }
          } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤
            console.error(`    ‚úó –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ª–æ–≥–∞:`, error)
          }
        }
      }
    }
    
    console.log(`[parseCompressedNFTTransfers] –ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ cNFT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${nftTransfers.length}`)
    
  } catch (error) {
    console.error('[parseCompressedNFTTransfers] –û—à–∏–±–∫–∞:', error)
  }
  
  return nftTransfers
}

// –ü–∞—Ä—Å–∏–Ω–≥ Compressed NFT —Å–æ–±—ã—Ç–∏—è –∏–∑ NoOp data
function parseCompressedNFTEvent(data: Buffer): {
  eventType: 'mint' | 'transfer' | 'burn'
  treeId: string
  leafIndex: number
  leafOwner: string
  leafDelegate?: string
  previousLeafOwner?: string
  assetId?: string
  metadata?: {
    name: string
    image?: string
    collection?: string
  }
} | null {
  try {
    console.log(`[parseCompressedNFTEvent] –ü–∞—Ä—Å–∏–Ω–≥ ${data.length} bytes`)
    console.log(`[parseCompressedNFTEvent] Raw hex: ${data.toString('hex')}`)
    
    if (data.length < 32) {
      console.log(`[parseCompressedNFTEvent] –°–ª–∏—à–∫–æ–º –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö: ${data.length} bytes`)
      return null
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
    let eventType: 'mint' | 'transfer' | 'burn' = 'transfer'
    let offset = 0
    
    // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ patterns –¥–ª—è Bubblegum —Å–æ–±—ã—Ç–∏–π
    const dataHex = data.toString('hex')
    
    // –ò–∑–≤–µ—Å—Ç–Ω—ã–µ discriminators –¥–ª—è Bubblegum (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ)
    const MINT_DISCRIMINATORS = [
      '919460c6b893766b', // MintV1
      '92c2b49893ab9c24', // MintToCollectionV1
    ]
    
    const TRANSFER_DISCRIMINATORS = [
      'a334c8e78c0345ba', // Transfer 
      'eb677294f4ee2f37', // TransferV1
    ]
    
    const BURN_DISCRIMINATORS = [
      '746e1d386bdba95d', // Burn
      'b663dd5b5d5c8bb3', // BurnV1
    ]
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º discriminators –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö
    for (let pos = 0; pos <= Math.min(data.length - 8, 16); pos++) {
      const slice = data.slice(pos, pos + 8).toString('hex')
      console.log(`[parseCompressedNFTEvent] Checking discriminator at ${pos}: ${slice}`)
      
      if (MINT_DISCRIMINATORS.includes(slice)) {
        eventType = 'mint'
        offset = pos + 8
        console.log(`[parseCompressedNFTEvent] Found MINT discriminator at ${pos}`)
        break
      } else if (TRANSFER_DISCRIMINATORS.includes(slice)) {
        eventType = 'transfer'
        offset = pos + 8
        console.log(`[parseCompressedNFTEvent] Found TRANSFER discriminator at ${pos}`)
        break
      } else if (BURN_DISCRIMINATORS.includes(slice)) {
        eventType = 'burn'
        offset = pos + 8
        console.log(`[parseCompressedNFTEvent] Found BURN discriminator at ${pos}`)
        break
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ discriminator, –ø—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (offset === 0) {
      console.log(`[parseCompressedNFTEvent] Discriminator –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –æ–±—â–∏–π –ø–∞—Ä—Å–∏–Ω–≥`)
      
      // –ò—â–µ–º 32-–±–∞–π—Ç–æ–≤—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (–≤–µ—Ä–æ—è—Ç–Ω—ã–µ –ø—É–±–ª–∏—á–Ω—ã–µ –∫–ª—é—á–∏)
      const pubkeyPositions = []
      for (let i = 0; i <= data.length - 32; i += 4) {
        const slice = data.slice(i, i + 32)
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á (–Ω–µ –≤—Å–µ –Ω—É–ª–∏, –Ω–µ –≤—Å–µ 255)
        if (!slice.every((b: number) => b === 0) && !slice.every((b: number) => b === 255)) {
          try {
            const pubkey = new PublicKey(slice).toBase58()
            if (pubkey.length === 44) { // –í–∞–ª–∏–¥–Ω–∞—è –¥–ª–∏–Ω–∞ base58 pubkey
              pubkeyPositions.push({ position: i, pubkey })
              console.log(`[parseCompressedNFTEvent] Possible pubkey at ${i}: ${pubkey}`)
            }
          } catch (e) {
            // –ù–µ –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á
          }
        }
      }
      
      if (pubkeyPositions.length >= 2) {
        // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –ø–µ—Ä–≤—ã–π pubkey - tree, –≤—Ç–æ—Ä–æ–π - owner
        const treeId = pubkeyPositions[0].pubkey
        const leafOwner = pubkeyPositions[1].pubkey
        
        console.log(`[parseCompressedNFTEvent] –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ: tree=${treeId}, owner=${leafOwner}`)
        
        return {
          eventType: 'transfer', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
          treeId,
          leafIndex: 0, // –ù–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–æ—á–Ω–æ
          leafOwner,
          metadata: {
            name: `Compressed NFT`,
            collection: 'Compressed Collection'
          }
        }
      }
    }
    
    // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ discriminator, –ø—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    if (offset > 0 && offset + 64 <= data.length) {
      try {
        // –ß–∏—Ç–∞–µ–º tree ID (32 bytes)
        const treeId = new PublicKey(data.slice(offset, offset + 32)).toBase58()
        offset += 32
        
        // –ß–∏—Ç–∞–µ–º leaf owner (32 bytes)  
        const leafOwner = new PublicKey(data.slice(offset, offset + 32)).toBase58()
        offset += 32
        
        // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ leaf index (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö)
        let leafIndex = 0
        if (offset + 4 <= data.length) {
          leafIndex = data.readUInt32LE(offset)
        }
        
        console.log(`[parseCompressedNFTEvent] –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∏: ${eventType}, tree=${treeId}, owner=${leafOwner}, index=${leafIndex}`)
        
        return {
          eventType,
          treeId,
          leafIndex,
          leafOwner,
          metadata: {
            name: `Compressed NFT #${leafIndex}`,
            collection: 'Compressed Collection'
          }
        }
      } catch (error) {
        console.error(`[parseCompressedNFTEvent] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:`, error)
      }
    }
    
    console.log(`[parseCompressedNFTEvent] –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ`)
    return null
    
  } catch (error) {
    console.error('[parseCompressedNFTEvent] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error)
    return null
  }
}

async function getNFTMetadataForTransaction(mint: string): Promise<{
  name: string
  image?: string
  collection: string
  verified: boolean
} | null> {
  try {
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ metadata account
    const metadataPDA = PublicKey.findProgramAddressSync(
      [
        Buffer.from('metadata'),
        new PublicKey('metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s').toBuffer(),
        new PublicKey(mint).toBuffer()
      ],
      new PublicKey('metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s')
    )
    
    const metadataAccount = await connection.getAccountInfo(metadataPDA[0])
    
    if (metadataAccount?.data) {
      // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URI
      const metadata = parseSimpleMetadata(metadataAccount.data)
      
      if (metadata.uri && metadata.uri.startsWith('http')) {
        try {
          const response = await fetch(metadata.uri, {
            headers: { 'User-Agent': 'PEcoin-Dashboard/1.0' },
            signal: AbortSignal.timeout(5000) // –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
          })
          
          if (response.ok) {
            const externalMetadata = await response.json()
            
            return {
              name: metadata.name || externalMetadata?.name || 'Unknown NFT',
              image: externalMetadata?.image,
              collection: externalMetadata?.collection?.name || 'Unknown Collection',
              verified: false // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            }
          }
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        }
      }
      
      return {
        name: metadata.name || 'Unknown NFT',
        collection: 'Unknown Collection',
        verified: false
      }
    }
  } catch (error) {
    console.error(`[getNFTMetadataForTransaction] –û—à–∏–±–∫–∞ –¥–ª—è ${mint}:`, error)
  }
  
  return null
}

function parseSimpleMetadata(data: Buffer): { name: string; symbol: string; uri: string } {
  try {
    let offset = 1 // key
    offset += 32 // update_authority
    offset += 32 // mint
    
    // –ß–∏—Ç–∞–µ–º name
    const nameLength = data.readUInt32LE(offset)
    offset += 4
    const name = data.slice(offset, offset + nameLength).toString('utf8').replace(/\0/g, '')
    offset += nameLength
    
    // –ß–∏—Ç–∞–µ–º symbol
    const symbolLength = data.readUInt32LE(offset)
    offset += 4
    const symbol = data.slice(offset, offset + symbolLength).toString('utf8').replace(/\0/g, '')
    offset += symbolLength
    
    // –ß–∏—Ç–∞–µ–º uri
    const uriLength = data.readUInt32LE(offset)
    offset += 4
    const uri = data.slice(offset, offset + uriLength).toString('utf8').replace(/\0/g, '')
    
    return { name, symbol, uri }
  } catch (error) {
    return { name: '', symbol: '', uri: '' }
  }
}

// –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ Compressed NFT  
async function parseAllCompressedNFTMethods(tx: any, userWallet: string, blockTime: number, signature: string, memo?: string): Promise<NFTTransaction[]> {
  const results: NFTTransaction[] = []
  
  try {
    console.log(`[parseAllCompressedNFTMethods] üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é: ${signature}`)
    
    const BUBBLEGUM_PROGRAM_ID = 'BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY'
    const SPL_NOOP_PROGRAM_ID = 'noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV'
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    if (!tx || !tx.transaction || !tx.meta) {
      console.warn('Transaction data incomplete:', tx);
      return results;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    let accountKeys: Array<any>;
    
    if ('message' in tx.transaction && tx.transaction.message) {
      // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å message
      accountKeys = tx.transaction.message.accountKeys;
    } else if ('accountKeys' in tx.transaction) {
      // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –ø—Ä—è–º—ã–º–∏ accountKeys  
      accountKeys = tx.transaction.accountKeys as Array<any>;
    } else {
      console.warn('Could not find accountKeys in transaction:', tx.transaction);
      return results;
    }

    if (!accountKeys || !Array.isArray(accountKeys)) {
      console.warn('AccountKeys not found or invalid:', accountKeys);
      return results;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ Bubblegum –∏–ª–∏ NoOp program –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    let hasBubblegumProgram = false
    let hasNoOpProgram = false
    
    if (accountKeys) {
      for (const key of accountKeys) {
        const keyStr = key?.toBase58 ? key.toBase58() : key?.toString()
        if (keyStr === BUBBLEGUM_PROGRAM_ID) {
          hasBubblegumProgram = true
          console.log(`[parseAllCompressedNFTMethods] ‚úÖ Bubblegum program –Ω–∞–π–¥–µ–Ω –≤ accountKeys`)
        }
        if (keyStr === SPL_NOOP_PROGRAM_ID) {
          hasNoOpProgram = true
          console.log(`[parseAllCompressedNFTMethods] ‚úÖ SPL NoOp program –Ω–∞–π–¥–µ–Ω –≤ accountKeys`)
        }
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    if (tx.message?.instructions) {
      for (const ix of tx.message.instructions) {
        const programId = tx.message.accountKeys[ix.programIdIndex]?.toBase58?.()
        if (programId === BUBBLEGUM_PROGRAM_ID) {
          hasBubblegumProgram = true
          console.log(`[parseAllCompressedNFTMethods] ‚úÖ Bubblegum instruction –Ω–∞–π–¥–µ–Ω–∞`)
        }
        if (programId === SPL_NOOP_PROGRAM_ID) {
          hasNoOpProgram = true
          console.log(`[parseAllCompressedNFTMethods] ‚úÖ SPL NoOp instruction –Ω–∞–π–¥–µ–Ω–∞`)
        }
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º inner instructions
    if (tx.meta?.innerInstructions) {
      for (const inner of tx.meta.innerInstructions) {
        for (const ix of inner.instructions) {
          const programId = accountKeys[ix.programIdIndex]?.toBase58?.() ||
                           accountKeys[ix.programIdIndex]?.toString?.()
          if (programId === BUBBLEGUM_PROGRAM_ID) {
            hasBubblegumProgram = true
            console.log(`[parseAllCompressedNFTMethods] ‚úÖ Bubblegum inner instruction –Ω–∞–π–¥–µ–Ω–∞`)
          }
          if (programId === SPL_NOOP_PROGRAM_ID) {
            hasNoOpProgram = true
            console.log(`[parseAllCompressedNFTMethods] ‚úÖ SPL NoOp inner instruction –Ω–∞–π–¥–µ–Ω–∞`)
          }
        }
      }
    }
    
    console.log(`[parseAllCompressedNFTMethods] Programs found: Bubblegum=${hasBubblegumProgram}, NoOp=${hasNoOpProgram}`)
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—å –æ–¥–Ω–∞ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º, —ç—Ç–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ compressed NFT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
    if (hasBubblegumProgram || hasNoOpProgram) {
      console.log(`[parseAllCompressedNFTMethods] üéØ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è compressed NFT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!`)
      
      // –ú–µ—Ç–æ–¥ 1: –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –ª–æ–≥–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã
      if (tx.meta?.logMessages) {
        console.log(`[parseAllCompressedNFTMethods] –ê–Ω–∞–ª–∏–∑ ${tx.meta.logMessages.length} –ª–æ–≥–æ–≤...`)
        const logResults = await parseCompressedNFTTransfers(tx.meta.logMessages, tx, userWallet, blockTime)
        results.push(...logResults)
      }
      
      // –ú–µ—Ç–æ–¥ 2: –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ SPL NoOp program –Ω–∞–ø—Ä—è–º—É—é
      const noopResults = await parseNoOpProgramLogs(tx, userWallet, blockTime, signature)
      results.push(...noopResults)
      
      // –ú–µ—Ç–æ–¥ 3: –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ accounts
      const accountResults = await parseAccountChanges(tx, userWallet, blockTime, signature)
      results.push(...accountResults)
      
      // –ú–µ—Ç–æ–¥ 4: –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–≤—É–µ—Ç
      if (results.length === 0) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const userInvolved = accountKeys?.some((key: any) => {
          const keyStr = key?.toBase58 ? key.toBase58() : key?.toString()
          return keyStr === userWallet
        })
        
        if (userInvolved) {
          console.log(`[parseAllCompressedNFTMethods] üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é compressed NFT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é`)
          
          const basicNFTTransaction: NFTTransaction = {
            signature,
            type: 'NFT_TRANSFER',
            nftMint: `compressed_${signature.substring(0, 8)}`,
            nftName: 'Compressed NFT Transaction',
            collection: 'Compressed Collection',
            from: '',
            to: userWallet,
            date: blockTime ? new Date(blockTime * 1000).toISOString() : new Date().toISOString(),
            blockTime: blockTime || 0,
            verified: false
          }
          
          results.push(basicNFTTransaction)
          console.log(`[parseAllCompressedNFTMethods] ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –±–∞–∑–æ–≤–∞—è compressed NFT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è`)
        }
      }
    }
    
    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const uniqueResults = results.filter((item, index, self) => 
      index === self.findIndex(t => t.signature === item.signature && t.nftMint === item.nftMint)
    )
    
    if (uniqueResults.length > 0) {
      console.log(`[parseAllCompressedNFTMethods] üéâ –ò–¢–û–ì–û –Ω–∞–π–¥–µ–Ω–æ ${uniqueResults.length} compressed NFT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π!`)
    }
    
    return uniqueResults
    
  } catch (error) {
    console.error('[parseAllCompressedNFTMethods] –û—à–∏–±–∫–∞:', error)
    return []
  }
}

// –ú–µ—Ç–æ–¥ 2: –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ SPL NoOp program –Ω–∞–ø—Ä—è–º—É—é
async function parseNoOpProgramLogs(tx: any, userWallet: string, blockTime: number, signature: string): Promise<NFTTransaction[]> {
  const nftTransfers: NFTTransaction[] = []
  
  try {
    const SPL_NOOP_PROGRAM_ID = 'noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV'
    
    // –ü–æ–ª—É—á–∞–µ–º accountKeys –∏ instructions
    let accountKeys: any[];
    let instructions: any[];
    
    if ('message' in tx.transaction && tx.transaction.message) {
      accountKeys = tx.transaction.message.accountKeys;
      instructions = tx.transaction.message.instructions || [];
    } else {
      accountKeys = tx.transaction.accountKeys || [];
      instructions = tx.transaction.instructions || [];
    }
    
    // –ò—â–µ–º SPL NoOp program –≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è—Ö
    const hasNoOpInstructions = instructions.some((ix: any) => {
      const programId = accountKeys[ix.programIdIndex]?.toBase58?.() ||
                       accountKeys[ix.programIdIndex]?.toString?.()
      return programId === SPL_NOOP_PROGRAM_ID
    })
    
    console.log(`[parseNoOpProgramLogs] SPL NoOp –Ω–∞–π–¥–µ–Ω: ${hasNoOpInstructions}`)
    
    if (!hasNoOpInstructions) return []
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ NoOp –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    for (const ix of instructions) {
      const programId = accountKeys[ix.programIdIndex]?.toBase58?.() ||
                       accountKeys[ix.programIdIndex]?.toString?.()
      
      if (programId === SPL_NOOP_PROGRAM_ID && ix.data) {
        console.log(`[parseNoOpProgramLogs] –ê–Ω–∞–ª–∏–∑ NoOp data: ${ix.data}`)
        
        try {
          // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
          const dataBuffer = Buffer.from(ix.data, 'base64')
          console.log(`[parseNoOpProgramLogs] Decoded ${dataBuffer.length} bytes: ${dataBuffer.toString('hex')}`)
          
          // –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ compressed NFT event
          const cNFTEvent = parseCompressedNFTEvent(dataBuffer)
          if (cNFTEvent) {
            console.log(`[parseNoOpProgramLogs] ‚úÖ Parsed NoOp cNFT event:`, cNFTEvent)
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const isUserInvolved = 
              cNFTEvent.leafOwner === userWallet ||
              cNFTEvent.leafDelegate === userWallet ||
              cNFTEvent.previousLeafOwner === userWallet
            
            if (isUserInvolved) {
              const nftTransaction: NFTTransaction = {
                signature,
                type: cNFTEvent.eventType === 'mint' ? 'NFT_MINT' : 
                      cNFTEvent.eventType === 'burn' ? 'NFT_BURN' : 'NFT_TRANSFER',
                nftMint: cNFTEvent.assetId || `compressed_${cNFTEvent.treeId}_${cNFTEvent.leafIndex}`,
                nftName: cNFTEvent.metadata?.name || `Compressed NFT #${cNFTEvent.leafIndex}`,
                nftImage: cNFTEvent.metadata?.image,
                collection: cNFTEvent.metadata?.collection || 'Compressed Collection',
                from: cNFTEvent.previousLeafOwner || '',
                to: cNFTEvent.leafOwner,
                date: blockTime ? new Date(blockTime * 1000).toISOString() : new Date().toISOString(),
                blockTime: blockTime || 0,
                verified: false
              }
              
              nftTransfers.push(nftTransaction)
              console.log(`[parseNoOpProgramLogs] ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ NoOp cNFT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è`)
            }
          }
        } catch (error) {
          console.error('[parseNoOpProgramLogs] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ NoOp data:', error)
        }
      }
    }
    
  } catch (error) {
    console.error('[parseNoOpProgramLogs] –û—à–∏–±–∫–∞:', error)
  }
  
  return nftTransfers
}

// –ú–µ—Ç–æ–¥ 3: –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ accounts
async function parseAccountChanges(tx: any, userWallet: string, blockTime: number, signature: string): Promise<NFTTransaction[]> {
  const nftTransfers: NFTTransaction[] = []
  
  try {
    const BUBBLEGUM_PROGRAM_ID = 'BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY'
    
    // –ü–æ–ª—É—á–∞–µ–º accountKeys
    let accountKeys: any[];
    
    if ('message' in tx.transaction && tx.transaction.message) {
      accountKeys = tx.transaction.message.accountKeys;
    } else {
      accountKeys = tx.transaction.accountKeys || [];
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ Bubblegum program –≤ –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
    const bubblegumAccounts = accountKeys.filter((key: any) => {
      const keyStr = key?.toBase58?.() || key?.toString?.()
      return keyStr === BUBBLEGUM_PROGRAM_ID
    })
    
    if (!bubblegumAccounts?.length) return []
    
    console.log(`[parseAccountChanges] Bubblegum program –Ω–∞–π–¥–µ–Ω –≤ accounts`)
    
    // –ò—â–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ account data, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ compressed NFT –æ–ø–µ—Ä–∞—Ü–∏–∏
    if (tx.meta?.preTokenBalances && tx.meta?.postTokenBalances) {
      const preBalances = tx.meta.preTokenBalances
      const postBalances = tx.meta.postTokenBalances
      
      // –ò—â–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
      for (const preBalance of preBalances) {
        if (preBalance.owner === userWallet) {
          const postBalance = postBalances.find((post: any) => 
            post.accountIndex === preBalance.accountIndex
          )
          
          if (postBalance && preBalance.uiTokenAmount.amount !== postBalance.uiTokenAmount.amount) {
            console.log(`[parseAccountChanges] –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è ${userWallet}`)
            
            // –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å compressed NFT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
            const nftTransaction: NFTTransaction = {
              signature,
              type: 'NFT_TRANSFER',
              nftMint: `compressed_change_${preBalance.accountIndex}`,
              nftName: 'Compressed NFT (Change Detected)',
              collection: 'Compressed Collection',
              from: userWallet,
              to: userWallet,
              date: blockTime ? new Date(blockTime * 1000).toISOString() : new Date().toISOString(),
              blockTime: blockTime || 0,
              verified: false
            }
            
            nftTransfers.push(nftTransaction)
          }
        }
      }
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å innerInstructions, –∏—â–µ–º —Ç–∞–º —Ç–æ–∂–µ
    if (tx.meta?.innerInstructions) {
      for (const inner of tx.meta.innerInstructions) {
        for (const ix of inner.instructions) {
          const programId = tx.message.accountKeys[ix.programIdIndex]?.toBase58?.()
          if (programId === BUBBLEGUM_PROGRAM_ID) {
            console.log(`[parseAccountChanges] –ù–∞–π–¥–µ–Ω inner Bubblegum instruction`)
            
            const nftTransaction: NFTTransaction = {
              signature,
              type: 'NFT_TRANSFER',
              nftMint: `compressed_inner_${inner.index}`,
              nftName: 'Compressed NFT (Inner Instruction)',
              collection: 'Compressed Collection',
              from: '',
              to: userWallet,
              date: blockTime ? new Date(blockTime * 1000).toISOString() : new Date().toISOString(),
              blockTime: blockTime || 0,
              verified: false
            }
            
            nftTransfers.push(nftTransaction)
          }
        }
      }
    }
    
  } catch (error) {
    console.error('[parseAccountChanges] –û—à–∏–±–∫–∞:', error)
  }
  
  return nftTransfers
}

export async function POST(request: NextRequest) {
  try {
    const { walletAddress, limit } = await request.json()
    
    if (!walletAddress) {
      return NextResponse.json(
        { error: 'Wallet address is required' },
        { status: 400 }
      )
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞
    try {
      new PublicKey(walletAddress)
    } catch (error) {
      return NextResponse.json(
        { error: 'Invalid wallet address' },
        { status: 400 }
      )
    }
    
    console.log(`[NFT Transactions API] –ó–∞–ø—Ä–æ—Å –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞: ${walletAddress}`)
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –∫—ç—à–∞
    const cacheKey = ServerCache.createKey('nft-transactions', { 
      wallet: walletAddress, 
      limit: limit || 10 
    })
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    const transactions = await serverCache.getOrFetch(
      cacheKey,
      () => getNFTTransactions(walletAddress, limit || 10),
      'NFT_TRANSACTIONS' // –ù–æ–≤—ã–π —Ç–∏–ø –∫—ç—à–∞
    )
    
    console.log(`[NFT Transactions API] –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ ${transactions.length} NFT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`)
    
    return NextResponse.json({
      success: true,
      transactions,
      count: transactions.length
    })
    
  } catch (error) {
    console.error('[NFT Transactions API] –û—à–∏–±–∫–∞:', error)
    return NextResponse.json(
      { 
        error: 'Failed to fetch NFT transactions',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    )
  }
} 