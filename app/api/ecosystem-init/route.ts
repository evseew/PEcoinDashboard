// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã
import { NextRequest, NextResponse } from "next/server"
import { dynamicEcosystemCache } from "@/lib/dynamic-ecosystem-cache"

let isInitialized = false
let isInitializing = false

export async function POST(request: NextRequest) {
  try {
    // –û–¢–ö–õ–Æ–ß–ï–ù–û –¥–ª—è production - –¥—É–±–ª–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –±–∞–ª–∞–Ω—Å–æ–≤ —Å PublicDashboard
    if (process.env.NODE_ENV === 'production') {
      return NextResponse.json({ 
        success: false, 
        message: 'Ecosystem initialization disabled for production environment to prevent duplicate balance requests',
        productionMode: true
      })
    }

    if (isInitialized) {
      const stats = dynamicEcosystemCache.getEcosystemStats()
      return NextResponse.json({ 
        success: true, 
        message: 'Already initialized',
        stats,
        alreadyInitialized: true
      })
    }

    if (isInitializing) {
      return NextResponse.json({ 
        success: true, 
        message: 'Initialization in progress',
        initializing: true
      })
    }

    isInitializing = true
    console.log('üåê –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã... (development)')

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è development)
    dynamicEcosystemCache.autoInitialize()
      .then(() => {
        isInitialized = true
        isInitializing = false
        console.log('‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞')
      })
      .catch((error) => {
        isInitializing = false
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã:', error)
      })

    return NextResponse.json({ 
      success: true, 
      message: 'Dynamic ecosystem initialization started (development mode)',
      initializing: true
    })

  } catch (error) {
    isInitializing = false
    console.error('‚ùå Ecosystem init error:', error)
    return NextResponse.json({ 
      success: false, 
      error: 'Failed to initialize ecosystem' 
    }, { status: 500 })
  }
}

export async function GET(request: NextRequest) {
  return NextResponse.json({
    success: true,
    status: {
      initialized: isInitialized,
      initializing: isInitializing,
      productionMode: process.env.NODE_ENV === 'production'
    },
    stats: isInitialized ? dynamicEcosystemCache.getEcosystemStats() : null
  })
} 