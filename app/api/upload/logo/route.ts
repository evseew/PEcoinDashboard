import { NextRequest, NextResponse } from 'next/server'
import { supabase } from '@/lib/supabaseClient'
import { signedUrlCache } from '@/lib/signed-url-cache'

// ‚úÖ –í–ê–õ–ò–î–ù–´–ï —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const ALLOWED_EXTENSIONS = ['jpg', 'jpeg', 'png', 'webp', 'gif', 'svg']
const MAX_FILE_SIZE = 5 * 1024 * 1024 // 5MB –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤

interface UploadLogoResponse {
  success: boolean
  data?: {
    logoPath: string
    signedUrl: string
    fileSize: number
    fileType: string
  }
  error?: string
}

export async function POST(request: NextRequest): Promise<NextResponse<UploadLogoResponse>> {
  try {
    const formData = await request.formData()
    const file = formData.get('file') as File
    const entityType = formData.get('entityType') as string
    const entityId = formData.get('entityId') as string
    
    console.log('[Upload Logo] üì§ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å:', {
      fileName: file?.name,
      fileSize: file?.size,
      entityType,
      entityId
    })

    // ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!file) {
      return NextResponse.json({
        success: false,
        error: '–§–∞–π–ª –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
      }, { status: 400 })
    }

    if (!entityType || !['staff', 'teams', 'startups'].includes(entityType)) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏. –†–∞–∑—Ä–µ—à–µ–Ω—ã: staff, teams, startups'
      }, { status: 400 })
    }

    if (!entityId || entityId.length < 1) {
      return NextResponse.json({
        success: false,
        error: 'ID —Å—É—â–Ω–æ—Å—Ç–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      }, { status: 400 })
    }

    // ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    if (!file.type.startsWith('image/')) {
      return NextResponse.json({
        success: false,
        error: '–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º'
      }, { status: 400 })
    }

    // ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    if (file.size > MAX_FILE_SIZE) {
      return NextResponse.json({
        success: false,
        error: `–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å ${MAX_FILE_SIZE / 1024 / 1024}MB`
      }, { status: 400 })
    }

    // ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    const fileName = file.name.toLowerCase()
    const ext = fileName.split('.').pop()
    
    if (!ext || !ALLOWED_EXTENSIONS.includes(ext)) {
      return NextResponse.json({
        success: false,
        error: `–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: ${ALLOWED_EXTENSIONS.join(', ')}`
      }, { status: 400 })
    }

    // ‚úÖ –ì–ï–ù–ï–†–ê–¶–ò–Ø –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø—É—Ç–∏ —Ñ–∞–π–ª–∞
    const safePath = `${entityType}/${entityId}.${ext}`
    
    console.log('[Upload Logo] üìÅ –ó–∞–≥—Ä—É–∂–∞—é –≤ Supabase Storage:', safePath)

    // ‚úÖ –ó–ê–ì–†–£–ó–ö–ê –≤ Supabase Storage —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    const { error: uploadError } = await supabase.storage
      .from('dashboard.logos')
      .upload(safePath, file, { 
        upsert: true,  // –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
        contentType: file.type
      })

    if (uploadError) {
      console.error('[Upload Logo] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Supabase:', uploadError)
      return NextResponse.json({
        success: false,
        error: `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${uploadError.message}`
      }, { status: 500 })
    }

    // ‚úÖ –ò–ù–í–ê–õ–ò–î–ê–¶–ò–Ø –∫—ç—à–∞ —Å—Ç–∞—Ä–æ–≥–æ URL
    console.log('[Upload Logo] üóëÔ∏è –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É—é –∫—ç—à –¥–ª—è:', safePath)
    signedUrlCache.invalidate(safePath)

    // ‚úÖ –ü–û–õ–£–ß–ï–ù–ò–ï –Ω–æ–≤–æ–≥–æ signed URL
    const signedUrl = await signedUrlCache.getSignedUrl(safePath)
    
    if (!signedUrl) {
      console.error('[Upload Logo] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å signed URL')
      return NextResponse.json({
        success: false,
        error: '–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è'
      }, { status: 500 })
    }

    console.log('[Upload Logo] ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω:', {
      path: safePath,
      size: file.size,
      type: file.type
    })

    // ‚úÖ –í–û–ó–í–†–ê–¢ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    return NextResponse.json({
      success: true,
      data: {
        logoPath: safePath,
        signedUrl,
        fileSize: file.size,
        fileType: file.type
      }
    })

  } catch (error: any) {
    console.error('[Upload Logo] üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
    
    return NextResponse.json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ–≥–æ—Ç–∏–ø–∞'
    }, { status: 500 })
  }
}

export async function GET() {
  return NextResponse.json({
    error: '–ú–µ—Ç–æ–¥ GET –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ POST –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–æ–≤.'
  }, { status: 405 })
} 