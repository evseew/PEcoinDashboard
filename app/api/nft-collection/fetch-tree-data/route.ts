import { NextRequest, NextResponse } from 'next/server'

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è RPC —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
const USER_RPC_URL = process.env.RPC_URL || process.env.ALCHEMY_URL
const MAIN_RPC_URL = "https://api.mainnet-beta.solana.com"
const BACKUP_RPC_URLS = [
  USER_RPC_URL, // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π RPC –ø–µ—Ä–≤—ã–º (–æ–±—ã—á–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç DAS API)
  "https://solana-api.projectserum.com",
  "https://rpc.ankr.com/solana",
  MAIN_RPC_URL
].filter(url => url && url.trim() !== "") // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ URL

interface TreeData {
  name: string
  description: string
  treeAddress: string
  collectionAddress?: string  // ‚ú® –ü–æ–ª–µ –¥–ª—è collection address
  capacity: number
  minted: number
  creator?: string
  symbol?: string
  image?: string
  hasValidTree: boolean
  supportsDAS: boolean
  rpcUsed: string
  isEmpty?: boolean  // ‚ú® –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –ø—É—Å—Ç—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å RPC (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ –≤–∞—à–µ–≥–æ –∫–æ–¥–∞)
function createRpcInstance(url: string) {
  console.log(`[fetchTreeData] –°–æ–∑–¥–∞–µ–º RPC –∏–Ω—Å—Ç–∞–Ω—Å –¥–ª—è: ${url}`)
  return {
    url,
    // –ú–µ—Ç–æ–¥ –¥–ª—è DAS API –∑–∞–ø—Ä–æ—Å–æ–≤
    async dasRequest(method: string, params: any) {
      const dasRequest = {
        jsonrpc: '2.0',
        id: 'fetch-tree-data',
        method,
        params
      }
      
      const response = await fetch(url, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(dasRequest),
        signal: AbortSignal.timeout(30000) // ‚ú® –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout –¥–æ 30 —Å–µ–∫—É–Ω–¥
      })
      
      if (!response.ok) {
        throw new Error(`RPC error: ${response.status} ${response.statusText}`)
      }
      
      const data = await response.json()
      if (data.error) {
        throw new Error(`DAS API error: ${data.error.message}`)
      }
      
      return data.result
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞ - –ø–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ metadata

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ DAS API (–∏–∑ –≤–∞—à–µ–≥–æ get_nfts.js)
async function checkDASApiSupport(rpc: any): Promise<boolean> {
  try {
    console.log(`[checkDASApiSupport] –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É DAS API...`)
    
    // –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    await rpc.dasRequest('getAssetsByOwner', {
      ownerAddress: "11111111111111111111111111111112", // System program –∫–∞–∫ —Ç–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å
      limit: 1
    })
    
    console.log(`[checkDASApiSupport] ‚úÖ DAS API –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`)
    return true
  } catch (error: any) {
    console.log(`[checkDASApiSupport] ‚ùå DAS API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: ${error.message}`)
    return false
  }
}

// ‚ú® –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–∏—Å–∫ Tree Address –ø–æ Collection Address
async function findTreeByCollectionAddress(collectionAddress: string, rpc: any): Promise<string | null> {
  try {
    console.log(`[findTreeByCollectionAddress] üîç –ò—â–µ–º tree –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏: ${collectionAddress}`)
    console.log(`[findTreeByCollectionAddress] –ò—Å–ø–æ–ª—å–∑—É–µ–º RPC: ${rpc.url}`)
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º getAssetsByGroup –¥–ª—è –ø–æ–∏—Å–∫–∞ NFT –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º timeout
    const assets = await Promise.race([
      rpc.dasRequest('getAssetsByGroup', {
        groupKey: 'collection',
        groupValue: collectionAddress,
        page: 1,
        limit: 1 // –ù–∞–º –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω NFT —á—Ç–æ–±—ã –∏–∑–≤–ª–µ—á—å tree
      }),
      new Promise((_, reject) => 
        setTimeout(() => reject(new Error('Request timeout after 30 seconds')), 30000)
      )
    ])

    console.log(`[findTreeByCollectionAddress] –û—Ç–≤–µ—Ç DAS API:`, {
      total: assets?.total || 0,
      itemsCount: assets?.items?.length || 0
    })

    if (!assets || !assets.items || assets.items.length === 0) {
      console.log(`[findTreeByCollectionAddress] ‚ùå NFT –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ ${collectionAddress}`)
      console.log(`[findTreeByCollectionAddress] –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:`)
      console.log(`  - –ö–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞—è (–Ω–µ—Ç –∑–∞–º–∏–Ω—á–µ–Ω–Ω—ã—Ö NFT)`)
      console.log(`  - Collection address –Ω–µ–≤–µ—Ä–Ω—ã–π`)
      console.log(`  - –ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Compressed NFT`)
      console.log(`  - DAS API –Ω–µ –∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç —ç—Ç—É –∫–æ–ª–ª–µ–∫—Ü–∏—é`)
      return null
    }

    const firstNft = assets.items[0]
    console.log(`[findTreeByCollectionAddress] –ü–µ—Ä–≤—ã–π NFT:`, {
      id: firstNft?.id,
      hasCompression: !!firstNft?.compression,
      tree: firstNft?.compression?.tree,
      compressed: firstNft?.compression?.compressed
    })

    const treeAddress = firstNft?.compression?.tree

    if (!treeAddress) {
      console.log(`[findTreeByCollectionAddress] ‚ùå Tree address –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ NFT`)
      console.log(`[findTreeByCollectionAddress] –≠—Ç–æ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å —á—Ç–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—ã—á–Ω—ã–µ NFT, –∞ –Ω–µ Compressed NFT`)
      return null
    }

    console.log(`[findTreeByCollectionAddress] ‚úÖ –ù–∞–π–¥–µ–Ω tree: ${treeAddress}`)
    return treeAddress

  } catch (error: any) {
    console.log(`[findTreeByCollectionAddress] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${error.message}`)
    console.log(`[findTreeByCollectionAddress] Stack trace:`, error.stack)
    return null
  }
}

// ‚ú® –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ Merkle Tree account –Ω–∞–ø—Ä—è–º—É—é
async function validateMerkleTreeAccount(treeAddress: string, rpc: any): Promise<Partial<TreeData> | null> {
  try {
    console.log(`[validateMerkleTreeAccount] üå≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º Merkle Tree account: ${treeAddress}`)
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ RPC
    const accountInfoResponse = await fetch(rpc.url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        jsonrpc: '2.0',
        id: 'validate-tree',
        method: 'getAccountInfo',
        params: [
          treeAddress,
          {
            encoding: 'base64',
            commitment: 'confirmed'
          }
        ]
      }),
      signal: AbortSignal.timeout(10000)
    })

    if (!accountInfoResponse.ok) {
      throw new Error(`RPC error: ${accountInfoResponse.status}`)
    }

    const accountData = await accountInfoResponse.json()
    
    if (accountData.error) {
      throw new Error(`Account info error: ${accountData.error.message}`)
    }

    const accountInfo = accountData.result?.value
    
    if (!accountInfo || !accountInfo.data) {
      console.log(`[validateMerkleTreeAccount] ‚ùå Account –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–π`)
      return null
    }

    console.log(`[validateMerkleTreeAccount] ‚úÖ Account –Ω–∞–π–¥–µ–Ω, owner: ${accountInfo.owner}`)
    console.log(`[validateMerkleTreeAccount] Account lamports: ${accountInfo.lamports}, executable: ${accountInfo.executable}`)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ owner —ç—Ç–æ SPL Account Compression program
    const ACCOUNT_COMPRESSION_PROGRAM_ID = 'cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK'
    const SPL_NOOP_PROGRAM_ID = 'noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV'
    
    if (accountInfo.owner !== ACCOUNT_COMPRESSION_PROGRAM_ID) {
      console.log(`[validateMerkleTreeAccount] ‚ö†Ô∏è Account owner –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Account Compression program: ${accountInfo.owner}`)
      // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É - –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –¥—Ä—É–≥–æ–π —Ç–∏–ø –≤–∞–ª–∏–¥–Ω–æ–≥–æ account
    }

    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º account data –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ Merkle Tree
    const accountDataBuffer = Buffer.from(accountInfo.data[0], 'base64')
    console.log(`[validateMerkleTreeAccount] Account data size: ${accountDataBuffer.length} bytes`)
    
    let treeCapacity = 1024 // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    let maxDepth = 20       // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    let maxBufferSize = 64  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ account data
    if (accountDataBuffer.length >= 8) {
      try {
        // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ Merkle Tree account data –º–æ–∂–µ—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è Compressed NFT
        const possibleCapacities = [256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576]
        
        // –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å capacity –∏–∑ —Ä–∞–∑–º–µ—Ä–∞ account data
        // –ë–æ–ª—å—à–∏–π account data –æ–±—ã—á–Ω–æ –æ–∑–Ω–∞—á–∞–µ—Ç –±–æ–ª—å—à–∏–π capacity
        if (accountDataBuffer.length >= 100000) {
          treeCapacity = 65536
          maxDepth = 26
        } else if (accountDataBuffer.length >= 50000) {
          treeCapacity = 16384
          maxDepth = 24
        } else if (accountDataBuffer.length >= 10000) {
          treeCapacity = 4096
          maxDepth = 22
        } else if (accountDataBuffer.length >= 1000) {
          treeCapacity = 1024
          maxDepth = 20
        } else {
          treeCapacity = 256
          maxDepth = 18
        }
        
        console.log(`[validateMerkleTreeAccount] –û—Ü–µ–Ω–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: capacity=${treeCapacity}, depth=${maxDepth}`)
        
      } catch (parseError) {
        console.log(`[validateMerkleTreeAccount] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å account data, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é`)
      }
    }

    // ‚ú® –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    let collectionName = `Empty Tree ${treeAddress.slice(0, 8)}...${treeAddress.slice(-4)}`
    let collectionSymbol = 'cNFT'
    let collectionDescription = 'Empty Compressed NFT collection ready for minting'
    let collectionImage = null
    
    // –ú–µ—Ç–æ–¥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ tree address –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ collection address
    try {
      console.log(`[validateMerkleTreeAccount] üîç –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å metadata –∫–∞–∫ collection address...`)
      
      const collectionMetadata = await rpc.dasRequest('getAsset', {
        id: treeAddress
      })
      
      if (collectionMetadata && collectionMetadata.content?.metadata) {
        const meta = collectionMetadata.content.metadata
        if (meta.name && !meta.name.includes('#')) { // –ò—Å–∫–ª—é—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è NFT —Å –Ω–æ–º–µ—Ä–∞–º–∏
          collectionName = meta.name
          console.log(`[validateMerkleTreeAccount] ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ collection metadata: "${collectionName}"`)
        }
        if (meta.symbol) {
          collectionSymbol = meta.symbol
        }
        if (meta.description) {
          collectionDescription = meta.description
        }
        if (collectionMetadata.content?.links?.image || meta.image) {
          collectionImage = collectionMetadata.content.links.image || meta.image
        }
      }
    } catch (error: any) {
      console.log(`[validateMerkleTreeAccount] Collection metadata –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${error.message}`)
    }
    
    // –ú–µ—Ç–æ–¥ 2: –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Å–µ –µ—â–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
    if (collectionName.includes('Empty Tree')) {
      collectionName = `New Collection ${treeAddress.slice(0, 8)}`
      console.log(`[validateMerkleTreeAccount] –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –Ω–∞–∑–≤–∞–Ω–∏–µ: "${collectionName}"`)
    }

    // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É—Å—Ç–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    const emptyTreeData: Partial<TreeData> = {
      name: collectionName,
      description: collectionDescription,
      capacity: treeCapacity,
      minted: 0,
      symbol: collectionSymbol,
      image: collectionImage,
      hasValidTree: true,  // ‚úÖ –í–∞–ª–∏–¥–Ω—ã–π –Ω–æ –ø—É—Å—Ç–æ–π tree
      supportsDAS: true    // DAS –º–æ–∂–µ—Ç –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –º–∏–Ω—Ç–∏–Ω–≥–∞
    }

    console.log(`[validateMerkleTreeAccount] ‚úÖ –í–∞–ª–∏–¥–Ω—ã–π –ø—É—Å—Ç–æ–π Merkle Tree –æ–±–Ω–∞—Ä—É–∂–µ–Ω:`, {
      capacity: emptyTreeData.capacity,
      hasValidTree: emptyTreeData.hasValidTree
    })

    return emptyTreeData

  } catch (error: any) {
    console.log(`[validateMerkleTreeAccount] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Merkle Tree: ${error.message}`)
    return null
  }
}

// üéØ –ü–†–û–°–¢–ê–Ø –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–∏
async function fetchTreeDataViaDAS(treeAddress: string, rpc: any, requestedCollectionAddress?: string): Promise<Partial<TreeData>> {
  console.log(`[fetchTreeDataViaDAS] –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ: tree=${treeAddress}, collection=${requestedCollectionAddress}`)
  
  try {
    let totalNFTs = 0
    let compressionData: any = {}
    let collectionAddress = requestedCollectionAddress
    let collectionMetadata: any = {}
    
    // üìç –®–ê–ì–ò:
    // 1. –ü–æ–ª—É—á–∞–µ–º NFT –∏–∑ –¥–µ—Ä–µ–≤–∞ –∏–ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    // 2. –ò–∑–≤–ª–µ–∫–∞–µ–º collection address –∏–∑ –ø–µ—Ä–≤–æ–≥–æ NFT (–µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω)
    // 3. –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é
    // 4. –ì–æ—Ç–æ–≤–æ!

    // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º NFT
    let nftData = null
    
    // –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –ø–æ tree ID
    try {
      console.log(`[fetchTreeDataViaDAS] üå≥ –ü–æ–ª—É—á–∞–µ–º NFT –ø–æ tree ID...`)
      nftData = await rpc.dasRequest('getAssetsByTree', {
        treeId: treeAddress,
        page: 1,
        limit: 1 // –ù—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π NFT –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
      })
      
      if (nftData?.total > 0) {
        totalNFTs = nftData.total
        compressionData = nftData.items[0]?.compression || {}
        console.log(`[fetchTreeDataViaDAS] ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${totalNFTs} NFT –≤ –¥–µ—Ä–µ–≤–µ`)
      }
    } catch (error: any) {
      console.log(`[fetchTreeDataViaDAS] Tree –ø–æ–∏—Å–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${error.message}`)
    }

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ tree, –ø—Ä–æ–±—É–µ–º –ø–æ collection (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω collection address)
    if (totalNFTs === 0 && requestedCollectionAddress) {
      try {
        console.log(`[fetchTreeDataViaDAS] üì¶ –ü–æ–ª—É—á–∞–µ–º NFT –ø–æ collection address...`)
        nftData = await rpc.dasRequest('getAssetsByGroup', {
          groupKey: 'collection',
          groupValue: requestedCollectionAddress,
          page: 1,
          limit: 1
        })
        
        if (nftData?.total > 0) {
          totalNFTs = nftData.total
          compressionData = nftData.items[0]?.compression || {}
          console.log(`[fetchTreeDataViaDAS] ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${totalNFTs} NFT –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏`)
        }
      } catch (error: any) {
        console.log(`[fetchTreeDataViaDAS] Collection –ø–æ–∏—Å–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${error.message}`)
      }
    }

    // –®–∞–≥ 2: –ò–∑–≤–ª–µ–∫–∞–µ–º collection address –∏–∑ NFT (–µ—Å–ª–∏ –Ω–µ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω)
    if (!collectionAddress && nftData?.items?.[0]) {
      const firstNFT = nftData.items[0]
      const collectionGroup = firstNFT.grouping?.find((g: any) => g.group_key === 'collection')
      if (collectionGroup?.group_value) {
        collectionAddress = collectionGroup.group_value
        console.log(`[fetchTreeDataViaDAS] üîç –ò–∑–≤–ª–µ—á–µ–Ω collection address: ${collectionAddress}`)
      }
    }

    // –®–∞–≥ 3: –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é
    if (collectionAddress) {
      try {
        console.log(`[fetchTreeDataViaDAS] üìã –ü–æ–ª—É—á–∞–µ–º metadata –∫–æ–ª–ª–µ–∫—Ü–∏–∏...`)
        const collectionNFT = await rpc.dasRequest('getAsset', {
          id: collectionAddress
        })
        
        if (collectionNFT?.content?.metadata) {
          collectionMetadata = collectionNFT.content.metadata
          console.log(`[fetchTreeDataViaDAS] ‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: "${collectionMetadata.name}"`)
        }
      } catch (error: any) {
        console.log(`[fetchTreeDataViaDAS] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: ${error.message}`)
      }
    }

    // –®–∞–≥ 4: –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (totalNFTs > 0) {
      const capacity = estimateCapacityFromTreeData(compressionData, totalNFTs)
      
      return {
        name: collectionMetadata.name || `Collection ${collectionAddress?.slice(0, 8) || treeAddress.slice(0, 8)}`,
        description: collectionMetadata.description || 'Compressed NFT collection',
        capacity: capacity,
        minted: totalNFTs,
        symbol: collectionMetadata.symbol || 'cNFT',
        image: collectionMetadata.image,
        hasValidTree: true,
        supportsDAS: true,
        collectionAddress: collectionAddress
      }
    }
    
    // ‚ú® –ï—Å–ª–∏ NFT –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Å—Ç—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
    console.log(`[fetchTreeDataViaDAS] ‚ö†Ô∏è NFT –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Å—Ç—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é...`)
    
    const emptyTreeData = await validateMerkleTreeAccount(treeAddress, rpc)
    if (emptyTreeData) {
      console.log(`[fetchTreeDataViaDAS] ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø—É—Å—Ç–∞—è –≤–∞–ª–∏–¥–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è`)
      return {
        ...emptyTreeData,
        collectionAddress: collectionAddress,
        hasValidTree: true,
        supportsDAS: true,
        isEmpty: true
      }
    }
    
    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    console.log(`[fetchTreeDataViaDAS] ‚ùå –ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`)
    return {
      name: `Unknown ${treeAddress.slice(0, 8)}`,
      description: 'Collection not found',
      capacity: 0,
      minted: 0,
      symbol: 'cNFT',
      hasValidTree: false,
      supportsDAS: false,
      collectionAddress: collectionAddress
    }
    
  } catch (error: any) {
    console.error(`[fetchTreeDataViaDAS] –û—à–∏–±–∫–∞:`, error.message)
    throw error
  }
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ capacity (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–µ—Ä–µ–≤–∞)
function estimateCapacityFromTreeData(compression: any, mintedCount: number): number {
  // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –¥–µ—Ä–µ–≤–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
  if (compression.tree && compression.leaf_id !== undefined) {
    const leafId = compression.leaf_id
    // Capacity –æ–±—ã—á–Ω–æ —Å—Ç–µ–ø–µ–Ω—å –¥–≤–æ–π–∫–∏, –±–æ–ª—å—à–µ —á–µ–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π leaf_id
    const standardSizes = [256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576]
    
    for (const size of standardSizes) {
      if (size > Math.max(leafId, mintedCount)) {
        return size
      }
    }
  }
  
  // Fallback –∫ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ
  return estimateCapacityFromCount(mintedCount)
}

// –≠–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è capacity –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–º–∏–Ω—á–µ–Ω–Ω—ã—Ö NFT
function estimateCapacityFromCount(mintedCount: number): number {
  const standardSizes = [256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576]
  
  // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π —Ä–∞–∑–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –±–æ–ª—å—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–º–∏–Ω—á–µ–Ω–Ω—ã—Ö NFT
  for (const size of standardSizes) {
    if (size > mintedCount) {
      return size
    }
  }
  
  return 1048576 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–µ—Ä–µ–≤–∞ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑ –≤–∞—à–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ RPC)
async function fetchTreeData(treeAddress: string, collectionAddress?: string): Promise<TreeData> {
  console.log(`[fetchTreeData] –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è tree: ${treeAddress}`)
  if (collectionAddress) {
    console.log(`[fetchTreeData] –°–≤—è–∑–∞–Ω–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è: ${collectionAddress}`)
  }
  
  let connectedSuccessfully = false
  let currentRpcUrl = ""
  let supportsDAS = false
  let treeData: Partial<TreeData> = {}
  
  // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º RPC —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –∫–∞–∫ –≤ –≤–∞—à–µ–º –∫–æ–¥–µ
  for (const rpcUrl of BACKUP_RPC_URLS) {
    if (!rpcUrl) continue
    
    currentRpcUrl = rpcUrl
    console.log(`[fetchTreeData] üîÑ –ü—Ä–æ–±—É–µ–º RPC: ${currentRpcUrl}`)
    
    try {
      const rpc = createRpcInstance(currentRpcUrl)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É DAS API
      const hasDASSupport = await checkDASApiSupport(rpc)
      
      if (hasDASSupport) {
        console.log(`[fetchTreeData] ‚úÖ RPC –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç DAS API, –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ...`)
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ DAS API
        treeData = await fetchTreeDataViaDAS(treeAddress, rpc, collectionAddress)
        supportsDAS = true
        connectedSuccessfully = true
        break
      } else {
        console.log(`[fetchTreeData] ‚ö†Ô∏è RPC –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç DAS API, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...`)
      }
      
    } catch (error: any) {
      console.log(`[fetchTreeData] ‚ùå –û—à–∏–±–∫–∞ —Å RPC ${currentRpcUrl}: ${error.message}`)
      continue
    }
  }
  
  if (!connectedSuccessfully) {
    console.warn(`[fetchTreeData] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ RPC —Å DAS API –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π`)
    
    // ‚ú® –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –î–∞–∂–µ –±–µ–∑ DAS API –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å Merkle Tree
    console.log(`[fetchTreeData] üîç –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å Merkle Tree –±–µ–∑ DAS API...`)
    
    // –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π RPC –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ account
    for (const rpcUrl of BACKUP_RPC_URLS) {
      if (!rpcUrl) continue
      
      try {
        const rpc = createRpcInstance(rpcUrl)
        console.log(`[fetchTreeData] –ü—Ä–æ–≤–µ—Ä—è–µ–º Merkle Tree —á–µ—Ä–µ–∑ RPC: ${rpcUrl}`)
        
        const emptyTreeData = await validateMerkleTreeAccount(treeAddress, rpc)
        
        if (emptyTreeData) {
          console.log(`[fetchTreeData] ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø—É—Å—Ç–∞—è –≤–∞–ª–∏–¥–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è —á–µ—Ä–µ–∑ fallback RPC!`)
          
          return {
            name: emptyTreeData.name || `Empty Tree ${treeAddress.slice(0, 8)}`,
            description: emptyTreeData.description || 'Empty Compressed NFT collection ready for minting',
            treeAddress: treeAddress,
            collectionAddress: collectionAddress, // ‚ú® –í–æ–∑–≤—Ä–∞—â–∞–µ–º collection address
            capacity: emptyTreeData.capacity || 1024,
            minted: 0,
            creator: emptyTreeData.creator,
            symbol: emptyTreeData.symbol || 'cNFT',
            image: emptyTreeData.image,
            hasValidTree: true,   // ‚úÖ –í–∞–ª–∏–¥–Ω–∞—è –ø—É—Å—Ç–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è
            supportsDAS: false,   // DAS API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ tree –≤–∞–ª–∏–¥–Ω—ã–π
            rpcUsed: rpcUrl,
            isEmpty: true
          }
        }
      } catch (error: any) {
        console.log(`[fetchTreeData] RPC ${rpcUrl} –Ω–µ —Å–º–æ–≥ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å Merkle Tree: ${error.message}`)
        continue
      }
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
    console.log(`[fetchTreeData] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞–ª–∏–¥–Ω—ã–π Merkle Tree –∏–ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—é`)
    return {
      name: `Tree ${treeAddress.slice(0, 8)}...${treeAddress.slice(-4)}`,
      description: 'Compressed NFT tree (connection failed and no valid Merkle Tree found)',
      treeAddress: treeAddress,
      collectionAddress: collectionAddress, // ‚ú® –í–æ–∑–≤—Ä–∞—â–∞–µ–º collection address
      capacity: 1024,
      minted: 0,
      symbol: 'cNFT',
      hasValidTree: false,
      supportsDAS: false,
      rpcUsed: 'none'
    }
  }
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const result: TreeData = {
    name: treeData.name || `Tree ${treeAddress.slice(0, 8)}`,
    description: treeData.description || 'Compressed NFT collection',
    treeAddress: treeAddress,
    capacity: treeData.capacity || 1024,
    minted: treeData.minted || 0,
    creator: treeData.creator,
    symbol: treeData.symbol || 'cNFT',
    image: treeData.image,
    hasValidTree: treeData.hasValidTree || false,
    supportsDAS: supportsDAS,
    rpcUsed: currentRpcUrl,
    isEmpty: treeData.isEmpty,
    collectionAddress: collectionAddress // ‚ú® –í–æ–∑–≤—Ä–∞—â–∞–µ–º collection address –µ—Å–ª–∏ –æ–Ω –±—ã–ª –Ω–∞–π–¥–µ–Ω
  }
  
  console.log(`[fetchTreeData] ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:`, {
    name: result.name,
    capacity: result.capacity,
    minted: result.minted,
    rpcUsed: result.rpcUsed
  })
  
  return result
}

export async function POST(request: NextRequest) {
  try {
    const { treeAddress, collectionAddress } = await request.json()

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–∑ –∞–¥—Ä–µ—Å–æ–≤
    if (!treeAddress && !collectionAddress) {
      return NextResponse.json(
        { error: 'Tree address or collection address is required' },
        { status: 400 }
      )
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–æ–≤ (Solana –∞–¥—Ä–µ—Å 44 —Å–∏–º–≤–æ–ª–∞ base58)
    const addressRegex = /^[1-9A-HJ-NP-Za-km-z]{44}$/
    
    if (treeAddress && !addressRegex.test(treeAddress)) {
      return NextResponse.json(
        { error: 'Invalid Solana tree address format' },
        { status: 400 }
      )
    }

    if (collectionAddress && !addressRegex.test(collectionAddress)) {
      return NextResponse.json(
        { error: 'Invalid Solana collection address format' },
        { status: 400 }
      )
    }

    let finalTreeAddress = treeAddress
    let finalCollectionAddress = collectionAddress

    // ‚ú® –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω collection address, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º tree address
    if (collectionAddress && !treeAddress) {
      console.log(`[API] –ü–æ–∏—Å–∫ tree address –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏: ${collectionAddress}`)
      
      // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º RPC –¥–ª—è –ø–æ–∏—Å–∫–∞ tree
      let foundTree = null
      let lastError = null
      let attemptedRpcs = []

      for (const rpcUrl of BACKUP_RPC_URLS) {
        if (!rpcUrl) continue
        
        try {
          console.log(`[API] –ü—Ä–æ–±—É–µ–º RPC: ${rpcUrl}`)
          attemptedRpcs.push(rpcUrl)
          
          const rpc = createRpcInstance(rpcUrl)
          const hasDASSupport = await checkDASApiSupport(rpc)
          
          if (hasDASSupport) {
            console.log(`[API] RPC ${rpcUrl} –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç DAS API, –∏—â–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é...`)
            foundTree = await findTreeByCollectionAddress(collectionAddress, rpc)
            if (foundTree) {
              console.log(`[API] ‚úÖ –ù–∞–π–¥–µ–Ω tree —á–µ—Ä–µ–∑ RPC ${rpcUrl}: ${foundTree}`)
              break
            } else {
              console.log(`[API] RPC ${rpcUrl} –Ω–µ –Ω–∞—à–µ–ª –∫–æ–ª–ª–µ–∫—Ü–∏—é`)
            }
          } else {
            console.log(`[API] RPC ${rpcUrl} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç DAS API`)
          }
        } catch (error: any) {
          lastError = error
          console.log(`[API] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ tree —á–µ—Ä–µ–∑ RPC ${rpcUrl}: ${error.message}`)
          continue
        }
      }

      if (!foundTree) {
        console.log(`[API] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ tree –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ ${collectionAddress}`)
        console.log(`[API] –ü–æ–ø—Ä–æ–±–æ–≤–∞–Ω–Ω—ã–µ RPC:`, attemptedRpcs)
        console.log(`[API] –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞:`, lastError?.message)
        
        return NextResponse.json(
          { 
            error: 'Could not find tree address for the provided collection address',
            details: `Searched through ${attemptedRpcs.length} RPC endpoints. This collection might be:\n‚Ä¢ Empty (no minted NFTs)\n‚Ä¢ Regular NFT collection (not Compressed NFT)\n‚Ä¢ Not indexed by DAS API yet\n‚Ä¢ Invalid collection address`,
            attemptedRpcs: attemptedRpcs,
            lastError: lastError?.message
          },
          { status: 404 }
        )
      }

      finalTreeAddress = foundTree
    }

    console.log(`[API] –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è tree: ${finalTreeAddress}`)
    if (finalCollectionAddress) {
      console.log(`[API] –°–≤—è–∑–∞–Ω–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è: ${finalCollectionAddress}`)
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
    const collectionData = await fetchTreeData(finalTreeAddress, finalCollectionAddress)

    return NextResponse.json({
      success: true,
      collection: collectionData,
      meta: {
        rpcUsed: collectionData.rpcUsed,
        supportsDAS: collectionData.supportsDAS,
        hasValidTree: collectionData.hasValidTree
      }
    })

  } catch (error: any) {
    console.error('[API] Error fetching tree data:', error)
    return NextResponse.json(
      { 
        error: error?.message || 'Failed to fetch collection data',
        details: 'Could not retrieve collection information from the provided tree address'
      },
      { status: 500 }
    )
  }
} 