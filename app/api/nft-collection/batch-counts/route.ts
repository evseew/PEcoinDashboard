import { NextRequest, NextResponse } from 'next/server'

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è RPC —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è DAS API
const USER_RPC_URL = process.env.RPC_URL || process.env.ALCHEMY_URL || ""
const BACKUP_RPC_URLS = [
  USER_RPC_URL,
  "https://solana-api.projectserum.com",
  "https://rpc.ankr.com/solana",
  "https://api.mainnet-beta.solana.com"
].filter(url => url && url.trim() !== "")

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å RPC
function createRpcInstance(url: string) {
  return {
    url,
    async dasRequest(method: string, params: any) {
      const dasRequest = {
        jsonrpc: '2.0',
        id: 'batch-nft-counts',
        method,
        params
      }
      
      const response = await fetch(url, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(dasRequest),
        signal: AbortSignal.timeout(8000) // –ë–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π timeout –¥–ª—è counts
      })
      
      if (!response.ok) {
        throw new Error(`RPC error: ${response.status} ${response.statusText}`)
      }
      
      const data = await response.json()
      if (data.error) {
        throw new Error(`DAS API error: ${data.error.message}`)
      }
      
      return data.result
    }
  }
}

// –ö—ç—à –¥–ª—è NFT –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
const nftCountCache = new Map<string, { count: number, timestamp: number }>()
const CACHE_TTL = 2 * 60 * 1000 // 2 –º–∏–Ω—É—Ç—ã –∫—ç—à –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞

function getCachedNFTCount(wallet: string): number | null {
  const cached = nftCountCache.get(wallet)
  if (cached && Date.now() - cached.timestamp < CACHE_TTL) {
    return cached.count
  }
  nftCountCache.delete(wallet) // –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à
  return null
}

function cacheNFTCount(wallet: string, count: number): void {
  nftCountCache.set(wallet, { count, timestamp: Date.now() })
}

// ‚úÖ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ NFT (–±–µ–∑ –¥–µ—Ç–∞–ª–µ–π)
async function getNFTCountForWallet(workingRpc: any, walletAddress: string): Promise<number> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –ª–∏–º–∏—Ç–æ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è NFT
    const response = await workingRpc.dasRequest('getAssetsByOwner', {
      ownerAddress: walletAddress,
      page: 1,
      limit: 1000 // –ë–æ–ª—å—à–æ–π –ª–∏–º–∏—Ç —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
    })
    
    const total = response?.total || 0
    return total
  } catch (error) {
    console.warn(`[getNFTCountForWallet] –û—à–∏–±–∫–∞ –¥–ª—è ${walletAddress.slice(0,8)}...:`, error)
    return 0
  }
}

// POST - Batch –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ NFT –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∫–æ—à–µ–ª—å–∫–æ–≤
export async function POST(request: NextRequest) {
  const startTime = Date.now()
  
  try {
    const { wallets } = await request.json()
    
    console.log(`[NFT Batch Counts] üöÄ –ó–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ NFT –¥–ª—è ${wallets?.length || 0} –∫–æ—à–µ–ª—å–∫–æ–≤`)

    if (!Array.isArray(wallets) || wallets.length === 0) {
      return NextResponse.json({
        success: true,
        counts: {},
        timing: { total: 0, walletsCount: 0 }
      })
    }

    // ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –ö–≠–® –ü–ï–†–í–´–ú –î–ï–õ–û–ú
    const cached: Record<string, number> = {}
    const missing: string[] = []
    
    for (const wallet of wallets) {
      const cachedCount = getCachedNFTCount(wallet)
      if (cachedCount !== null) {
        cached[wallet] = cachedCount
      } else {
        missing.push(wallet)
      }
    }
    
    console.log(`[NFT Batch Counts] üíæ –ò–∑ –∫—ç—à–∞: ${Object.keys(cached).length}, –∑–∞–≥—Ä—É–∂–∞–µ–º: ${missing.length}`)

    if (missing.length === 0) {
      // –í—Å–µ –≤ –∫—ç—à–µ!
      const totalTime = Date.now() - startTime
      console.log(`[NFT Batch Counts] üéØ –í—Å–µ ${wallets.length} –∫–æ–ª–∏—á–µ—Å—Ç–≤ –∏–∑ –∫—ç—à–∞ –∑–∞ ${totalTime}ms`)
      
      return NextResponse.json({
        success: true,
        counts: cached,
        timing: { total: totalTime, walletsCount: wallets.length, fromCache: true }
      })
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
    const validWallets: string[] = []
    const results: Record<string, number> = { ...cached }

    for (const wallet of missing) {
      if (typeof wallet !== 'string' || !/^[1-9A-HJ-NP-Za-km-z]{32,44}$/.test(wallet)) {
        console.warn(`[NFT Batch Counts] ‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞: ${wallet}`)
        results[wallet] = 0
        continue
      }
      validWallets.push(wallet)
    }

    if (validWallets.length === 0) {
      const totalTime = Date.now() - startTime
      return NextResponse.json({
        success: true,
        counts: results,
        timing: { total: totalTime, walletsCount: 0 }
      })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å RPC
    if (BACKUP_RPC_URLS.length === 0) {
      console.log('[NFT Batch Counts] ‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö RPC endpoints')
      validWallets.forEach(wallet => results[wallet] = 0)
      
      const totalTime = Date.now() - startTime
      return NextResponse.json({
        success: true,
        counts: results,
        timing: { total: totalTime, walletsCount: validWallets.length }
      })
    }

    // –ù–∞—Ö–æ–¥–∏–º —Ä–∞–±–æ—á–∏–π RPC —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π DAS API
    let workingRpc: any = null
    let rpcUsed = 'none'

    for (const rpcUrl of BACKUP_RPC_URLS) {
      try {
        const rpc = createRpcInstance(rpcUrl)
        
        // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ DAS API
        await rpc.dasRequest('getAssetsByOwner', {
          ownerAddress: "11111111111111111111111111111112",
          limit: 1
        })
        
        console.log(`[NFT Batch Counts] ‚úÖ RPC –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç DAS API: ${rpcUrl}`)
        workingRpc = rpc
        rpcUsed = rpcUrl
        break
      } catch (error) {
        console.log(`[NFT Batch Counts] ‚ùå RPC –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç DAS API: ${rpcUrl}`)
        continue
      }
    }

    if (!workingRpc) {
      console.log('[NFT Batch Counts] ‚ö†Ô∏è –ù–∏ –æ–¥–∏–Ω RPC –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç DAS API')
      validWallets.forEach(wallet => results[wallet] = 0)
      
      const totalTime = Date.now() - startTime
      return NextResponse.json({
        success: true,
        counts: results,
        timing: { total: totalTime, walletsCount: validWallets.length }
      })
    }

    // ‚úÖ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø BATCH –û–ë–†–ê–ë–û–¢–ö–ê –¥–ª—è counts (–±—ã—Å—Ç—Ä–µ–µ —á–µ–º –ø–æ–ª–Ω—ã–µ NFT)
    const BATCH_SIZE = 5 // –ë–æ–ª—å—à–∏–π —Ä–∞–∑–º–µ—Ä –¥–ª—è counts (–ª–µ–≥—á–µ —á–µ–º –ø–æ–ª–Ω—ã–µ NFT)
    const batches: string[][] = []
    
    for (let i = 0; i < validWallets.length; i += BATCH_SIZE) {
      batches.push(validWallets.slice(i, i + BATCH_SIZE))
    }

    console.log(`[NFT Batch Counts] üì¶ –†–∞–∑–±–∏—Ç–æ –Ω–∞ ${batches.length} –±–∞—Ç—á–µ–π –ø–æ ‚â§${BATCH_SIZE} –∫–æ—à–µ–ª—å–∫–æ–≤`)

    for (let batchIndex = 0; batchIndex < batches.length; batchIndex++) {
      const batch = batches[batchIndex]
      const batchStart = Date.now()

      console.log(`[NFT Batch Counts] ‚ö° –ó–∞–ø—Ä–æ—Å –±–∞—Ç—á–∞ ${batchIndex + 1}/${batches.length} (${batch.length} –∫–æ—à–µ–ª—å–∫–æ–≤)`)

      // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –±–∞—Ç—á–∞
      const batchPromises = batch.map(async (wallet) => {
        const count = await getNFTCountForWallet(workingRpc, wallet)
        return { wallet, count }
      })

      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å timeout
      const batchResults = await Promise.allSettled(
        batchPromises.map(p => Promise.race([
          p,
          new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout')), 6000))
        ]))
      )

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∞—Ç—á–∞
      batchResults.forEach((result, index) => {
        const wallet = batch[index]
        if (result.status === 'fulfilled') {
          const { count } = result.value as { wallet: string, count: number }
          results[wallet] = count
          
          // ‚úÖ –ö–≠–®–ò–†–£–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢
          cacheNFTCount(wallet, count)
          
          console.log(`[NFT Batch Counts] üí∞ ${wallet.slice(0,8)}... -> ${count} NFT`)
        } else {
          console.warn(`[NFT Batch Counts] ‚ö†Ô∏è –ù–µ—É–¥–∞—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è ${wallet.slice(0,8)}...`)
          results[wallet] = 0
        }
      })

      const batchTime = Date.now() - batchStart
      console.log(`[NFT Batch Counts] ‚úÖ –ë–∞—Ç—á ${batchIndex + 1}/${batches.length} –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ ${batchTime}ms`)

      // –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
      if (batchIndex < batches.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 200))
      }
    }

    const totalTime = Date.now() - startTime
    const totalNFTs = Object.values(results).reduce((sum, count) => sum + count, 0)
    
    console.log(`[NFT Batch Counts] üéâ –ó–ê–í–ï–†–®–ï–ù–û: ${Object.keys(results).length} –∫–æ—à–µ–ª—å–∫–æ–≤, ${totalNFTs} NFT –∑–∞ ${totalTime}ms`)

    return NextResponse.json({
      success: true,
      counts: results,
      totalNFTs,
      timing: { 
        total: totalTime, 
        walletsCount: validWallets.length,
        averagePerWallet: validWallets.length > 0 ? Math.round(totalTime / validWallets.length * 100) / 100 : 0,
        cacheHits: Object.keys(cached).length
      },
      meta: {
        rpcUsed,
        supportsDAS: true,
        cacheSize: nftCountCache.size
      }
    })

  } catch (error: any) {
    const totalTime = Date.now() - startTime
    console.error(`[NFT Batch Counts] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞ ${totalTime}ms:`, error)
    
    return NextResponse.json({
      success: false,
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ NFT',
      counts: {},
      timing: { total: totalTime, walletsCount: 0 }
    }, { status: 500 })
  }
} 