import { NextRequest, NextResponse } from 'next/server'
import { serverCache } from '@/lib/server-cache'
import { signedUrlCache } from '@/lib/signed-url-cache'

export async function GET(request: NextRequest) {
  try {
    const stats = serverCache.getStats()
    const signedUrlStats = signedUrlCache.getStats()
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    let imageStats = null
    try {
      const baseUrl = process.env.NEXT_PUBLIC_APP_URL || (process.env.NODE_ENV === 'development' ? 'http://localhost:3000' : '')
    const imageResponse = await fetch(`${baseUrl}/api/nft-image`, {
        method: 'POST'
      })
      if (imageResponse.ok) {
        const imageData = await imageResponse.json()
        imageStats = imageData.imageCache
      }
    } catch (error) {
      console.error('Error fetching image cache stats:', error)
    }
    
    return NextResponse.json({
      success: true,
      cache: stats,
      signedUrlCache: {
        ...signedUrlStats,
        description: '–ö—ç—à signed URLs –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ Supabase Storage'
      },
      imageCache: imageStats,
      timestamp: new Date().toISOString()
    })
  } catch (error) {
    console.error('[Cache Stats API] Error:', error)
    return NextResponse.json(
      { error: 'Failed to get cache stats' },
      { status: 500 }
    )
  }
}

export async function DELETE(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const pattern = searchParams.get('pattern')
    
    if (pattern) {
      // –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
      const removed = serverCache.invalidate(pattern)
      return NextResponse.json({
        success: true,
        message: `Invalidated ${removed} cache entries`,
        pattern
      })
    } else {
      // –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π
      const removed = serverCache.cleanup()
      return NextResponse.json({
        success: true,
        message: `Cleaned up ${removed} expired entries`
      })
    }
  } catch (error) {
    console.error('[Cache Stats API] Error:', error)
    return NextResponse.json(
      { error: 'Failed to manage cache' },
      { status: 500 }
    )
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { action, type } = body

    switch (action) {
      case 'clear':
        if (type) {
          // –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –∫–µ—à–∞
          const removed = serverCache.invalidate(type)
          console.log(`üßπ –û—á–∏—â–µ–Ω –∫–µ—à —Ç–∏–ø–∞ ${type}: ${removed} –∑–∞–ø–∏—Å–µ–π`)
          return NextResponse.json({
            success: true,
            message: `Cleared ${removed} ${type} cache entries`,
            removed
          })
        } else {
          // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
          const beforeStats = serverCache.getStats()
          serverCache.invalidate('') // –û—á–∏—â–∞–µ—Ç –≤—Å–µ
          const afterStats = serverCache.getStats()
          
          console.log(`üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞: ${beforeStats.totalItems} –∑–∞–ø–∏—Å–µ–π`)
          return NextResponse.json({
            success: true,
            message: `Cleared all cache (${beforeStats.totalItems} entries)`,
            before: beforeStats,
            after: afterStats
          })
        }

      case 'cleanup':
        // –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π
        const cleaned = serverCache.cleanup()
        console.log(`üóëÔ∏è –û—á–∏—â–µ–Ω–æ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π: ${cleaned}`)
        return NextResponse.json({
          success: true,
          message: `Cleaned up ${cleaned} expired entries`,
          cleaned
        })

      case 'gc':
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
        if (global.gc) {
          global.gc()
          console.log(`‚ôªÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞`)
          return NextResponse.json({
            success: true,
            message: 'Garbage collection executed'
          })
        } else {
          return NextResponse.json({
            success: false,
            message: 'Garbage collection not available (run with --expose-gc)'
          })
        }

      case 'warmup':
        // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ–≤ –∫–µ—à–∞ (–±—É–¥—É—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
        return NextResponse.json({
          success: true,
          message: 'Cache warmup started (feature not implemented yet)'
        })

      default:
        return NextResponse.json(
          { error: `Unknown action: ${action}` },
          { status: 400 }
        )
    }
  } catch (error) {
    console.error('[Cache Stats] Error processing action:', error)
    return NextResponse.json(
      { error: 'Failed to process cache action' },
      { status: 500 }
    )
  }
} 