import { NextRequest, NextResponse } from 'next/server'
import { getCachedTokenBalances } from '@/lib/cached-token-balance'
import { getAlchemyKey } from '@/lib/alchemy/solana'
import { supabase } from '@/lib/supabaseClient' // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –∫–ª–∏–µ–Ω—Ç–∞ Supabase
import { serverCache } from '@/lib/server-cache' // –î–û–ë–ê–í–õ–ï–ù–û: –∏–º–ø–æ—Ä—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–º

// --- –¢–∏–ø—ã ---
type DbWallet = { wallet_address: string | null };

// --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
const PECOIN_MINT = "FDT9EMUytSwaP8GKiKdyv59rRAsT7gAB57wHUPm7wY9r";

/**
 * –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –≤—ã–∑–æ–≤–∞ —á–µ—Ä–µ–∑ Vercel Cron Job.
 * –û–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à –±–∞–ª–∞–Ω—Å–æ–≤ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã.
 */
export async function GET(request: NextRequest) {
  const startTime = Date.now()
  const authHeader = request.headers.get('authorization')

  // --- –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å ---
  if (process.env.NODE_ENV === 'production' && authHeader !== `Bearer ${process.env.CRON_SECRET}`) {
    return new Response('Unauthorized', { status: 401 })
  }

  console.log('[CRON] üöÄ –ù–∞—á–∞–ª–æ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤...')

  try {
    // 1. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à –±–∞–ª–∞–Ω—Å–æ–≤
    const invalidatedCount = serverCache.invalidate('token-balance:')
    if (invalidatedCount > 0) {
      console.log(`[CRON] üóëÔ∏è –û—á–∏—â–µ–Ω–æ ${invalidatedCount} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –æ –±–∞–ª–∞–Ω—Å–∞—Ö.`)
    }

    // 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ—à–µ–ª—å–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const wallets = await getAllWallets()
    if (wallets.length === 0) {
      console.log('[CRON] ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.')
      return NextResponse.json({ success: true, message: 'No wallets to refresh.' })
    }
    
    console.log(`[CRON] üè¶ –ù–∞–π–¥–µ–Ω–æ ${wallets.length} –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.`)

    // 3. –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞
    const apiKey = getAlchemyKey()
    const balances = await getCachedTokenBalances(wallets, PECOIN_MINT, apiKey) 
    
    const totalTime = Date.now() - startTime
    console.log(`[CRON] ‚úÖ –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ ${totalTime}ms.`)
    console.log(`[CRON] üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ ${balances.size} –±–∞–ª–∞–Ω—Å–æ–≤.`)

    return NextResponse.json({
      success: true,
      message: `Refreshed ${balances.size} balances in ${totalTime}ms.`,
      refreshedCount: balances.size,
      invalidatedCount,
    })

  } catch (error) {
    const totalTime = Date.now() - startTime
    console.error(`[CRON] ‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞ ${totalTime}ms:`, error)
    return NextResponse.json(
      {
        success: false,
        error: 'Failed to refresh token balances',
        details: error instanceof Error ? error.message : 'Unknown error',
      },
      { status: 500 }
    )
  }
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –∏–∑ –ë–î.
 */
async function getAllWallets(): Promise<string[]> {
  const allWallets = new Set<string>()

  const { data: teams } = await supabase
    .from('teams')
    .select('wallet_address')
    .not('wallet_address', 'is', null)

  const { data: startups } = await supabase
    .from('startups')
    .select('wallet_address')
    .not('wallet_address', 'is', null)
    
  const { data: staff } = await supabase
    .from('staff')
    .select('wallet_address')
    .not('wallet_address', 'is', null)

  teams?.forEach((item: DbWallet) => item.wallet_address && allWallets.add(item.wallet_address))
  startups?.forEach((item: DbWallet) => item.wallet_address && allWallets.add(item.wallet_address))
  staff?.forEach((item: DbWallet) => item.wallet_address && allWallets.add(item.wallet_address))
  
  return Array.from(allWallets)
} 