import { NextRequest, NextResponse } from "next/server"
import { supabase } from "@/lib/supabaseClient"
import { dynamicEcosystemCache } from "@/lib/dynamic-ecosystem-cache"

interface ActivityItem {
  id: string
  time: string
  date: string
  title: string
  description: string
  type: 'team' | 'update' | 'staff' | 'transaction' | 'nft'
}

export async function GET(request: NextRequest) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const [teamsResult, startupsResult, staffResult] = await Promise.all([
      supabase.from("teams").select("id", { count: 'exact' }),
      supabase.from("startups").select("id", { count: 'exact' }),
      supabase.from("staff").select("id", { count: 'exact' })
    ])

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É PEcoins –∏–∑ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫—ç—à–∞
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ –∫—ç—à, –µ—Å–ª–∏ –Ω–µ—Ç - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
    const ecosystemStats = dynamicEcosystemCache.getEcosystemStats()
    
    // –ï—Å–ª–∏ –∫—ç—à –ø—É—Å—Ç–æ–π –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª, –ø—ã—Ç–∞–µ–º—Å—è –µ–≥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
    let finalEcosystemStats = ecosystemStats
    if (ecosystemStats.totalParticipants === 0 || ecosystemStats.cacheAge > 30 * 60 * 1000) {
      try {
        console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã –¥–ª—è –∞–¥–º–∏–Ω –¥–∞—à–±–æ—Ä–¥–∞...')
        await dynamicEcosystemCache.autoInitialize()
        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        finalEcosystemStats = dynamicEcosystemCache.getEcosystemStats()
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—ç—à–∞:', error)
      }
    }
    
    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–µ–¥–∞–≤–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã)
    const [recentTeams, recentStartups, recentStaff] = await Promise.all([
      supabase
        .from("teams")
        .select("id, name, created_at")
        .order('created_at', { ascending: false })
        .limit(3),
      supabase
        .from("startups") 
        .select("id, name, created_at")
        .order('created_at', { ascending: false })
        .limit(3),
      supabase
        .from("staff")
        .select("id, name, created_at")
        .order('created_at', { ascending: false })
        .limit(3)
    ])

    // –ï—Å–ª–∏ –∫—ç—à –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—É–º–º—É –±–∞–ª–∞–Ω—Å–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
    let totalPEcoins = finalEcosystemStats.totalBalance || 0
    
    if (totalPEcoins === 0) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ—à–µ–ª—å–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const [teamsWallets, startupsWallets, staffWallets] = await Promise.all([
          supabase.from("teams").select("wallet_address").not('wallet_address', 'is', null),
          supabase.from("startups").select("wallet_address").not('wallet_address', 'is', null),
          supabase.from("staff").select("wallet_address").not('wallet_address', 'is', null)
        ])
        
        const allWallets = [
          ...(teamsWallets.data?.map(t => t.wallet_address) || []),
          ...(startupsWallets.data?.map(s => s.wallet_address) || []),
          ...(staffWallets.data?.map(st => st.wallet_address) || [])
        ].filter(Boolean)
        
        if (allWallets.length > 0) {
          // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å—ã —á–µ—Ä–µ–∑ API
          const baseUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'
          const balanceResponse = await fetch(`${baseUrl}/api/token-balances`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              wallets: allWallets,
              mint: "FDT9EMUytSwaP8GKiKdyv59rRAsT7gAB57wHUPm7wY9r"
            })
          })
          
          if (balanceResponse.ok) {
            const balanceData = await balanceResponse.json()
            if (balanceData.balances) {
              totalPEcoins = Object.values(balanceData.balances).reduce((sum: number, balance: any) => sum + (balance || 0), 0)
            }
          }
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤:', error)
      }
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ (–ø–æ–∫–∞ —á—Ç–æ 0, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–¥—Å—á–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥)
    const stats = {
      teams: { 
        count: teamsResult.count || 0, 
        change: 0 // TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Å—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥
      },
      startups: { 
        count: startupsResult.count || 0, 
        change: 0 
      },
      staff: { 
        count: staffResult.count || 0, 
        change: 0 
      },
      totalPEcoins: { 
        count: totalPEcoins, 
        change: 0 
      }
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–∞–≤–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const recentActivity: ActivityItem[] = []
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    if (recentTeams.data) {
      recentTeams.data.forEach(team => {
        const createdDate = new Date(team.created_at)
        const isToday = createdDate.toDateString() === new Date().toDateString()
        
        recentActivity.push({
          id: `team-${team.id}`,
          time: isToday ? createdDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' }) : 'Yesterday',
          date: isToday ? 'Today' : createdDate.toLocaleDateString('ru-RU'),
          title: `–ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ "${team.name}"`,
          description: `–ö–æ–º–∞–Ω–¥–∞ "${team.name}" –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —ç–∫–æ—Å–∏—Å—Ç–µ–º—É`,
          type: 'team'
        })
      })
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—Ç–∞—Ä—Ç–∞–ø—ã  
    if (recentStartups.data) {
      recentStartups.data.forEach(startup => {
        const createdDate = new Date(startup.created_at)
        const isToday = createdDate.toDateString() === new Date().toDateString()
        
        recentActivity.push({
          id: `startup-${startup.id}`,
          time: isToday ? createdDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' }) : 'Yesterday',
          date: isToday ? 'Today' : createdDate.toLocaleDateString('ru-RU'),
          title: `–ù–æ–≤—ã–π —Å—Ç–∞—Ä—Ç–∞–ø "${startup.name}"`,
          description: `–°—Ç–∞—Ä—Ç–∞–ø "${startup.name}" –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —ç–∫–æ—Å–∏—Å—Ç–µ–º–µ`,
          type: 'update'
        })
      })
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    if (recentStaff.data) {
      recentStaff.data.forEach(staff => {
        const createdDate = new Date(staff.created_at)
        const isToday = createdDate.toDateString() === new Date().toDateString()
        
        recentActivity.push({
          id: `staff-${staff.id}`,
          time: isToday ? createdDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' }) : 'Yesterday',
          date: isToday ? 'Today' : createdDate.toLocaleDateString('ru-RU'),
          title: `–ù–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ "${staff.name}"`,
          description: `–°–æ—Ç—Ä—É–¥–Ω–∏–∫ "${staff.name}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–∞–Ω–¥—É`,
          type: 'staff'
        })
      })
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    recentActivity.sort((a, b) => {
      if (a.date === 'Today' && b.date !== 'Today') return -1
      if (a.date !== 'Today' && b.date === 'Today') return 1
      
      if (a.date === 'Today' && b.date === 'Today') {
        return b.time.localeCompare(a.time)
      }
      
      return new Date(b.date).getTime() - new Date(a.date).getTime()
    })

    console.log('üìä –ê–¥–º–∏–Ω –¥–∞—à–±–æ—Ä–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', {
      teams: stats.teams.count,
      startups: stats.startups.count, 
      staff: stats.staff.count,
      totalPEcoins,
      ecosystemCacheStats: finalEcosystemStats,
      recentActivityCount: recentActivity.length
    })

    return NextResponse.json({
      success: true,
      stats,
      recentActivity: recentActivity.slice(0, 6) // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –∑–∞–ø–∏—Å–µ–π
    })

  } catch (error) {
    console.error('‚ùå Admin dashboard stats API error:', error)
    return NextResponse.json({
      success: false,
      error: 'Failed to fetch dashboard stats'
    }, { status: 500 })
  }
} 