import { NextRequest, NextResponse } from "next/server"
import { supabase } from "@/lib/supabaseClient"
import { dynamicEcosystemCache } from "@/lib/dynamic-ecosystem-cache"

interface ActivityItem {
  id: string
  time: string
  date: string
  title: string
  description: string
  type: 'team' | 'update' | 'staff' | 'transaction' | 'nft'
}

export async function GET(request: NextRequest) {
  try {
    const url = new URL(request.url)
    const mode = url.searchParams.get('mode') || 'full' // 'fast' –∏–ª–∏ 'full'
    
    // 1. –ë–´–°–¢–†–´–ï –î–ê–ù–ù–´–ï - –≤—Å–µ–≥–¥–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—ã–º–∏ (< 100ms)
    const [teamsResult, startupsResult, staffResult] = await Promise.all([
      supabase.from("teams").select("id", { count: 'exact' }),
      supabase.from("startups").select("id", { count: 'exact' }),
      supabase.from("staff").select("id", { count: 'exact' })
    ])

    const quickStats = {
      teams: { count: teamsResult.count || 0, change: 0 },
      startups: { count: startupsResult.count || 0, change: 0 },
      staff: { count: staffResult.count || 0, change: 0 },
      totalPEcoins: { count: 0, change: 0, loading: true } // –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
    }

    // –ï—Å–ª–∏ –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (mode === 'fast') {
      return NextResponse.json({
        success: true,
        stats: quickStats,
        recentActivity: [],
        mode: 'fast'
      })
    }

    // 2. –ú–ï–î–õ–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï - –±–∞–ª–∞–Ω—Å—ã PEcoin (–º–æ–≥—É—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥)
    let totalPEcoins = 0
    let balanceLoadingTime = 0
    
    try {
      const balanceStartTime = Date.now()
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
      const ecosystemStats = dynamicEcosystemCache.getEcosystemStats()
      
      if (ecosystemStats.totalBalance > 0 && ecosystemStats.cacheAge < 5 * 60 * 1000) {
        // –ö—ç—à —Å–≤–µ–∂–∏–π (< 5 –º–∏–Ω—É—Ç) - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        totalPEcoins = ecosystemStats.totalBalance
        console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã PEcoin')
      } else {
        // –ö—ç—à —É—Å—Ç–∞—Ä–µ–ª - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        console.log('üîÑ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤...')
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ –±–µ–∑ await
        dynamicEcosystemCache.autoInitialize().catch(error => {
          console.error('‚ùå –§–æ–Ω–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞:', error)
        })
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã –Ω–∞–ø—Ä—è–º—É—é —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        try {
          const timeoutPromise = new Promise((_, reject) => 
            setTimeout(() => reject(new Error('Timeout')), 3000) // –º–∞–∫—Å–∏–º—É–º 3 —Å–µ–∫—É–Ω–¥—ã
          )
          
          const balancePromise = (async () => {
            const [teamsWallets, startupsWallets, staffWallets] = await Promise.all([
              supabase.from("teams").select("wallet_address").not('wallet_address', 'is', null),
              supabase.from("startups").select("wallet_address").not('wallet_address', 'is', null),
              supabase.from("staff").select("wallet_address").not('wallet_address', 'is', null)
            ])
            
            const allWallets = [
              ...(teamsWallets.data?.map(t => t.wallet_address) || []),
              ...(startupsWallets.data?.map(s => s.wallet_address) || []),
              ...(staffWallets.data?.map(st => st.wallet_address) || [])
            ].filter(Boolean)
            
            if (allWallets.length > 0) {
              const baseUrl = process.env.NEXT_PUBLIC_APP_URL || (process.env.NODE_ENV === 'development' ? 'http://localhost:3000' : '')
              const balanceResponse = await fetch(`${baseUrl}/api/token-balances`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                  wallets: allWallets,
                  mint: "FDT9EMUytSwaP8GKiKdyv59rRAsT7gAB57wHUPm7wY9r"
                })
              })
              
              if (balanceResponse.ok) {
                const balanceData = await balanceResponse.json()
                if (balanceData.balances) {
                  return Object.values(balanceData.balances).reduce((sum: number, balance: any) => sum + (balance || 0), 0)
                }
              }
            }
            return 0
          })()
          
          totalPEcoins = await Promise.race([balancePromise, timeoutPromise]) as number
          
        } catch (error) {
          console.warn('‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
          totalPEcoins = ecosystemStats.totalBalance || 0
        }
      }
      
      balanceLoadingTime = Date.now() - balanceStartTime
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤:', error)
      totalPEcoins = 0
    }

    // 3. –ê–ö–¢–ò–í–ù–û–°–¢–¨ - —Ç–æ–∂–µ –ø–æ–ª—É—á–∞–µ–º –±—ã—Å—Ç—Ä–æ
    const [recentTeams, recentStartups, recentStaff] = await Promise.all([
      supabase
        .from("teams")
        .select("id, name, created_at")
        .order('created_at', { ascending: false })
        .limit(3),
      supabase
        .from("startups") 
        .select("id, name, created_at")
        .order('created_at', { ascending: false })
        .limit(3),
      supabase
        .from("staff")
        .select("id, name, created_at")
        .order('created_at', { ascending: false })
        .limit(3)
    ])

    const finalStats = {
      ...quickStats,
      totalPEcoins: { 
        count: totalPEcoins, 
        change: 0,
        loading: false
      }
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–∞–≤–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const recentActivity: ActivityItem[] = []
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    if (recentTeams.data) {
      recentTeams.data.forEach(team => {
        const createdDate = new Date(team.created_at)
        const isToday = createdDate.toDateString() === new Date().toDateString()
        
        recentActivity.push({
          id: `team-${team.id}`,
          time: isToday ? createdDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' }) : 'Yesterday',
          date: isToday ? 'Today' : createdDate.toLocaleDateString('ru-RU'),
          title: `–ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ "${team.name}"`,
          description: `–ö–æ–º–∞–Ω–¥–∞ "${team.name}" –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —ç–∫–æ—Å–∏—Å—Ç–µ–º—É`,
          type: 'team'
        })
      })
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—Ç–∞—Ä—Ç–∞–ø—ã  
    if (recentStartups.data) {
      recentStartups.data.forEach(startup => {
        const createdDate = new Date(startup.created_at)
        const isToday = createdDate.toDateString() === new Date().toDateString()
        
        recentActivity.push({
          id: `startup-${startup.id}`,
          time: isToday ? createdDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' }) : 'Yesterday',
          date: isToday ? 'Today' : createdDate.toLocaleDateString('ru-RU'),
          title: `–ù–æ–≤—ã–π —Å—Ç–∞—Ä—Ç–∞–ø "${startup.name}"`,
          description: `–°—Ç–∞—Ä—Ç–∞–ø "${startup.name}" –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —ç–∫–æ—Å–∏—Å—Ç–µ–º–µ`,
          type: 'update'
        })
      })
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    if (recentStaff.data) {
      recentStaff.data.forEach(staff => {
        const createdDate = new Date(staff.created_at)
        const isToday = createdDate.toDateString() === new Date().toDateString()
        
        recentActivity.push({
          id: `staff-${staff.id}`,
          time: isToday ? createdDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' }) : 'Yesterday',
          date: isToday ? 'Today' : createdDate.toLocaleDateString('ru-RU'),
          title: `–ù–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ "${staff.name}"`,
          description: `–°–æ—Ç—Ä—É–¥–Ω–∏–∫ "${staff.name}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–∞–Ω–¥—É`,
          type: 'staff'
        })
      })
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    recentActivity.sort((a, b) => {
      if (a.date === 'Today' && b.date !== 'Today') return -1
      if (a.date !== 'Today' && b.date === 'Today') return 1
      
      if (a.date === 'Today' && b.date === 'Today') {
        return b.time.localeCompare(a.time)
      }
      
      return new Date(b.date).getTime() - new Date(a.date).getTime()
    })

    console.log('üìä –ê–¥–º–∏–Ω –¥–∞—à–±–æ—Ä–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', {
      mode,
      teams: finalStats.teams.count,
      startups: finalStats.startups.count, 
      staff: finalStats.staff.count,
      totalPEcoins,
      balanceLoadingTime: `${balanceLoadingTime}ms`,
      recentActivityCount: recentActivity.length
    })

    return NextResponse.json({
      success: true,
      stats: finalStats,
      recentActivity: recentActivity.slice(0, 6), // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –∑–∞–ø–∏—Å–µ–π
      mode: 'full',
      timing: {
        balanceLoadingTime
      }
    })

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ API –∞–¥–º–∏–Ω –¥–∞—à–±–æ—Ä–¥–∞:", error)
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : "Internal server error" 
      },
      { status: 500 }
    )
  }
} 