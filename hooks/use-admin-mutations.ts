import { useState } from "react"
import { v4 as uuidv4 } from "uuid"
import { uploadEntityLogo, handleExistingLogo } from "@/lib/upload-client"

// –¢–∏–ø—ã –¥–ª—è –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
interface OptimisticUpdate<T> {
  tempId: string
  operation: 'create' | 'update' | 'delete'
  data: T
  originalData?: T
}

// –ö—ç—à –¥–ª—è –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
const optimisticUpdatesCache = new Map<string, OptimisticUpdate<any>[]>()

// –•—É–∫ –¥–ª—è CRUD –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
export function useAdminTeamMutations() {
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)

  const createTeam = async (teamData: any, optimisticCallback?: (teams: any[]) => void) => {
    setIsLoading(true)
    setError(null)
    
    const teamId = uuidv4()
    const optimisticTeam = {
      id: teamId,
      ...teamData,
      achievements: 0,
      balance: 0,
      created_at: new Date().toISOString()
    }

    // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    if (optimisticCallback) {
      optimisticUpdatesCache.set('teams', [{
        tempId: teamId,
        operation: 'create',
        data: optimisticTeam
      }])
      optimisticCallback([optimisticTeam])
    }

    try {
      const { supabase } = await import("@/lib/supabaseClient")
      
      let logoPath: string | null = null

      // ‚úÖ –ù–û–í–ê–Ø —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏
      if (teamData.logo instanceof File) {
        console.log('[Team Mutations] üì§ –ó–∞–≥—Ä—É–∂–∞—é –Ω–æ–≤—ã–π –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è –∫–æ–º–∞–Ω–¥—ã:', teamId)
        const uploadResult = await uploadEntityLogo(teamData.logo, "teams", teamId)
        
        if (!uploadResult.success) {
          throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–∞: ${uploadResult.error}`)
        }
        
        logoPath = uploadResult.logoPath || null
        console.log('[Team Mutations] ‚úÖ –õ–æ–≥–æ—Ç–∏–ø –∑–∞–≥—Ä—É–∂–µ–Ω:', logoPath)
      } else {
        // ‚úÖ FALLBACK –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö URL
        logoPath = handleExistingLogo(teamData.logo)
      }
      
      const insertData: any = {
        id: teamId,
        name: teamData.name,
        wallet_address: teamData.walletAddress,
        description: teamData.description,
        achievements: 0,
        age_range_min: teamData.ageRangeMin,
        age_range_max: teamData.ageRangeMax,
        age_display: teamData.ageDisplay,
      }
      
      if (logoPath) insertData.logo_url = logoPath

      const { error } = await supabase.from("teams").insert([insertData]).select()
      
      if (error) {
        throw new Error(error.message)
      }

      // –£–±–∏—Ä–∞–µ–º –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à
      optimisticUpdatesCache.delete('teams')
      invalidateAdminCache(['admin-teams', 'admin-dashboard-stats'])
      
      return { success: true }
    } catch (err: any) {
      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      optimisticUpdatesCache.delete('teams')
      setError(err.message || "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")
      throw err
    } finally {
      setIsLoading(false)
    }
  }

  const updateTeam = async (id: string, teamData: any, optimisticCallback?: (teams: any[]) => void) => {
    setIsLoading(true)
    setError(null)

    // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    if (optimisticCallback) {
      const updatedTeam = { id, ...teamData }
      const existingUpdates = optimisticUpdatesCache.get('teams') || []
      optimisticUpdatesCache.set('teams', [...existingUpdates, {
        tempId: `update-${id}`,
        operation: 'update',
        data: updatedTeam
      }])
      optimisticCallback([updatedTeam])
    }

    try {
      const { supabase } = await import("@/lib/supabaseClient")
      
      let logoPath: string | null = null

      // ‚úÖ –ù–û–í–ê–Ø —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏
      if (teamData.logo instanceof File) {
        console.log('[Team Mutations] üì§ –û–±–Ω–æ–≤–ª—è—é –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è –∫–æ–º–∞–Ω–¥—ã:', id)
        const uploadResult = await uploadEntityLogo(teamData.logo, "teams", id)
        
        if (!uploadResult.success) {
          throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–∞: ${uploadResult.error}`)
        }
        
        logoPath = uploadResult.logoPath || null
        console.log('[Team Mutations] ‚úÖ –õ–æ–≥–æ—Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω:', logoPath)
      } else {
        // ‚úÖ FALLBACK –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö URL (–Ω–µ –º–µ–Ω—è–µ–º –ª–æ–≥–æ—Ç–∏–ø)
        logoPath = handleExistingLogo(teamData.logo)
      }
      
      const updateData: any = {
        name: teamData.name,
        wallet_address: teamData.walletAddress,
        description: teamData.description,
        age_range_min: teamData.ageRangeMin,
        age_range_max: teamData.ageRangeMax,
        age_display: teamData.ageDisplay,
      }
      
      // ‚úÖ –û–ë–ù–û–í–õ–Ø–ï–ú –ª–æ–≥–æ—Ç–∏–ø —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª
      if (logoPath !== null) {
        updateData.logo_url = logoPath
      }
      
      const { error } = await supabase.from("teams").update(updateData).eq("id", id).select()
      
      if (error) {
        throw new Error(error.message)
      }

      // –£–±–∏—Ä–∞–µ–º –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à
      optimisticUpdatesCache.delete('teams')
      invalidateAdminCache(['admin-teams', 'admin-dashboard-stats'])
      
      return { success: true }
    } catch (err: any) {
      optimisticUpdatesCache.delete('teams')
      setError(err.message || "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")
      throw err
    } finally {
      setIsLoading(false)
    }
  }

  const deleteTeam = async (id: string, optimisticCallback?: (id: string) => void) => {
    setIsLoading(true)
    setError(null)

    // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    if (optimisticCallback) {
      optimisticCallback(id)
    }

    try {
      const { supabase } = await import("@/lib/supabaseClient")
      const { error } = await supabase.from("teams").delete().eq("id", id)
      
      if (error) {
        throw new Error(error.message)
      }

      invalidateAdminCache(['admin-teams', 'admin-dashboard-stats'])
      return { success: true }
    } catch (err: any) {
      setError(err.message || "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")
      throw err
    } finally {
      setIsLoading(false)
    }
  }

  return {
    createTeam,
    updateTeam,
    deleteTeam,
    isLoading,
    error
  }
}

// –•—É–∫ –¥–ª—è CRUD –æ–ø–µ—Ä–∞—Ü–∏–π —Å–æ —Å—Ç–∞—Ä—Ç–∞–ø–∞–º–∏
export function useAdminStartupMutations() {
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)

  const createStartup = async (startupData: any, optimisticCallback?: (startups: any[]) => void) => {
    setIsLoading(true)
    setError(null)
    
    const startupId = uuidv4()
    const optimisticStartup = {
      id: startupId,
      ...startupData,
      achievements: 0,
      balance: 0,
      created_at: new Date().toISOString()
    }

    if (optimisticCallback) {
      optimisticCallback([optimisticStartup])
    }

    try {
      const { supabase } = await import("@/lib/supabaseClient")
      
      let logoPath: string | null = null
      
      // ‚úÖ –ù–û–í–ê–Ø —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏
      if (startupData.logo instanceof File) {
        console.log('[Startup Mutations] üì§ –ó–∞–≥—Ä—É–∂–∞—é –Ω–æ–≤—ã–π –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è —Å—Ç–∞—Ä—Ç–∞–ø–∞:', startupId)
        const uploadResult = await uploadEntityLogo(startupData.logo, "startups", startupId)
        
        if (!uploadResult.success) {
          throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–∞: ${uploadResult.error}`)
        }
        
        logoPath = uploadResult.logoPath || null
        console.log('[Startup Mutations] ‚úÖ –õ–æ–≥–æ—Ç–∏–ø –∑–∞–≥—Ä—É–∂–µ–Ω:', logoPath)
      } else {
        // ‚úÖ FALLBACK –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö URL
        logoPath = handleExistingLogo(startupData.logo)
      }
      
      const insertData: any = {
        id: startupId,
        name: startupData.name,
        wallet_address: startupData.walletAddress,
        description: startupData.description,
        achievements: 0,
        age_range_min: startupData.ageRangeMin,
        age_range_max: startupData.ageRangeMax,
        age_display: startupData.ageDisplay,
      }
      
      if (logoPath) insertData.logo_url = logoPath
      
      const { error } = await supabase.from("startups").insert([insertData]).select()
      
      if (error) {
        throw new Error(error.message)
      }

      invalidateAdminCache(['admin-startups', 'admin-dashboard-stats'])
      return { success: true }
    } catch (err: any) {
      setError(err.message || "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ä—Ç–∞–ø–∞")
      throw err
    } finally {
      setIsLoading(false)
    }
  }

  const updateStartup = async (id: string, startupData: any, optimisticCallback?: (startups: any[]) => void) => {
    setIsLoading(true)
    setError(null)

    if (optimisticCallback) {
      const updatedStartup = { id, ...startupData }
      optimisticCallback([updatedStartup])
    }

    try {
      const { supabase } = await import("@/lib/supabaseClient")
      
      let logoPath: string | null = null

      // ‚úÖ –ù–û–í–ê–Ø —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏
      if (startupData.logo instanceof File) {
        console.log('[Startup Mutations] üì§ –û–±–Ω–æ–≤–ª—è—é –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è —Å—Ç–∞—Ä—Ç–∞–ø–∞:', id)
        const uploadResult = await uploadEntityLogo(startupData.logo, "startups", id)
        
        if (!uploadResult.success) {
          throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–∞: ${uploadResult.error}`)
        }
        
        logoPath = uploadResult.logoPath || null
        console.log('[Startup Mutations] ‚úÖ –õ–æ–≥–æ—Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω:', logoPath)
      } else {
        // ‚úÖ FALLBACK –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö URL (–Ω–µ –º–µ–Ω—è–µ–º –ª–æ–≥–æ—Ç–∏–ø)
        logoPath = handleExistingLogo(startupData.logo)
      }
      
      const updateData: any = {
        name: startupData.name,
        wallet_address: startupData.walletAddress,
        description: startupData.description,
        age_range_min: startupData.ageRangeMin,
        age_range_max: startupData.ageRangeMax,
        age_display: startupData.ageDisplay,
      }
      
      // ‚úÖ –û–ë–ù–û–í–õ–Ø–ï–ú –ª–æ–≥–æ—Ç–∏–ø —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª
      if (logoPath !== null) {
        updateData.logo_url = logoPath
      }
      
      const { error } = await supabase.from("startups").update(updateData).eq("id", id).select()
      
      if (error) {
        throw new Error(error.message)
      }

      invalidateAdminCache(['admin-startups', 'admin-dashboard-stats'])
      return { success: true }
    } catch (err: any) {
      setError(err.message || "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—Ç–∞–ø–∞")
      throw err
    } finally {
      setIsLoading(false)
    }
  }

  const deleteStartup = async (id: string, optimisticCallback?: (id: string) => void) => {
    setIsLoading(true)
    setError(null)

    if (optimisticCallback) {
      optimisticCallback(id)
    }

    try {
      const { supabase } = await import("@/lib/supabaseClient")
      const { error } = await supabase.from("startups").delete().eq("id", id)
      
      if (error) {
        throw new Error(error.message)
      }

      invalidateAdminCache(['admin-startups', 'admin-dashboard-stats'])
      return { success: true }
    } catch (err: any) {
      setError(err.message || "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—Ç–∞–ø–∞")
      throw err
    } finally {
      setIsLoading(false)
    }
  }

  return {
    createStartup,
    updateStartup,
    deleteStartup,
    isLoading,
    error
  }
}

// –•—É–∫ –¥–ª—è CRUD –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
export function useAdminStaffMutations() {
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)

  const createStaff = async (staffData: any, optimisticCallback?: (staff: any[]) => void) => {
    setIsLoading(true)
    setError(null)
    
    const staffId = uuidv4()
    const optimisticStaff = {
      id: staffId,
      ...staffData,
      balance: 0,
      nftCount: 0,
      created_at: new Date().toISOString()
    }

    if (optimisticCallback) {
      optimisticCallback([optimisticStaff])
    }

    try {
      const { supabase } = await import("@/lib/supabaseClient")
      
      let logoPath: string | null = null
      
      // ‚úÖ –ù–û–í–ê–Ø —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏
      if (staffData.logo instanceof File) {
        console.log('[Staff Mutations] üì§ –ó–∞–≥—Ä—É–∂–∞—é –Ω–æ–≤—ã–π –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–æ—Å—Ç–∞–≤–∞:', staffId)
        const uploadResult = await uploadEntityLogo(staffData.logo, "staff", staffId)
        
        if (!uploadResult.success) {
          throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–∞: ${uploadResult.error}`)
        }
        
        logoPath = uploadResult.logoPath || null
        console.log('[Staff Mutations] ‚úÖ –õ–æ–≥–æ—Ç–∏–ø –∑–∞–≥—Ä—É–∂–µ–Ω:', logoPath)
      } else {
        // ‚úÖ FALLBACK –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö URL
        logoPath = handleExistingLogo(staffData.logo)
      }
      
      const insertData: any = {
        id: staffId,
        name: staffData.name,
        wallet_address: staffData.walletAddress,
        description: staffData.description,
      }
      
      if (logoPath) insertData.logo_url = logoPath
      
      const { error } = await supabase.from("staff").insert([insertData]).select()
      
      if (error) {
        throw new Error(error.message)
      }

      invalidateAdminCache(['admin-staff', 'admin-dashboard-stats'])
      return { success: true }
    } catch (err: any) {
      setError(err.message || "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–æ—Å—Ç–∞–≤–∞")
      throw err
    } finally {
      setIsLoading(false)
    }
  }

  const updateStaff = async (id: string, staffData: any, optimisticCallback?: (staff: any[]) => void) => {
    setIsLoading(true)
    setError(null)

    if (optimisticCallback) {
      const updatedStaff = { id, ...staffData }
      optimisticCallback([updatedStaff])
    }

    try {
      const { supabase } = await import("@/lib/supabaseClient")
      
      let logoPath: string | null = null

      // ‚úÖ –ù–û–í–ê–Ø —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏
      if (staffData.logo instanceof File) {
        console.log('[Staff Mutations] üì§ –û–±–Ω–æ–≤–ª—è—é –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–æ—Å—Ç–∞–≤–∞:', id)
        const uploadResult = await uploadEntityLogo(staffData.logo, "staff", id)
        
        if (!uploadResult.success) {
          throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–∞: ${uploadResult.error}`)
        }
        
        logoPath = uploadResult.logoPath || null
        console.log('[Staff Mutations] ‚úÖ –õ–æ–≥–æ—Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω:', logoPath)
      } else {
        // ‚úÖ FALLBACK –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö URL (–Ω–µ –º–µ–Ω—è–µ–º –ª–æ–≥–æ—Ç–∏–ø)
        logoPath = handleExistingLogo(staffData.logo)
      }
      
      const updateData: any = {
        name: staffData.name,
        wallet_address: staffData.walletAddress,
        description: staffData.description,
      }
      
      // ‚úÖ –û–ë–ù–û–í–õ–Ø–ï–ú –ª–æ–≥–æ—Ç–∏–ø —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª
      if (logoPath !== null) {
        updateData.logo_url = logoPath
      }
      
      const { error } = await supabase.from("staff").update(updateData).eq("id", id).select()
      
      if (error) {
        throw new Error(error.message)
      }

      invalidateAdminCache(['admin-staff', 'admin-dashboard-stats'])
      return { success: true }
    } catch (err: any) {
      setError(err.message || "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–æ—Å—Ç–∞–≤–∞")
      throw err
    } finally {
      setIsLoading(false)
    }
  }

  const deleteStaff = async (id: string, optimisticCallback?: (id: string) => void) => {
    setIsLoading(true)
    setError(null)

    if (optimisticCallback) {
      optimisticCallback(id)
    }

    try {
      const { supabase } = await import("@/lib/supabaseClient")
      const { error } = await supabase.from("staff").delete().eq("id", id)
      
      if (error) {
        throw new Error(error.message)
      }

      invalidateAdminCache(['admin-staff', 'admin-dashboard-stats'])
      return { success: true }
    } catch (err: any) {
      setError(err.message || "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–æ—Å—Ç–∞–≤–∞")
      throw err
    } finally {
      setIsLoading(false)
    }
  }

  return {
    createStaff,
    updateStaff,
    deleteStaff,
    isLoading,
    error
  }
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é)
declare global {
  var adminCacheMap: Map<string, { data: any; timestamp: number }> | undefined
}

function invalidateAdminCache(keys: string[]) {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à
  if (typeof globalThis !== 'undefined' && globalThis.adminCacheMap) {
    keys.forEach(key => globalThis.adminCacheMap?.delete(key))
  }
} 