import { useState, useEffect, useCallback } from 'react'
import { supabase } from '@/lib/supabaseClient'
import { signedUrlCache } from '@/lib/signed-url-cache'
import { globalBalanceCache } from '@/hooks/use-dashboard-balances'
import { walletNameResolver } from '@/lib/wallet-name-resolver'

// ‚úÖ –ü–ï–†–ï–ò–°–ü–û–õ–¨–ó–£–ï–ú —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ö—É–∫–∏ –≤–º–µ—Å—Ç–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
import { useHybridNft } from '@/hooks/use-hybrid-nft'

interface EntityDetailData {
  id: string
  name: string
  description: string
  balance: number
  logo: string | null
  walletAddress: string
  achievements?: any
  ageDisplay?: string
  ageRangeMin?: number
  ageRangeMax?: number
  nfts: any[]
  nftCount: number
  transactions: any[]
  transactionsLoading: boolean
  nftsLoading: boolean
}

interface UseEntityDetailOptions {
  entityType: string
  entityId: string
  // ‚úÖ –û–ü–¶–ò–û–ù–ê–õ–¨–ù–û: –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã)
  preloadedNFTCount?: number
  preloadedNFTs?: any[]
}

export function useEntityDetail({ 
  entityType, 
  entityId,
  preloadedNFTCount = 0,
  preloadedNFTs = []
}: UseEntityDetailOptions) {
  const [entity, setEntity] = useState<EntityDetailData | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [nextBeforeSignature, setNextBeforeSignature] = useState<string | undefined>()
  const [nftLoadStarted, setNftLoadStarted] = useState<string | null>(null) // ‚úÖ –§–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ NFT

  // ‚úÖ –ü–ï–†–ï–ò–°–ü–û–õ–¨–ó–£–ï–ú —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ö—É–∫ –¥–ª—è NFT –¥–∞–Ω–Ω—ã—Ö
  const { getWalletNFTs } = useHybridNft()

  const isTeam = entityType === "teams" || entityType === "team"

  // ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∂–∞—Ç–∏—è –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
  const formatAddress = useCallback((address: string): string => {
    if (!address || address.length <= 12) return address
    return `${address.slice(0, 4)}...${address.slice(-4)}`
  }, [])

  // ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–º–µ–Ω–∞–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  const enrichTransactionsWithNames = useCallback(async (transactions: any[]) => {
    console.log(`[useEntityDetail] üë• –û–±–æ–≥–∞—â–∞—é ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–º–µ–Ω–∞–º–∏...`)
    
    const enrichedTransactions = []
    
    for (const tx of transactions) {
      const senderInfo = await walletNameResolver.getNameForWallet(tx.sender)
      const receiverInfo = await walletNameResolver.getNameForWallet(tx.receiver)
      
      enrichedTransactions.push({
        ...tx,
        senderInfo,
        receiverInfo,
        senderName: senderInfo?.name || formatAddress(tx.sender) || 'Unknown',
        receiverName: receiverInfo?.name || formatAddress(tx.receiver) || 'Unknown'
      })
    }
    
    console.log(`[useEntityDetail] ‚úÖ –û–±–æ–≥–∞—â–µ–Ω–æ ${enrichedTransactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–º–µ–Ω–∞–º–∏`)
    return enrichedTransactions
  }, [formatAddress])

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–µ–∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏–∑ globalBalanceCache
  useEffect(() => {
    if (entity?.walletAddress) {
      const newBalance = globalBalanceCache.balances[entity.walletAddress] || 0
      setEntity(prev => prev ? { ...prev, balance: newBalance } : null)
    }
  }, [globalBalanceCache.balances, entity?.walletAddress])

  // ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–∏
  const fetchEntityData = useCallback(async () => {
    if (!entityId) return

    setLoading(true)
    setError(null)

    try {
      // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
      const { data, error: dbError } = isTeam 
        ? await supabase.from("teams").select("*").eq("id", entityId).single()
        : await supabase.from("startups").select("*").eq("id", entityId).single()

      if (dbError || !data) {
        setError("Entity not found")
        return
      }

      // ‚úÖ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–ª–∞–Ω—Å –∏–∑ globalBalanceCache
      const balance = globalBalanceCache.balances[data.wallet_address] || 0
      
      // –ü–æ–ª—É—á–∞–µ–º signed URL –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–∞
      const logo = await signedUrlCache.getSignedUrl(data.logo_url)

      setEntity({
        id: data.id,
        name: data.name,
        description: data.description,
        balance,
        logo,
        walletAddress: data.wallet_address,
        achievements: data.achievements,
        ageDisplay: data.age_display,
        ageRangeMin: data.age_range_min,
        ageRangeMax: data.age_range_max,
        // ‚úÖ –ù–ê–ß–ò–ù–ê–ï–ú —Å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–±—É–¥—É—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
        nfts: preloadedNFTs,
        nftCount: preloadedNFTCount,
        transactions: [],
        transactionsLoading: false,
        nftsLoading: false
      })

      // ‚úÖ –°–ë–†–ê–°–´–í–ê–ï–ú —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ NFT –ø—Ä–∏ —Å–º–µ–Ω–µ entity
      setNftLoadStarted(null)

      console.log(`[useEntityDetail] ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω ${data.name} —Å –±–∞–ª–∞–Ω—Å–æ–º ${balance} PEcoin`)
      
    } catch (err) {
      console.error('[useEntityDetail] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', err)
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö')
    } finally {
      setLoading(false)
    }
  }, [entityId, entityType, isTeam, preloadedNFTCount, preloadedNFTs])

  // ‚úÖ –†–ï–§–ê–ö–¢–û–†–ò–ù–ì: –ò—Å–ø–æ–ª—å–∑—É—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ö—É–∫ –≤–º–µ—Å—Ç–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è fetch –ª–æ–≥–∏–∫–∏
  const loadNFTs = useCallback(async (walletAddress: string, entityName: string) => {
    // ‚úÖ –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∞ –µ—â–µ –Ω–µ –∏–¥–µ—Ç
    setEntity(prev => {
      if (!prev || prev.nftsLoading) {
        console.log(`[useEntityDetail] ‚è∏Ô∏è NFT —É–∂–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –¥–ª—è ${entityName}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`)
        return prev
      }
      return { ...prev, nftsLoading: true }
    })

    try {
      console.log(`[useEntityDetail] üé® –ó–∞–≥—Ä—É–∂–∞—é NFT –¥–ª—è ${entityName}...`)
      
      // ‚úÖ –ü–ï–†–ï–ò–°–ü–û–õ–¨–ó–£–ï–ú —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ö—É–∫ –≤–º–µ—Å—Ç–æ fetch
      const response = await getWalletNFTs(walletAddress)

      if (response.success && response.nfts && Array.isArray(response.nfts)) {
        const nfts = response.nfts.map((nft: any) => ({
          id: nft.mintAddress,
          name: nft.name,
          image: nft.image,
          description: nft.description,
          collection: nft.collection,
          symbol: nft.symbol,
          uri: nft.uri,
          attributes: nft.attributes,
          mintAddress: nft.mintAddress,
          isCompressed: nft.isCompressed,
          treeId: nft.treeId
        }))

        setEntity(prev => prev ? { ...prev, nfts, nftCount: nfts.length, nftsLoading: false } : null)
        console.log(`[useEntityDetail] ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${nfts.length} NFT —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Ö—É–∫`)
      } else {
        setEntity(prev => prev ? { ...prev, nfts: [], nftCount: 0, nftsLoading: false } : null)
        console.log(`[useEntityDetail] ‚ÑπÔ∏è –ù–µ—Ç NFT –¥–ª—è ${entityName}`, response)
      }
    } catch (error) {
      console.error('[useEntityDetail] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ NFT:', error)
      setEntity(prev => prev ? { ...prev, nfts: [], nftsLoading: false } : null)
    }
  }, [getWalletNFTs])

  // ‚úÖ –û–ë–™–ï–î–ò–ù–ï–ù–ù–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (PEcoin + NFT) - –∑–¥–µ—Å—å fetch –æ–ø—Ä–∞–≤–¥–∞–Ω —Ç.–∫. —ç—Ç–æ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞
  const loadTransactions = useCallback(async (beforeSignature?: string) => {
    if (!entity?.walletAddress) return

    setEntity(prev => prev ? { ...prev, transactionsLoading: true } : null)

    try {
      console.log(`[useEntityDetail] üìä –ó–∞–≥—Ä—É–∂–∞—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è ${entity.name}...`)
      
      // ‚úÖ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ PEcoin –∏ NFT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π  
      const [pecoinRes, nftRes] = await Promise.all([
        fetch("/api/pecoin-history", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ 
            walletAddress: entity.walletAddress, 
            limit: 10, 
            beforeSignature 
          })
        }),
        fetch("/api/nft-transactions", {
          method: "POST", 
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ 
            walletAddress: entity.walletAddress, 
            limit: 10 
          })
        })
      ])

      const allTransactions: any[] = []
      let nextSignature: string | undefined

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º PEcoin —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      if (pecoinRes.ok) {
        const pecoinData = await pecoinRes.json()
        const pecoinTxs = (pecoinData.transactions || []).map((tx: any) => ({
          ...tx,
          type: "Token"
        }))
        allTransactions.push(...pecoinTxs)
        nextSignature = pecoinData.nextBeforeSignature
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º NFT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏  
      if (nftRes.ok) {
        const nftData = await nftRes.json()
        const nftTxs = (nftData.transactions || []).map((tx: any) => ({
          ...tx,
          amount: 1,
          nftName: tx.nftName,
          sender: tx.from,
          receiver: tx.to,
          date: tx.date
        }))
        allTransactions.push(...nftTxs)
      }

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
      allTransactions.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())

      // ‚úÖ –û–ë–û–ì–ê–©–ê–ï–ú —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–º–µ–Ω–∞–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      const enrichedTransactions = await enrichTransactionsWithNames(allTransactions)

      setEntity(prev => {
        if (!prev) return null
        
        const newTransactions = beforeSignature 
          ? [...prev.transactions, ...enrichedTransactions]
          : enrichedTransactions

        return { ...prev, transactions: newTransactions }
      })

      setNextBeforeSignature(nextSignature)
      console.log(`[useEntityDetail] ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${enrichedTransactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è ${entity.name}`)

    } catch (error) {
      console.error('[useEntityDetail] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error)
    } finally {
      setEntity(prev => prev ? { ...prev, transactionsLoading: false } : null)
    }
  }, [entity?.walletAddress, entity?.name, enrichTransactionsWithNames])

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    fetchEntityData()
  }, [fetchEntityData])

  // ‚úÖ –û–¢–î–ï–õ–¨–ù–´–ï —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è NFT –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
  useEffect(() => {
    if (entity?.walletAddress && 
        entity.nfts.length === 0 && 
        !entity.nftsLoading && 
        nftLoadStarted !== entity.walletAddress) {
      console.log(`[useEntityDetail] üé® –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞—é NFT –¥–ª—è ${entity.name}`)
      setNftLoadStarted(entity.walletAddress) // ‚úÖ –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞—Ç–∞
      loadNFTs(entity.walletAddress, entity.name)
    }
  }, [entity?.walletAddress, entity?.name, entity?.nftsLoading, nftLoadStarted])

  useEffect(() => {
    if (entity?.walletAddress && entity.transactions.length === 0 && !entity.transactionsLoading) {
      console.log(`[useEntityDetail] üìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è ${entity.name}`)
      loadTransactions()
    }
  }, [entity?.walletAddress, entity?.name, entity?.transactions.length, entity?.transactionsLoading, loadTransactions])

  const loadMoreTransactions = useCallback(() => {
    if (nextBeforeSignature) {
      loadTransactions(nextBeforeSignature)
    }
  }, [nextBeforeSignature, loadTransactions])

  return {
    entity,
    loading,
    error,
    nextBeforeSignature,
    
    // –ú–µ—Ç–æ–¥—ã
    loadMoreTransactions,
    refresh: fetchEntityData
  }
} 