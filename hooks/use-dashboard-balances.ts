import { useState, useEffect, useCallback } from 'react'
import { precomputeATAs } from '@/lib/ata-cache'

interface DashboardBalancesState {
  balances: Record<string, number>
  totalTeamCoins: number
  totalStartupCoins: number  
  totalCoins: number
  isLoading: boolean
  isStale: boolean // –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏ –∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ñ–æ–Ω–µ
  error: string | null
  lastUpdated: number | null
}

interface DashboardBalancesOptions {
  teams: any[]
  startups: any[]
  pecoinMint: string
  autoRefreshInterval?: number // –í –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
}

// ‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –¥–ª—è optimistic UI –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
export const globalBalanceCache = {
  balances: {} as Record<string, number>,
  totalCoins: 0,
  timestamp: 0,
  TTL: 2 * 60 * 1000 // ‚úÖ –£–ú–ï–ù–¨–®–ï–ù–û –¥–æ 2 –º–∏–Ω—É—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –ø–ª–∞–Ω—É –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
}

export function useDashboardBalances(options: DashboardBalancesOptions) {
  const { teams, startups, pecoinMint, autoRefreshInterval = 5 * 60 * 1000 } = options
  
  const [state, setState] = useState<DashboardBalancesState>({
    balances: globalBalanceCache.balances,
    totalTeamCoins: 0,
    totalStartupCoins: 0,
    totalCoins: globalBalanceCache.totalCoins,
    isLoading: false,
    isStale: false,
    error: null,
    lastUpdated: globalBalanceCache.timestamp || null
  })

  // ‚úÖ –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤
  const fetchBalances = useCallback(async (showAsStale = false) => {
    const teamWallets = teams.filter(team => team.wallet_address).map(team => team.wallet_address)
    const startupWallets = startups.filter(startup => startup.wallet_address).map(startup => startup.wallet_address)
    const allWallets = [...new Set([...teamWallets, ...startupWallets])]
    
    if (allWallets.length === 0) {
      setState(prev => ({
        ...prev,
        isLoading: false,
        isStale: false,
        balances: {},
        totalTeamCoins: 0,
        totalStartupCoins: 0,
        totalCoins: 0
      }))
      return
    }
    
    try {
      setState(prev => ({ ...prev, isLoading: !showAsStale, isStale: showAsStale, error: null }))
      
      const startTime = Date.now()
      console.log(`[useDashboardBalances] üöÄ –ó–∞–≥—Ä—É–∂–∞—é –±–∞–ª–∞–Ω—Å—ã –¥–ª—è ${allWallets.length} –∫–æ—à–µ–ª—å–∫–æ–≤${showAsStale ? ' (—Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)' : ''}`)
      
      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–µ–¥–≤—ã—á–∏—Å–ª—è–µ–º ATA –∞–¥—Ä–µ—Å–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
      if (typeof window !== 'undefined') {
        try {
          await precomputeATAs(pecoinMint, allWallets)
        } catch (error) {
          console.warn('[useDashboardBalances] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–∏—è ATA:', error)
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–∏—è ATA
        }
      }
      
      const response = await fetch('/api/token-balances', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          wallets: allWallets,
          mint: pecoinMint 
        }),
      })
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`)
      }
      
      const data = await response.json()
      const balancesData = data.balances || {}
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—ã
      let teamSum = 0
      let startupSum = 0
      
      teams.forEach(team => {
        if (team.wallet_address) {
          const balance = balancesData[team.wallet_address] || 0
          teamSum += balance
        }
      })
      
      startups.forEach(startup => {
        if (startup.wallet_address) {
          const balance = balancesData[startup.wallet_address] || 0
          startupSum += balance
        }
      })
      
      const totalCoins = teamSum + startupSum
      const now = Date.now()
      
      // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à
      globalBalanceCache.balances = balancesData
      globalBalanceCache.totalCoins = totalCoins
      globalBalanceCache.timestamp = now
      
      setState(prev => ({
        ...prev,
        balances: balancesData,
        totalTeamCoins: teamSum,
        totalStartupCoins: startupSum,
        totalCoins,
        isLoading: false,
        isStale: false,
        error: null,
        lastUpdated: now
      }))
      
      const loadTime = Date.now() - startTime
      console.log(`[useDashboardBalances] ‚úÖ –ë–∞–ª–∞–Ω—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∑–∞ ${loadTime}ms: ${totalCoins} PEcoin (–∫–æ–º–∞–Ω–¥—ã: ${teamSum}, —Å—Ç–∞—Ä—Ç–∞–ø—ã: ${startupSum})`)
      
    } catch (error) {
      console.error('[useDashboardBalances] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤:', error)
      setState(prev => ({
        ...prev,
        isLoading: false,
        isStale: false,
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤'
      }))
    }
  }, [teams, startups, pecoinMint])

  // ‚úÖ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (—Ç–æ–ª—å–∫–æ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ)
  useEffect(() => {
    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    if (typeof window === 'undefined') {
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à - –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–≤–µ–∂–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
    const isCacheValid = globalBalanceCache.timestamp && 
      (Date.now() - globalBalanceCache.timestamp) < globalBalanceCache.TTL
    
    if (isCacheValid) {
      console.log(`[useDashboardBalances] üíæ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã (–≤–æ–∑—Ä–∞—Å—Ç: ${Math.round((Date.now() - globalBalanceCache.timestamp) / 1000)}s)`)
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É
      setState(prev => ({
        ...prev,
        balances: globalBalanceCache.balances,
        totalCoins: globalBalanceCache.totalCoins,
        lastUpdated: globalBalanceCache.timestamp,
        isLoading: false
      }))
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Ñ–æ–Ω–µ
      setTimeout(() => {
        fetchBalances(true) // showAsStale = true
      }, 100)
    } else {
      // –ö—ç—à –ø—É—Å—Ç–æ–π –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª - –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ä–∞–∑—É
      fetchBalances(false)
    }
  }, [fetchBalances])

  // ‚úÖ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ)
  useEffect(() => {
    if (typeof window === 'undefined' || !autoRefreshInterval) {
      return
    }
    
    const interval = setInterval(() => {
      console.log(`[useDashboardBalances] üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ —á–µ—Ä–µ–∑ ${autoRefreshInterval}ms`)
      fetchBalances(true) // –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    }, autoRefreshInterval)
    
    return () => clearInterval(interval)
  }, [fetchBalances, autoRefreshInterval])

  // ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const refresh = useCallback(() => {
    fetchBalances(false)
  }, [fetchBalances])

  return {
    ...state,
    refresh
  }
} 