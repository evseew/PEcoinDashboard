// –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ SPL —Ç–æ–∫–µ–Ω–æ–≤
// –ò–∑–±–µ–≥–∞–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ

import { getTokenBalance } from './alchemy/solana'
import { serverCache, ServerCache } from './server-cache'

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–∞
 */
interface TokenBalanceRequest {
  owner: string
  mint: string 
  apiKey: string
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å SPL —Ç–æ–∫–µ–Ω–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */
export async function getCachedTokenBalance({ owner, mint, apiKey }: TokenBalanceRequest): Promise<number> {
  const cacheKey = `token-balance:${owner}:${mint}`
  
  const balance = await serverCache.getOrFetch(
    cacheKey,
    async () => {
      console.log(`[TokenBalance] –ó–∞–≥—Ä—É–∂–∞—é –±–∞–ª–∞–Ω—Å –¥–ª—è ${owner.slice(0, 8)}...`)
      const result = await getTokenBalance(owner, mint, apiKey)
      return result || 0
    },
    'TOKEN_BALANCE'
  )
  
  return balance
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */
export async function getCachedTokenBalances(
  wallets: string[],
  mint: string,
  apiKey: string
): Promise<Map<string, number>> {
  const startTime = Date.now()
  const results = new Map<string, number>()
  
  console.log(`[CachedTokenBalances] üîÑ –ó–∞–ø—Ä–æ—Å ${wallets.length} –±–∞–ª–∞–Ω—Å–æ–≤`)
  
  // Batch —Ä–∞–∑–º–µ—Ä –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è - –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –º–µ–Ω—å—à–µ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limiting
  const BATCH_SIZE = process.env.NODE_ENV === 'production' ? 3 : 8
  const batches = []
  
  for (let i = 0; i < wallets.length; i += BATCH_SIZE) {
    batches.push(wallets.slice(i, i + BATCH_SIZE))
  }
  
  console.log(`[CachedTokenBalances] üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é ${wallets.length} –∫–æ—à–µ–ª—å–∫–æ–≤ –≤ ${batches.length} –±–∞—Ç—á–∞—Ö –ø–æ ${BATCH_SIZE}`)
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—á–∫–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –≤–Ω—É—Ç—Ä–∏ –ø–∞—á–∫–∏ - –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
  for (let batchIndex = 0; batchIndex < batches.length; batchIndex++) {
    const batch = batches[batchIndex]
    const batchStart = Date.now()
    
    console.log(`[CachedTokenBalances] üéØ Batch ${batchIndex + 1}/${batches.length}: ${batch.length} –∫–æ—à–µ–ª—å–∫–æ–≤`)
    
    const batchPromises = batch.map(async (wallet, index) => {
      const walletStart = Date.now()
      try {
        const balance = await getCachedTokenBalance({ owner: wallet, mint, apiKey })
        const walletTime = Date.now() - walletStart
        console.log(`[CachedTokenBalances] üí∞ –ö–æ—à–µ–ª–µ–∫ ${wallet.slice(0,8)}...: ${balance} (${walletTime}ms)`)
        return { wallet, balance }
      } catch (error) {
        const walletTime = Date.now() - walletStart
        console.error(`[CachedTokenBalances] ‚ùå –û—à–∏–±–∫–∞ ${wallet.slice(0,8)}... –∑–∞ ${walletTime}ms:`, error)
        return { wallet, balance: 0 }
      }
    })
    
    const batchResults = await Promise.all(batchPromises)
    const batchTime = Date.now() - batchStart
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–∞—Ä—Ç—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    batchResults.forEach(({ wallet, balance }) => {
      results.set(wallet, balance)
    })
    
    console.log(`[CachedTokenBalances] ‚úÖ Batch ${batchIndex + 1} –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${batchTime}ms`)
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞—á–∫–∞–º–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏ –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –ø–∞—á–∫–∏
    if (process.env.NODE_ENV === 'production' && batchIndex < batches.length - 1) {
      console.log(`[CachedTokenBalances] ‚è∏Ô∏è –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏...`)
      await new Promise(resolve => setTimeout(resolve, 500))
    }
  }
  
  const totalTime = Date.now() - startTime
  console.log(`[CachedTokenBalances] üèÅ –í—Å–µ ${wallets.length} –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—É—á–µ–Ω—ã –∑–∞ ${totalTime}ms`)
  
  return results
}

/**
 * –ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
 */
export function invalidateWalletCache(walletAddress: string): void {
  serverCache.invalidate(`token-balance:owner:${walletAddress}`)
} 