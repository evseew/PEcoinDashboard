// –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ SPL —Ç–æ–∫–µ–Ω–æ–≤
// –ò–∑–±–µ–≥–∞–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ

import { getTokenBalance } from './alchemy/solana'
import { serverCache, ServerCache } from './server-cache'

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–∞
 */
interface TokenBalanceRequest {
  owner: string
  mint: string 
  apiKey: string
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å SPL —Ç–æ–∫–µ–Ω–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */
export async function getCachedTokenBalance({ owner, mint, apiKey }: TokenBalanceRequest): Promise<number> {
  const cacheKey = `token-balance:${owner}:${mint}`
  
  const balance = await serverCache.getOrFetch(
    cacheKey,
    async () => {
      console.log(`[TokenBalance] –ó–∞–≥—Ä—É–∂–∞—é –±–∞–ª–∞–Ω—Å –¥–ª—è ${owner.slice(0, 8)}...`)
      const result = await getTokenBalance(owner, mint, apiKey)
      return result || 0
    },
    'TOKEN_BALANCE'
  )
  
  return balance
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 * –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û –¥–ª—è –≤—ã—Å–æ–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
export async function getCachedTokenBalances(
  wallets: string[],
  mint: string,
  apiKey: string
): Promise<Map<string, number>> {
  const startTime = Date.now()
  const results = new Map<string, number>()
  
  console.log(`[CachedTokenBalances] üöÄ –£–°–ö–û–†–ï–ù–ù–´–ô –∑–∞–ø—Ä–æ—Å ${wallets.length} –±–∞–ª–∞–Ω—Å–æ–≤`)
  
  // –ó–ù–ê–ß–ò–¢–ï–õ–¨–ù–û —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–µ–π –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
  const BATCH_SIZE = process.env.NODE_ENV === 'production' ? 12 : 20 // –ë—ã–ª–æ: 3:8
  const MAX_PARALLEL_BATCHES = process.env.NODE_ENV === 'production' ? 3 : 4 // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–∞—Ç—á–µ–π
  
  const batches = []
  for (let i = 0; i < wallets.length; i += BATCH_SIZE) {
    batches.push(wallets.slice(i, i + BATCH_SIZE))
  }
  
  console.log(`[CachedTokenBalances] ‚ö° –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é ${wallets.length} –∫–æ—à–µ–ª—å–∫–æ–≤ –≤ ${batches.length} –±–∞—Ç—á–∞—Ö –ø–æ ${BATCH_SIZE} (${MAX_PARALLEL_BATCHES} –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)`)
  
  // –ù–û–í–´–ô –ü–û–î–•–û–î: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–∞—Ç—á–µ–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
  for (let i = 0; i < batches.length; i += MAX_PARALLEL_BATCHES) {
    const parallelBatches = batches.slice(i, i + MAX_PARALLEL_BATCHES)
    const batchStart = Date.now()
    
    console.log(`[CachedTokenBalances] üéØ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞ ${Math.floor(i/MAX_PARALLEL_BATCHES) + 1}: ${parallelBatches.length} –±–∞—Ç—á–µ–π`)
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const parallelResults = await Promise.all(
      parallelBatches.map(async (batch, batchIndex) => {
        const actualBatchIndex = i + batchIndex
        console.log(`[CachedTokenBalances] üî• Batch ${actualBatchIndex + 1}/${batches.length}: ${batch.length} –∫–æ—à–µ–ª—å–∫–æ–≤`)
        
        // –í–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–≥–æ –±–∞—Ç—á–∞ —Ç–æ–∂–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        const batchPromises = batch.map(async (wallet) => {
          const walletStart = Date.now()
          try {
            const balance = await getCachedTokenBalance({ owner: wallet, mint, apiKey })
            const walletTime = Date.now() - walletStart
            console.log(`[CachedTokenBalances] üí∞ ${wallet.slice(0,8)}...: ${balance} (${walletTime}ms)`)
            return { wallet, balance }
          } catch (error) {
            const walletTime = Date.now() - walletStart
            console.error(`[CachedTokenBalances] ‚ùå –û—à–∏–±–∫–∞ ${wallet.slice(0,8)}... –∑–∞ ${walletTime}ms:`, error)
            return { wallet, balance: 0 }
          }
        })
        
        return await Promise.all(batchPromises)
      })
    )
    
    // –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –≤—Å–µ—Ö –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –±–∞—Ç—á–µ–π
    parallelResults.flat().forEach(({ wallet, balance }) => {
      results.set(wallet, balance)
    })
    
    const batchTime = Date.now() - batchStart
    console.log(`[CachedTokenBalances] ‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${batchTime}ms`)
    
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ —Ç–æ–ª—å–∫–æ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –±–∞—Ç—á–µ–π (–Ω–µ –º–µ–∂–¥—É –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –±–∞—Ç—á–∞–º–∏)
    if (i + MAX_PARALLEL_BATCHES < batches.length) {
      console.log(`[CachedTokenBalances] ‚è∏Ô∏è –ú–∏–∫—Ä–æ–ø–∞—É–∑–∞ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏...`)
      await new Promise(resolve => setTimeout(resolve, 100)) // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 500–º—Å –¥–æ 100–º—Å
    }
  }
  
  const totalTime = Date.now() - startTime
  console.log(`[CachedTokenBalances] üèÅ –£–°–ö–û–†–ï–ù–û! –í—Å–µ ${wallets.length} –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—É—á–µ–Ω—ã –∑–∞ ${totalTime}ms`)
  
  return results
}

/**
 * –ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
 */
export function invalidateWalletCache(walletAddress: string): void {
  serverCache.invalidate(`token-balance:${walletAddress}`)
} 