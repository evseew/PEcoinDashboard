// –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ SPL —Ç–æ–∫–µ–Ω–æ–≤
// –ü—Ä–æ—Å—Ç–∞—è –∏ –±—ã—Å—Ç—Ä–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ rate limiting

import { getTokenBalance } from './alchemy/solana'
import { serverCache, ServerCache } from './server-cache'

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–∞
 */
interface TokenBalanceRequest {
  owner: string
  mint: string 
  apiKey: string
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å SPL —Ç–æ–∫–µ–Ω–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */
export async function getCachedTokenBalance({ owner, mint, apiKey }: TokenBalanceRequest): Promise<number> {
  const cacheKey = `token-balance:${owner}:${mint}`
  
  const balance = await serverCache.getOrFetch(
    cacheKey,
    async () => {
      console.log(`[TokenBalance] –ó–∞–≥—Ä—É–∂–∞—é –±–∞–ª–∞–Ω—Å –¥–ª—è ${owner.slice(0, 8)}...`)
      const result = await getTokenBalance(owner, mint, apiKey)
      return result || 0
    },
    'TOKEN_BALANCE'
  )
  
  return balance
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 * –ü–†–û–°–¢–ê–Ø –ò –ë–´–°–¢–†–ê–Ø –≤–µ—Ä—Å–∏—è –±–µ–∑ rate limiting
 */
export async function getCachedTokenBalances(
  wallets: string[],
  mint: string,
  apiKey: string
): Promise<Map<string, number>> {
  const startTime = Date.now()
  const results = new Map<string, number>()
  
  console.log(`[CachedTokenBalances] üöÄ –ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è ${wallets.length} –∫–æ—à–µ–ª—å–∫–æ–≤`)
  
  // –ü—Ä–æ—Å—Ç—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ rate limiting
  const promises = wallets.map(async (wallet) => {
    try {
      const balance = await getCachedTokenBalance({ owner: wallet, mint, apiKey })
      console.log(`[CachedTokenBalances] üí∞ ${wallet.slice(0,8)}...: ${balance}`)
      return { wallet, balance }
    } catch (error) {
      console.error(`[CachedTokenBalances] ‚ùå –û—à–∏–±–∫–∞ ${wallet.slice(0,8)}...:`, error)
      return { wallet, balance: 0 }
    }
  })
  
  const allResults = await Promise.all(promises)
  
  // –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  allResults.forEach(({ wallet, balance }) => {
    results.set(wallet, balance)
  })
  
  const totalTime = Date.now() - startTime
  console.log(`[CachedTokenBalances] ‚úÖ –í—Å–µ ${wallets.length} –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—É—á–µ–Ω—ã –∑–∞ ${totalTime}ms`)
  
  return results
}

/**
 * –ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
 */
export function invalidateWalletCache(walletAddress: string): void {
  serverCache.invalidate(`token-balance:${walletAddress}`)
} 