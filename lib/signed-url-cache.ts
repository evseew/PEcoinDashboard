// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è signed URLs –∏–∑ Supabase Storage
import { supabase } from '@/lib/supabaseClient'

interface CachedUrl {
  url: string | null
  timestamp: number
}

class SignedUrlCache {
  private cache = new Map<string, CachedUrl>()
  private readonly TTL = 6 * 60 * 60 * 1000 // 6 —á–∞—Å–æ–≤ (–º–µ–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ signed URL)
  private readonly bucketName = "dashboard.logos"
  private readonly urlExpiry = 60 * 60 * 24 * 7 // 7 –¥–Ω–µ–π –¥–ª—è signed URL

  /**
   * –ü–æ–ª—É—á–∏—Ç—å signed URL —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  async getSignedUrl(storageKey: string | null): Promise<string | null> {
    if (!storageKey) return null
    
    // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –ø–æ–ª–Ω—ã–π URL (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (storageKey.startsWith("http")) {
      return storageKey
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cached = this.cache.get(storageKey)
    if (cached && this.isValidCacheEntry(cached)) {
      return cached.url
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π signed URL
    try {
      const { data, error } = await supabase.storage
        .from(this.bucketName)
        .createSignedUrl(storageKey, this.urlExpiry)
      
      if (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è signed URL –¥–ª—è ${storageKey}:`, error)
        this.cacheResult(storageKey, null)
        return null
      }
      
      const url = data?.signedUrl || null
      this.cacheResult(storageKey, url)
      
      return url
    } catch (error) {
      console.error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è signed URL –¥–ª—è ${storageKey}:`, error)
      this.cacheResult(storageKey, null)
      return null
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –º–∞—Å—Å–∏–≤ signed URLs –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
   */
  async getSignedUrls(storageKeys: (string | null)[]): Promise<(string | null)[]> {
    return Promise.all(
      storageKeys.map(key => this.getSignedUrl(key))
    )
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –≤ –∫—ç—à–µ
   */
  private isValidCacheEntry(cached: CachedUrl): boolean {
    return (Date.now() - cached.timestamp) < this.TTL
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—ç—à–µ
   */
  private cacheResult(storageKey: string, url: string | null): void {
    this.cache.set(storageKey, {
      url,
      timestamp: Date.now()
    })
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ (–º–∞–∫—Å–∏–º—É–º 500 –∑–∞–ø–∏—Å–µ–π)
    if (this.cache.size > 500) {
      this.cleanupOldEntries()
    }
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫—ç—à–∞
   */
  private cleanupOldEntries(): void {
    const now = Date.now()
    const entriesToDelete: string[] = []
    
    for (const [key, cached] of this.cache.entries()) {
      if (!this.isValidCacheEntry(cached)) {
        entriesToDelete.push(key)
      }
    }
    
    // –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    entriesToDelete.forEach(key => this.cache.delete(key))
    
    // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø–∏—Å–µ–π, —É–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ
    if (this.cache.size > 500) {
      const sortedEntries = Array.from(this.cache.entries())
        .sort((a, b) => a[1].timestamp - b[1].timestamp)
      
      const toDelete = sortedEntries.slice(0, 100)
      toDelete.forEach(([key]) => this.cache.delete(key))
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
   */
  getStats(): {
    totalEntries: number
    validEntries: number
    expiredEntries: number
    cacheHitRate: number
  } {
    const now = Date.now()
    let valid = 0
    let expired = 0
    
    for (const cached of this.cache.values()) {
      if (this.isValidCacheEntry(cached)) {
        valid++
      } else {
        expired++
      }
    }
    
    return {
      totalEntries: this.cache.size,
      validEntries: valid,
      expiredEntries: expired,
      cacheHitRate: this.cache.size > 0 ? (valid / this.cache.size) * 100 : 0
    }
  }

  /**
   * –ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ –∫—ç—à–∞
   */
  invalidate(storageKey: string): void {
    this.cache.delete(storageKey)
    console.log(`[SignedUrlCache] üóëÔ∏è –ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω –∫–ª—é—á: ${storageKey}`)
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à
   */
  clear(): void {
    this.cache.clear()
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
export const signedUrlCache = new SignedUrlCache() 