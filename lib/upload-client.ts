// ‚úÖ –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–´–ô –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–æ–≤

interface UploadLogoResult {
  success: boolean
  logoPath?: string
  signedUrl?: string
  fileSize?: number
  fileType?: string
  error?: string
}

// ‚úÖ –î–ï–¢–ï–ö–¢–û–† iPhone/iOS
function isiPhone(): boolean {
  if (typeof window === 'undefined') return false
  
  const userAgent = window.navigator.userAgent
  return /iPhone|iPad|iPod/.test(userAgent) || 
         (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1) // iPad Pro
}

// ‚úÖ –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê –ó–ê–ì–†–£–ó–ö–ò –î–õ–Ø iPhone
async function uploadEntityLogoiPhone(
  file: File,
  entityType: 'staff' | 'teams' | 'startups',
  entityId: string
): Promise<UploadLogoResult> {
  console.log('[iPhone Upload] üì± –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è iPhone')
  
  try {
    // ‚úÖ iPhone-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if (file.size > 3 * 1024 * 1024) { // –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è iPhone
      return {
        success: false,
        error: '–ù–∞ iPhone —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 3MB'
      }
    }

    // ‚úÖ –°–ñ–ê–¢–ò–ï –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è iPhone
    const compressedFile = await compressImageForIPhone(file)
    
    // ‚úÖ –ü–û–î–ì–û–¢–û–í–ö–ê FormData —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –¥–ª—è iPhone
    const formData = new FormData()
    formData.append('file', compressedFile)
    formData.append('entityType', entityType)
    formData.append('entityId', entityId)
    formData.append('source', 'iPhone') // –ú–∞—Ä–∫–µ—Ä –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞

    // ‚úÖ iPhone-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π fetch —Å retry –ª–æ–≥–∏–∫–æ–π
    let lastError: Error | null = null
    const maxRetries = 3
    
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        console.log(`[iPhone Upload] üì§ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries}`)
        
        // ‚úÖ AbortController —Å iPhone-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
        const controller = new AbortController()
        const timeoutId = setTimeout(() => controller.abort(), 30000) // 30 —Å–µ–∫ –¥–ª—è iPhone
        
        const response = await fetch('/api/upload/logo', {
          method: 'POST',
          body: formData,
          signal: controller.signal,
          // ‚úÖ iPhone-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
          headers: {
            'X-Requested-With': 'XMLHttpRequest',
            'X-Device-Type': 'iPhone'
          }
        })
        
        clearTimeout(timeoutId)
        
        const result = await response.json()

        if (!response.ok) {
          throw new Error(result.error || `HTTP ${response.status}: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏`)
        }

        if (!result.success) {
          throw new Error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏')
        }

        console.log('[iPhone Upload] ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Å iPhone:', result.data)
        return {
          success: true,
          logoPath: result.data.logoPath,
          signedUrl: result.data.signedUrl,
          fileSize: result.data.fileSize,
          fileType: result.data.fileType
        }

      } catch (error: any) {
        lastError = error
        console.warn(`[iPhone Upload] ‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ—É–¥–∞—á–Ω–∞:`, error.message)
        
        if (attempt < maxRetries) {
          // ‚úÖ –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
          const delay = Math.pow(2, attempt) * 1000 // 2s, 4s, 8s
          console.log(`[iPhone Upload] ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${delay/1000}—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π`)
          await new Promise(resolve => setTimeout(resolve, delay))
        }
      }
    }
    
    // –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã
    return {
      success: false,
      error: `iPhone: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å–ª–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫. ${lastError?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
    }

  } catch (error: any) {
    console.error('[iPhone Upload] üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
    return {
      success: false,
      error: `iPhone: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - ${error.message || error}`
    }
  }
}

// ‚úÖ –°–ñ–ê–¢–ò–ï –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è iPhone
async function compressImageForIPhone(file: File): Promise<File> {
  return new Promise((resolve) => {
    const canvas = document.createElement('canvas')
    const ctx = canvas.getContext('2d')
    const img = new Image()
    
    img.onload = () => {
      // ‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è iPhone
      const maxWidth = 800
      const maxHeight = 800
      
      let { width, height } = img
      
      // –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
      if (width > height) {
        if (width > maxWidth) {
          height = (height * maxWidth) / width
          width = maxWidth
        }
      } else {
        if (height > maxHeight) {
          width = (width * maxHeight) / height
          height = maxHeight
        }
      }
      
      canvas.width = width
      canvas.height = height
      
      // ‚úÖ –†–∏—Å—É–µ–º —Å–∂–∞—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      ctx?.drawImage(img, 0, 0, width, height)
      
      // ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ blob —Å iPhone-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
      canvas.toBlob(
        (blob) => {
          if (blob) {
            const compressedFile = new File([blob], file.name, {
              type: 'image/jpeg', // –í—Å–µ–≥–¥–∞ JPEG –¥–ª—è iPhone
              lastModified: Date.now()
            })
            console.log('[iPhone Upload] üìê –°–∂–∞—Ç–æ:', {
              original: `${(file.size / 1024).toFixed(1)}KB`,
              compressed: `${(compressedFile.size / 1024).toFixed(1)}KB`,
              ratio: `${((1 - compressedFile.size / file.size) * 100).toFixed(1)}%`
            })
            resolve(compressedFile)
          } else {
            resolve(file) // Fallback –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—É
          }
        },
        'image/jpeg',
        0.8 // 80% –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è iPhone
      )
    }
    
    img.onerror = () => resolve(file) // Fallback –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—É
    img.src = URL.createObjectURL(file)
  })
}

/**
 * ‚úÖ –ï–î–ò–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
 * –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ iPhone-–ª–æ–≥–∏–∫—É –ø—Ä–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏ iOS
 */
export async function uploadEntityLogo(
  file: File,
  entityType: 'staff' | 'teams' | 'startups',
  entityId: string
): Promise<UploadLogoResult> {
  // ‚úÖ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ iPhone-–ª–æ–≥–∏–∫—É
  if (isiPhone()) {
    return uploadEntityLogoiPhone(file, entityType, entityId)
  }
  
  // ‚úÖ –û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)
  try {
    console.log('[Upload Client] üì§ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –ª–æ–≥–æ—Ç–∏–ø–∞:', {
      fileName: file.name,
      fileSize: file.size,
      entityType,
      entityId
    })

    // ‚úÖ –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    if (!file || !entityType || !entityId) {
      return {
        success: false,
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏'
      }
    }

    if (file.size > 5 * 1024 * 1024) {
      return {
        success: false,
        error: '–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB'
      }
    }

    if (!file.type.startsWith('image/')) {
      return {
        success: false,
        error: '–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º'
      }
    }

    // ‚úÖ –ü–û–î–ì–û–¢–û–í–ö–ê FormData
    const formData = new FormData()
    formData.append('file', file)
    formData.append('entityType', entityType)
    formData.append('entityId', entityId)

    // ‚úÖ –û–¢–ü–†–ê–í–ö–ê –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –Ω–æ–≤—ã–π —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API
    const response = await fetch('/api/upload/logo', {
      method: 'POST',
      body: formData,
    })

    const result = await response.json()

    if (!response.ok) {
      console.error('[Upload Client] ‚ùå HTTP –æ—à–∏–±–∫–∞:', response.status, result)
      return {
        success: false,
        error: result.error || `HTTP ${response.status}: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏`
      }
    }

    if (!result.success) {
      console.error('[Upload Client] ‚ùå API –æ—à–∏–±–∫–∞:', result.error)
      return {
        success: false,
        error: result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏'
      }
    }

    console.log('[Upload Client] ‚úÖ –õ–æ–≥–æ—Ç–∏–ø —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω:', result.data)

    return {
      success: true,
      logoPath: result.data.logoPath,
      signedUrl: result.data.signedUrl,
      fileSize: result.data.fileSize,
      fileType: result.data.fileType
    }

  } catch (error: any) {
    console.error('[Upload Client] üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
    return {
      success: false,
      error: `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message || error}`
    }
  }
}

/**
 * ‚úÖ FALLBACK —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö URL
 */
export function handleExistingLogo(logoValue: unknown): string | null {
  if (!logoValue) return null
  
  if (typeof logoValue === 'string') {
    // –£–∂–µ —Å—Ç—Ä–æ–∫–∞ - –≤–æ–∑–º–æ–∂–Ω–æ –ø—É—Ç—å –∏–ª–∏ URL
    return logoValue
  }
  
  // –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø
  console.warn('[Upload Client] ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –ª–æ–≥–æ—Ç–∏–ø–∞:', typeof logoValue)
  return null
} 