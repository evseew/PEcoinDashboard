// ‚úÖ –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–´–ô –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–æ–≤

interface UploadLogoResult {
  success: boolean
  logoPath?: string
  signedUrl?: string
  fileSize?: number
  fileType?: string
  error?: string
}

/**
 * ‚úÖ –ï–î–ò–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
 */
export async function uploadEntityLogo(
  file: File,
  entityType: 'staff' | 'teams' | 'startups',
  entityId: string
): Promise<UploadLogoResult> {
  try {
    console.log('[Upload Client] üì§ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –ª–æ–≥–æ—Ç–∏–ø–∞:', {
      fileName: file.name,
      fileSize: file.size,
      entityType,
      entityId
    })

    // ‚úÖ –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    if (!file || !entityType || !entityId) {
      return {
        success: false,
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏'
      }
    }

    if (file.size > 5 * 1024 * 1024) {
      return {
        success: false,
        error: '–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB'
      }
    }

    if (!file.type.startsWith('image/')) {
      return {
        success: false,
        error: '–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º'
      }
    }

    // ‚úÖ –ü–û–î–ì–û–¢–û–í–ö–ê FormData
    const formData = new FormData()
    formData.append('file', file)
    formData.append('entityType', entityType)
    formData.append('entityId', entityId)

    // ‚úÖ –û–¢–ü–†–ê–í–ö–ê –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –Ω–æ–≤—ã–π —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API
    const response = await fetch('/api/upload/logo', {
      method: 'POST',
      body: formData,
    })

    const result = await response.json()

    if (!response.ok) {
      console.error('[Upload Client] ‚ùå HTTP –æ—à–∏–±–∫–∞:', response.status, result)
      return {
        success: false,
        error: result.error || `HTTP ${response.status}: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏`
      }
    }

    if (!result.success) {
      console.error('[Upload Client] ‚ùå API –æ—à–∏–±–∫–∞:', result.error)
      return {
        success: false,
        error: result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏'
      }
    }

    console.log('[Upload Client] ‚úÖ –õ–æ–≥–æ—Ç–∏–ø —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω:', result.data)

    return {
      success: true,
      logoPath: result.data.logoPath,
      signedUrl: result.data.signedUrl,
      fileSize: result.data.fileSize,
      fileType: result.data.fileType
    }

  } catch (error: any) {
    console.error('[Upload Client] üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
    return {
      success: false,
      error: `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message || error}`
    }
  }
}

/**
 * ‚úÖ FALLBACK —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö URL
 */
export function handleExistingLogo(logoValue: unknown): string | null {
  if (!logoValue) return null
  
  if (typeof logoValue === 'string') {
    // –£–∂–µ —Å—Ç—Ä–æ–∫–∞ - –≤–æ–∑–º–æ–∂–Ω–æ –ø—É—Ç—å –∏–ª–∏ URL
    return logoValue
  }
  
  // –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø
  console.warn('[Upload Client] ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –ª–æ–≥–æ—Ç–∏–ø–∞:', typeof logoValue)
  return null
} 