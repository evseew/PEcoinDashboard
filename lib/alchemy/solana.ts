// –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞ Solana —á–µ—Ä–µ–∑ Alchemy RPC —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
// https://docs.alchemy.com/reference/gettokenmetadata

import { getCachedATA, getBatchCachedATAs } from '@/lib/ata-cache'
import { PublicKey } from '@solana/web3.js'

// –ü—Ä–æ—Å—Ç–æ–π in-memory –∫—ç—à (–Ω–∞ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞)
const tokenMetaCache = new Map<string, { image?: string; uri?: string; ts: number }>()
const CACHE_TTL = 6 * 60 * 60 * 1000 // 6 —á–∞—Å–æ–≤

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞ –∏ URL Alchemy
export function getAlchemyKey() {
  const env = process.env.NEXT_PUBLIC_ALCHEMY_API_KEY || "";
  if (env.startsWith("https://")) {
    return env.split("/").pop() || "";
  }
  return env;
}

export function getAlchemyUrl() {
  const key = getAlchemyKey()
  if (!key) {
    console.warn("[Alchemy] ALCHEMY_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—Ä–æ—Å—ã –∫ Alchemy RPC –±—É–¥—É—Ç –Ω–µ—É–¥–∞—á–Ω—ã–º–∏.")
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL —Å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–ª–Ω–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è, –Ω–æ –∑–∞–ø—Ä–æ—Å—ã –Ω–µ –ø—Ä–æ–π–¥—É—Ç
    return `https://solana-mainnet.g.alchemy.com/v2/demo`
  }
  return `https://solana-mainnet.g.alchemy.com/v2/${key}`
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å SPL —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ - –£–°–ö–û–†–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
 */
export async function getTokenBalance(owner: string, mint: string, apiKey: string): Promise<number> {
  const startTime = Date.now()
  const url = `https://solana-mainnet.g.alchemy.com/v2/${apiKey}`;
  const body = {
    jsonrpc: "2.0",
    id: 1,
    method: "getTokenAccountsByOwner",
    params: [
      owner,
      { mint },
      { encoding: "jsonParsed" }
    ]
  };

  const MAX_RETRIES = 2
  let lastError: Error | null = null

  for (let attempt = 1; attempt <= MAX_RETRIES; attempt++) {
    const attemptStart = Date.now()
    
    try {
      console.log(`[Alchemy] ‚ö° –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—Ä–æ—Å ${attempt}/${MAX_RETRIES} –¥–ª—è ${owner.slice(0,8)}...`)
      
      const controller = new AbortController()
      // ‚úÖ –£–ú–ï–ù–¨–®–ï–ù–û: 3 —Å–µ–∫—É–Ω–¥—ã –≤–º–µ—Å—Ç–æ 5 –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
      const timeoutId = setTimeout(() => controller.abort(), 3000)
      
      const res = await fetch(url, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(body),
        signal: controller.signal
      });
      
      clearTimeout(timeoutId)
      
      if (!res.ok) {
        throw new Error(`HTTP ${res.status}: ${res.statusText}`)
      }
      
      const data = await res.json();
      const attemptTime = Date.now() - attemptStart
      
      if (data.error) {
        console.error(`[Alchemy] ‚ùå API Error –¥–ª—è ${owner.slice(0,8)}... –∑–∞ ${attemptTime}ms:`, data.error);
        throw new Error(`Alchemy API error: ${data.error.message || data.error}`);
      }
      
      const accounts = data.result?.value || [];
      let totalBalance = 0;
      
      for (const account of accounts) {
        const balance = account.account?.data?.parsed?.info?.tokenAmount?.uiAmount || 0;
        totalBalance += balance;
      }
      
      const totalTime = Date.now() - startTime
      console.log(`[Alchemy] ‚úÖ –ë–∞–ª–∞–Ω—Å ${totalBalance} –¥–ª—è ${owner.slice(0,8)}... –∑–∞ ${totalTime}ms (–ø–æ–ø—ã—Ç–∫–∞ ${attempt})`)
      
      return totalBalance;
      
    } catch (error) {
      const attemptTime = Date.now() - attemptStart
      lastError = error instanceof Error ? error : new Error(String(error))
      
      if (error instanceof Error && error.name === 'AbortError') {
        console.warn(`[Alchemy] ‚è∞ Timeout ${attemptTime}ms –¥–ª—è ${owner.slice(0,8)}... (–ø–æ–ø—ã—Ç–∫–∞ ${attempt})`)
      } else {
        console.warn(`[Alchemy] ‚ö†Ô∏è –û—à–∏–±–∫–∞ ${attemptTime}ms –¥–ª—è ${owner.slice(0,8)}... (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}):`, error)
      }
      
      // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É
      if (attempt === MAX_RETRIES) {
        const totalTime = Date.now() - startTime
        console.error(`[Alchemy] ‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è ${owner.slice(0,8)}... –∑–∞ ${totalTime}ms`)
        throw lastError
      }
      
      // ‚úÖ –£–ú–ï–ù–¨–®–ï–ù–ê –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
      await new Promise(resolve => setTimeout(resolve, 150 * attempt)) // –ë—ã–ª–æ: 300 * attempt
    }
  }
  
  // –≠—Ç–æ—Ç –∫–æ–¥ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è, –Ω–æ –¥–ª—è TypeScript
  throw lastError || new Error('Unknown error')
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å SPL —Ç–æ–∫–µ–Ω–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
 */
export async function getSplTokenBalance({
  owner,
  mint
}: {
  owner: string
  mint: string
}): Promise<number> {
  const apiKey = getAlchemyKey()
  return getTokenBalance(owner, mint, apiKey)
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞
 */
export async function getTokenMetadata(mintAddress: string): Promise<{ image?: string; uri?: string } | null> {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cached = tokenMetaCache.get(mintAddress)
    if (cached && (Date.now() - cached.ts) < CACHE_TTL) {
      return { image: cached.image, uri: cached.uri }
    }

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL —Å API –∫–ª—é—á–æ–º
    const apiKey = getAlchemyKey()
    if (!apiKey) {
      console.warn('[TokenMetadata] ‚ö†Ô∏è Alchemy API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
      return null
    }
    
    const url = `https://solana-mainnet.g.alchemy.com/v2/${apiKey}`

    const response = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        jsonrpc: '2.0',
        id: 1,
        method: 'getAsset',  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º getAsset –≤–º–µ—Å—Ç–æ getTokenMetadata
        params: {
          id: mintAddress
        }
      })
    })

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}`)
    }

    const data = await response.json()
    
    if (data.error) {
      console.error('[TokenMetadata] ‚ùå Alchemy API error:', data.error)
      return null
    }

    const metadata = data.result
    const result = {
      image: metadata?.content?.links?.image || metadata?.content?.metadata?.image,
      uri: metadata?.content?.json_uri
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
    if (result.image || result.uri) {
      tokenMetaCache.set(mintAddress, {
        image: result.image,
        uri: result.uri,
        ts: Date.now()
      })
    }

    return result
  } catch (error) {
    console.error('[TokenMetadata] ‚ùå Error fetching token metadata:', error)
    return null
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ SPL token accounts –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ mint (–Ω–∞–ø—Ä–∏–º–µ—Ä, PEcoin)
 */
export async function getUserTokenAccounts({
  owner,
  mint,
  apiKey
}: {
  owner: string;
  mint: string;
  apiKey?: string;
}): Promise<string[]> {
  const key = apiKey ? (apiKey.startsWith("https://") ? apiKey.split("/").pop() : apiKey) : getAlchemyKey();
  if (!key) return [];
  const url = `https://solana-mainnet.g.alchemy.com/v2/${key}`;

  const body = {
    jsonrpc: "2.0",
    id: 1,
    method: "getTokenAccountsByOwner",
    params: [
      owner,
      { mint },
      { encoding: "jsonParsed" }
    ]
  };

  try {
    const res = await fetch(url, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(body),
      signal: AbortSignal.timeout(5000) // 5 —Å–µ–∫—É–Ω–¥ timeout
    });
    const data = await res.json();
    if (data.result && data.result.value && data.result.value.length > 0) {
      return data.result.value.map((acc: any) => acc.pubkey);
    }
    return [];
  } catch (e) {
    return [];
  }
}

/**
 * ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –í—ã—á–∏—Å–ª–µ–Ω–∏–µ Associated Token Account –∞–¥—Ä–µ—Å–∞ –ª–æ–∫–∞–ª—å–Ω–æ
 * –ë–µ–∑ RPC –≤—ã–∑–æ–≤–æ–≤ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ!
 * üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Program ID –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞!
 */
export function getAssociatedTokenAddress(mint: string, owner: string): string {
  try {
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–ø—Ä–µ–¥–µ–ª—è–µ–º Program ID –ø–æ —Ç–∏–ø—É —Ç–æ–∫–µ–Ω–∞
    const SPL_TOKEN_PROGRAM_ID = new PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA')
    const TOKEN_2022_PROGRAM_ID = new PublicKey('TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb')
    const ASSOCIATED_TOKEN_PROGRAM_ID = new PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL')
    
    const mintPubkey = new PublicKey(mint)
    const ownerPubkey = new PublicKey(owner)
    
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: PEcoin –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Token 2022 Program!
    const PECOIN_MINT = 'FDT9EMUytSwaP8GKiKdyv59rRAsT7gAB57wHUPm7wY9r'
    const TOKEN_PROGRAM_ID = (mint === PECOIN_MINT) ? TOKEN_2022_PROGRAM_ID : SPL_TOKEN_PROGRAM_ID
    
    const [associatedToken] = PublicKey.findProgramAddressSync(
      [
        ownerPubkey.toBuffer(),
        TOKEN_PROGRAM_ID.toBuffer(),
        mintPubkey.toBuffer(),
      ],
      ASSOCIATED_TOKEN_PROGRAM_ID
    )
    
    return associatedToken.toBase58()
  } catch (error) {
    console.error(`[ATA] ‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è ATA –¥–ª—è ${owner.slice(0,8)}...:`, error)
    throw error
  }
}

/**
 * ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: Batch –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ —á–µ—Ä–µ–∑ getMultipleAccounts
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤–º–µ—Å—Ç–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö getTokenAccountsByOwner
 */
export async function getMultipleTokenBalances(
  wallets: string[],
  mint: string,
  apiKey: string
): Promise<Map<string, number>> {
  const startTime = Date.now()
  const results = new Map<string, number>()
  
  if (wallets.length === 0) {
    return results
  }
  
  console.log(`[Alchemy Batch] üöÄ Batch –∑–∞–≥—Ä—É–∑–∫–∞ ${wallets.length} –±–∞–ª–∞–Ω—Å–æ–≤ —á–µ—Ä–µ–∑ getMultipleAccounts`)
  
  try {
    // 1. ‚úÖ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ATA –∞–¥—Ä–µ—Å–∞
    console.log(`[Alchemy Batch] üíæ –ü–æ–ª—É—á–∞—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ATA –∞–¥—Ä–µ—Å–∞...`)
    const ataMap = await getBatchCachedATAs(mint, wallets) // wallet -> ata
    const ataAddresses: string[] = Array.from(ataMap.values())
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0 –¥–ª—è –∫–æ—à–µ–ª—å–∫–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏ ATA
    for (const wallet of wallets) {
      if (!ataMap.has(wallet)) {
        results.set(wallet, 0)
      }
    }
    
    if (ataAddresses.length === 0) {
      console.log(`[Alchemy Batch] ‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö ATA –∞–¥—Ä–µ—Å–æ–≤`)
      return results
    }
    
    // 2. –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ chunks –ø–æ 50 –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (—É–º–µ–Ω—å—à–µ–Ω–æ —Å 100 –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞)
    const chunks: string[][] = []
    for (let i = 0; i < ataAddresses.length; i += 50) {
      chunks.push(ataAddresses.slice(i, i + 50))
    }
    
    console.log(`[Alchemy Batch] üì¶ –†–∞–∑–±–∏—Ç–æ –Ω–∞ ${chunks.length} —á–∞–Ω–∫–æ–≤ –ø–æ ‚â§50 –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ—Ç—ã`)
    
    // 3. –î–µ–ª–∞–µ–º batch –∑–∞–ø—Ä–æ—Å—ã getMultipleAccounts
    const url = `https://solana-mainnet.g.alchemy.com/v2/${apiKey}`
    
    for (let chunkIndex = 0; chunkIndex < chunks.length; chunkIndex++) {
      const chunk = chunks[chunkIndex]
      const chunkStart = Date.now()
      
      try {
        console.log(`[Alchemy Batch] ‚ö° –ó–∞–ø—Ä–æ—Å —á–∞–Ω–∫–∞ ${chunkIndex + 1}/${chunks.length} (${chunk.length} –∞–∫–∫–∞—É–Ω—Ç–æ–≤)`)
        
        const controller = new AbortController()
        // ‚úÖ –£–ú–ï–ù–¨–®–ï–ù–û: 7 —Å–µ–∫—É–Ω–¥ –≤–º–µ—Å—Ç–æ 15 –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ batch –æ—Ç–≤–µ—Ç–∞
        const timeoutId = setTimeout(() => controller.abort(), 7000)
        
        const response = await fetch(url, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            jsonrpc: '2.0',
            id: chunkIndex + 1,
            method: 'getMultipleAccounts',
            params: [
              chunk,
              {
                encoding: 'jsonParsed',
                commitment: 'confirmed' // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: confirmed –±—ã—Å—Ç—Ä–µ–µ —á–µ–º finalized
              }
            ]
          }),
          signal: controller.signal
        })
        
        clearTimeout(timeoutId)
        
        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`)
        }
        
        const data = await response.json()
        const chunkTime = Date.now() - chunkStart
        
        if (data.error) {
          console.error(`[Alchemy Batch] ‚ùå RPC Error –¥–ª—è —á–∞–Ω–∫–∞ ${chunkIndex + 1}:`, data.error)
          throw new Error(`RPC error: ${data.error.message || data.error}`)
        }
        
        // 4. –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        const accounts = data.result?.value || []
        console.log(`[Alchemy Batch] üîç –ü–æ–ª—É—á–µ–Ω–æ ${accounts.length} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —á–∞–Ω–∫–µ ${chunkIndex + 1}`)
        
        for (let i = 0; i < chunk.length; i++) {
          const ataAddress = chunk[i]
          const account = accounts[i]
          
          // –ù–∞–π–¥–µ–º wallet –ø–æ ATA –∞–¥—Ä–µ—Å—É
          let wallet: string | undefined
          for (const [w, ata] of ataMap.entries()) {
            if (ata === ataAddress) {
              wallet = w
              break
            }
          }
          
          if (!wallet) {
            console.warn(`[Alchemy Batch] ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω wallet –¥–ª—è ATA ${ataAddress}`)
            continue
          }
          
          if (account === null) {
            // ATA –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç = 0 –±–∞–ª–∞–Ω—Å
            console.log(`[Alchemy Batch] üí∞ ${wallet.slice(0,8)}... -> 0 (ATA –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)`)
            results.set(wallet, 0)
          } else {
            // –ü–∞—Ä—Å–∏–º –±–∞–ª–∞–Ω—Å –∏–∑ jsonParsed –¥–∞–Ω–Ω—ã—Ö
            const balance = account.data?.parsed?.info?.tokenAmount?.uiAmount || 0
            console.log(`[Alchemy Batch] üí∞ ${wallet.slice(0,8)}... -> ${balance} (ATA: ${ataAddress.slice(0,8)}...)`)
            results.set(wallet, balance)
          }
        }
        
        console.log(`[Alchemy Batch] ‚úÖ –ß–∞–Ω–∫ ${chunkIndex + 1}/${chunks.length} –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ ${chunkTime}ms`)
        
      } catch (error) {
        const chunkTime = Date.now() - chunkStart
        console.error(`[Alchemy Batch] ‚ùå –û—à–∏–±–∫–∞ —á–∞–Ω–∫–∞ ${chunkIndex + 1} –∑–∞ ${chunkTime}ms:`, error)
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0 –¥–ª—è –≤—Å–µ—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –≤ —ç—Ç–æ–º —á–∞–Ω–∫–µ
        for (const ataAddress of chunk) {
          for (const [wallet, ata] of ataMap.entries()) {
            if (ata === ataAddress) {
              results.set(wallet, 0)
              break
            }
          }
        }
      }
    }
    
    const totalTime = Date.now() - startTime
    console.log(`[Alchemy Batch] üéâ –ó–ê–í–ï–†–®–ï–ù–û: ${results.size}/${wallets.length} –±–∞–ª–∞–Ω—Å–æ–≤ –∑–∞ ${totalTime}ms`)
    
    return results
    
  } catch (error) {
    const totalTime = Date.now() - startTime
    console.error(`[Alchemy Batch] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞ ${totalTime}ms:`, error)
    
    // Fallback: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0 –¥–ª—è –≤—Å–µ—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
    wallets.forEach(wallet => results.set(wallet, 0))
    return results
  }
} 