// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
// –ü–æ–º–æ–≥–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —É–∑–∫–∏–µ –º–µ—Å—Ç–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å UX

interface PerformanceMetric {
  operation: string
  startTime: number
  endTime?: number
  duration?: number
  metadata?: Record<string, any>
}

class PerformanceMonitor {
  private metrics = new Map<string, PerformanceMetric>()
  private completedMetrics: PerformanceMetric[] = []
  private maxHistory = 100 // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –æ–ø–µ—Ä–∞—Ü–∏–π

  /**
   * ‚úÖ –ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  start(operationId: string, operation: string, metadata?: Record<string, any>): void {
    this.metrics.set(operationId, {
      operation,
      startTime: Date.now(),
      metadata
    })
    
    console.log(`[PerfMonitor] üöÄ –ù–∞—á–∞–ª–æ: ${operation} (${operationId})`)
  }

  /**
   * ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  end(operationId: string, additionalMetadata?: Record<string, any>): number | null {
    const metric = this.metrics.get(operationId)
    if (!metric) {
      console.warn(`[PerfMonitor] ‚ö†Ô∏è –ú–µ—Ç—Ä–∏–∫–∞ ${operationId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`)
      return null
    }

    const endTime = Date.now()
    const duration = endTime - metric.startTime
    
    const completedMetric: PerformanceMetric = {
      ...metric,
      endTime,
      duration,
      metadata: { ...metric.metadata, ...additionalMetadata }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    this.completedMetrics.unshift(completedMetric)
    if (this.completedMetrics.length > this.maxHistory) {
      this.completedMetrics.pop()
    }

    // –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    this.metrics.delete(operationId)

    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const emoji = duration < 1000 ? 'üöÄ' : duration < 3000 ? '‚ö°' : duration < 5000 ? 'üêå' : 'üî•'
    console.log(`[PerfMonitor] ${emoji} –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${metric.operation} –∑–∞ ${duration}ms (${operationId})`)

    return duration
  }

  /**
   * ‚úÖ –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
   */
  async measure<T>(
    operationId: string, 
    operation: string, 
    fn: () => Promise<T>,
    metadata?: Record<string, any>
  ): Promise<T> {
    this.start(operationId, operation, metadata)
    
    try {
      const result = await fn()
      this.end(operationId, { success: true })
      return result
    } catch (error) {
      this.end(operationId, { 
        success: false, 
        error: error instanceof Error ? error.message : String(error) 
      })
      throw error
    }
  }

  /**
   * ‚úÖ –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  getStats() {
    const recentMetrics = this.completedMetrics.slice(0, 20) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20
    
    if (recentMetrics.length === 0) {
      return {
        totalOperations: 0,
        avgDuration: 0,
        minDuration: 0,
        maxDuration: 0,
        recentOperations: []
      }
    }

    const durations = recentMetrics.map(m => m.duration!).filter(d => d !== undefined)
    
    return {
      totalOperations: this.completedMetrics.length,
      avgDuration: Math.round(durations.reduce((sum, d) => sum + d, 0) / durations.length),
      minDuration: Math.min(...durations),
      maxDuration: Math.max(...durations),
      recentOperations: recentMetrics.map(m => ({
        operation: m.operation,
        duration: m.duration,
        timestamp: m.endTime,
        metadata: m.metadata
      }))
    }
  }

  /**
   * ‚úÖ –ü–æ–ª—É—á–∏—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  getSlowOperations(thresholdMs = 3000) {
    return this.completedMetrics
      .filter(m => m.duration && m.duration > thresholdMs)
      .slice(0, 10)
      .map(m => ({
        operation: m.operation,
        duration: m.duration,
        timestamp: m.endTime,
        metadata: m.metadata
      }))
  }

  /**
   * ‚úÖ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
   */
  clear(): void {
    this.completedMetrics = []
    this.metrics.clear()
    console.log('[PerfMonitor] üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞')
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞
export const perfMonitor = new PerformanceMonitor()

// –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
export const measureBalanceLoad = (walletCount: number) => 
  perfMonitor.start(`balance-${Date.now()}`, `–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤`, { walletCount })

export const measureSupabaseQuery = (table: string) => 
  perfMonitor.start(`supabase-${Date.now()}`, `Supabase –∑–∞–ø—Ä–æ—Å: ${table}`)

export const measureATAComputation = (walletCount: number) => 
  perfMonitor.start(`ata-${Date.now()}`, `–í—ã—á–∏—Å–ª–µ–Ω–∏–µ ATA`, { walletCount }) 