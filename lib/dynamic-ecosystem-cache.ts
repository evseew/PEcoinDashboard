// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã PEcoin
// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã entities

import { serverCache } from './server-cache'
import { getBaseUrl } from './get-base-url'

interface DynamicParticipant {
  walletAddress: string
  type: 'team' | 'startup' | 'staff'
  name: string
  id: string
}

interface EcosystemData {
  participants: DynamicParticipant[]
  balances: Map<string, number>
  nfts: Map<string, any[]>
  transactions: Map<string, any[]>
  lastUpdate: number
  lastParticipantsRefresh: number
}

class DynamicEcosystemCache {
  private ecosystemData: EcosystemData = {
    participants: [],
    balances: new Map(),
    nfts: new Map(),
    transactions: new Map(),
    lastUpdate: 0,
    lastParticipantsRefresh: 0
  }
  
  private readonly GLOBAL_REFRESH_INTERVAL = 10 * 60 * 1000 // 10 –º–∏–Ω—É—Ç (–±—ã–ª–æ 5) - —Å–Ω–∏–∂–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ API
  private readonly PARTICIPANTS_REFRESH_INTERVAL = 30 * 60 * 1000 // 30 –º–∏–Ω—É—Ç (—É—á–∞—Å—Ç–Ω–∏–∫–∏ –º–µ–Ω—è—é—Ç—Å—è —Ä–µ–∂–µ)
  private readonly PECOIN_MINT = "FDT9EMUytSwaP8GKiKdyv59rRAsT7gAB57wHUPm7wY9r"
  private refreshTimer?: NodeJS.Timeout
  private participantsTimer?: NodeJS.Timeout

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã (–ü–û–õ–ù–û–°–¢–¨–Æ –û–¢–ö–õ–Æ–ß–ï–ù–û)
   */
  async autoInitialize(): Promise<void> {
    // ‚úÖ –ü–û–õ–ù–û–°–¢–¨–Æ –û–¢–ö–õ–Æ–ß–ï–ù–û –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å PublicDashboard
    console.log('‚ö†Ô∏è DynamicEcosystemCache –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤')
    console.log('üí° –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ PublicDashboard –∏ AdminDashboard')
    return
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  async refreshParticipants(): Promise<void> {
    console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...`)
    
    try {
      const participants: DynamicParticipant[] = []
      
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Supabase –∫–ª–∏–µ–Ω—Ç
      const { supabase } = await import('@/lib/supabaseClient')
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î
      const { data: teams } = await supabase
        .from('teams')
        .select('id, name, wallet_address')
        .not('wallet_address', 'is', null)
      
      if (teams) {
        teams.forEach((team: any) => {
          participants.push({
            walletAddress: team.wallet_address,
            type: 'team',
            name: team.name || `Team ${team.id}`,
            id: team.id
          })
        })
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—Ç–∞–ø—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î
      const { data: startups } = await supabase
        .from('startups')
        .select('id, name, wallet_address')
        .not('wallet_address', 'is', null)
      
      if (startups) {
        startups.forEach((startup: any) => {
          participants.push({
            walletAddress: startup.wallet_address,
            type: 'startup',
            name: startup.name || `Startup ${startup.id}`,
            id: startup.id
          })
        })
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î
      const { data: staff } = await supabase
        .from('staff')
        .select('id, name, wallet_address')
        .not('wallet_address', 'is', null)
      
      if (staff) {
        staff.forEach((member: any) => {
          participants.push({
            walletAddress: member.wallet_address,
            type: 'staff',
            name: member.name || `Staff ${member.id}`,
            id: member.id
          })
        })
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      this.ecosystemData.participants = participants
      this.ecosystemData.lastParticipantsRefresh = Date.now()
      
      const teams_count = participants.filter(p => p.type === 'team').length
      const startups_count = participants.filter(p => p.type === 'startup').length
      const staff_count = participants.filter(p => p.type === 'staff').length
      
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${participants.length} (${teams_count} –∫–æ–º–∞–Ω–¥, ${startups_count} —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤, ${staff_count} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤)`)
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:`, error)
    }
  }

  /**
   * –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–û–¢–ö–õ–Æ–ß–ï–ù–û)
   */
  async refreshAllData(): Promise<void> {
    console.log('‚ö†Ô∏è refreshAllData –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤')
    console.log('üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ PublicDashboard –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö')
    return
  }

  /**
   * Batch-–∑–∞–≥—Ä—É–∑–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–û–¢–ö–õ–Æ–ß–ï–ù–û)
   */
  private async refreshAllBalances(): Promise<void> {
    console.log('‚ö†Ô∏è refreshAllBalances –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å PublicDashboard')
    return
  }

  /**
   * ‚úÖ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø: Batch-–∑–∞–≥—Ä—É–∑–∫–∞ NFT –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º (–û–¢–ö–õ–Æ–ß–ï–ù–û)
   */
  private async refreshAllNFTs(): Promise<void> {
    console.log('‚ö†Ô∏è refreshAllNFTs –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å PublicDashboard')
    return
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–º–≥–Ω–æ–≤–µ–Ω–Ω–æ –∏–∑ –∫—ç—à–∞)
   */
  getParticipantData(walletAddress: string): {
    participant: DynamicParticipant | null
    balance: number
    nfts: any[]
    transactions: any[]
    lastUpdate: number
  } {
    const participant = this.ecosystemData.participants.find(p => p.walletAddress === walletAddress)
    
    return {
      participant: participant || null,
      balance: this.ecosystemData.balances.get(walletAddress) || 0,
      nfts: this.ecosystemData.nfts.get(walletAddress) || [],
      transactions: this.ecosystemData.transactions.get(walletAddress) || [],
      lastUpdate: this.ecosystemData.lastUpdate
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã
   */
  getEcosystemStats(): {
    totalParticipants: number
    teams: number
    startups: number
    staff: number
    totalBalance: number
    totalNFTs: number
    totalTransactions: number
    lastUpdate: number
    lastParticipantsRefresh: number
    cacheAge: number
    participantsAge: number
  } {
    const totalBalance = Array.from(this.ecosystemData.balances.values())
      .reduce((sum, balance) => sum + balance, 0)
    
    const totalNFTs = Array.from(this.ecosystemData.nfts.values())
      .reduce((sum, nfts) => sum + nfts.length, 0)
    
    const totalTransactions = Array.from(this.ecosystemData.transactions.values())
      .reduce((sum, txs) => sum + txs.length, 0)
    
    const teams = this.ecosystemData.participants.filter(p => p.type === 'team').length
    const startups = this.ecosystemData.participants.filter(p => p.type === 'startup').length
    const staff = this.ecosystemData.participants.filter(p => p.type === 'staff').length
    
    return {
      totalParticipants: this.ecosystemData.participants.length,
      teams,
      startups,
      staff,
      totalBalance,
      totalNFTs,
      totalTransactions,
      lastUpdate: this.ecosystemData.lastUpdate,
      lastParticipantsRefresh: this.ecosystemData.lastParticipantsRefresh,
      cacheAge: Date.now() - this.ecosystemData.lastUpdate,
      participantsAge: Date.now() - this.ecosystemData.lastParticipantsRefresh
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
   */
  getAllParticipants(): DynamicParticipant[] {
    return [...this.ecosystemData.participants]
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –° –±–∞–ª–∞–Ω—Å–∞–º–∏ (–¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤)
   */
  getAllParticipantsWithBalances(): Array<DynamicParticipant & { balance: number }> {
    return this.ecosystemData.participants.map(participant => ({
      ...participant,
      balance: this.ecosystemData.balances.get(participant.walletAddress) || 0
    }))
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–û–¢–ö–õ–Æ–ß–ï–ù–û)
   */
  async refreshParticipant(walletAddress: string): Promise<void> {
    console.log('‚ö†Ô∏è refreshParticipant –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤')
    return
  }

  private startPeriodicRefresh(): void {
    console.log('‚ö†Ô∏è –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤')
    return
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
   */
  stopPeriodicRefresh(): void {
    console.log('‚ö†Ô∏è –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã')
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const dynamicEcosystemCache = new DynamicEcosystemCache()

// –¢–∏–ø—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
export type { DynamicParticipant }