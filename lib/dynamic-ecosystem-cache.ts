// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã PEcoin
// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã entities

import { serverCache } from './server-cache'
import { getBaseUrl } from './get-base-url'

interface DynamicParticipant {
  walletAddress: string
  type: 'team' | 'startup' | 'staff'
  name: string
  id: string
}

interface EcosystemData {
  participants: DynamicParticipant[]
  balances: Map<string, number>
  nfts: Map<string, any[]>
  transactions: Map<string, any[]>
  lastUpdate: number
  lastParticipantsRefresh: number
}

class DynamicEcosystemCache {
  private ecosystemData: EcosystemData = {
    participants: [],
    balances: new Map(),
    nfts: new Map(),
    transactions: new Map(),
    lastUpdate: 0,
    lastParticipantsRefresh: 0
  }
  
  private readonly GLOBAL_REFRESH_INTERVAL = 10 * 60 * 1000 // 10 –º–∏–Ω—É—Ç (–±—ã–ª–æ 5) - —Å–Ω–∏–∂–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ API
  private readonly PARTICIPANTS_REFRESH_INTERVAL = 30 * 60 * 1000 // 30 –º–∏–Ω—É—Ç (—É—á–∞—Å—Ç–Ω–∏–∫–∏ –º–µ–Ω—è—é—Ç—Å—è —Ä–µ–∂–µ)
  private readonly PECOIN_MINT = "FDT9EMUytSwaP8GKiKdyv59rRAsT7gAB57wHUPm7wY9r"
  private refreshTimer?: NodeJS.Timeout
  private participantsTimer?: NodeJS.Timeout

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã
   */
  async autoInitialize(): Promise<void> {
    console.log(`üåê –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã`)
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    await this.refreshParticipants()
    
    if (this.ecosystemData.participants.length === 0) {
      console.log(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã`)
      return
    }
    
    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    await this.refreshAllData()
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    this.startPeriodicRefresh()
    
    console.log(`‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è ${this.ecosystemData.participants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`)
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  async refreshParticipants(): Promise<void> {
    console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...`)
    
    try {
      const participants: DynamicParticipant[] = []
      
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Supabase –∫–ª–∏–µ–Ω—Ç
      const { supabase } = await import('@/lib/supabaseClient')
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î
      const { data: teams } = await supabase
        .from('teams')
        .select('id, name, wallet_address')
        .not('wallet_address', 'is', null)
      
      if (teams) {
        teams.forEach((team: any) => {
          participants.push({
            walletAddress: team.wallet_address,
            type: 'team',
            name: team.name || `Team ${team.id}`,
            id: team.id
          })
        })
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—Ç–∞–ø—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î
      const { data: startups } = await supabase
        .from('startups')
        .select('id, name, wallet_address')
        .not('wallet_address', 'is', null)
      
      if (startups) {
        startups.forEach((startup: any) => {
          participants.push({
            walletAddress: startup.wallet_address,
            type: 'startup',
            name: startup.name || `Startup ${startup.id}`,
            id: startup.id
          })
        })
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î
      const { data: staff } = await supabase
        .from('staff')
        .select('id, name, wallet_address')
        .not('wallet_address', 'is', null)
      
      if (staff) {
        staff.forEach((member: any) => {
          participants.push({
            walletAddress: member.wallet_address,
            type: 'staff',
            name: member.name || `Staff ${member.id}`,
            id: member.id
          })
        })
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      this.ecosystemData.participants = participants
      this.ecosystemData.lastParticipantsRefresh = Date.now()
      
      const teams_count = participants.filter(p => p.type === 'team').length
      const startups_count = participants.filter(p => p.type === 'startup').length
      const staff_count = participants.filter(p => p.type === 'staff').length
      
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${participants.length} (${teams_count} –∫–æ–º–∞–Ω–¥, ${startups_count} —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤, ${staff_count} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤)`)
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:`, error)
    }
  }

  /**
   * –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
   */
  async refreshAllData(): Promise<void> {
    const startTime = Date.now()
    console.log(`üîÑ –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã...`)
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      if (Date.now() - this.ecosystemData.lastParticipantsRefresh > this.PARTICIPANTS_REFRESH_INTERVAL) {
        await this.refreshParticipants()
      }
      
      if (this.ecosystemData.participants.length === 0) {
        console.log(`‚ö†Ô∏è –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`)
        return
      }
      
      // 1. –ü–†–ò–û–†–ò–¢–ï–¢: –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–ª–∞–Ω—Å—ã –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ batch-–∑–∞–ø—Ä–æ—Å–æ–º
      await this.refreshAllBalances()
      
      // 2. –ó–∞–≥—Ä—É–∂–∞–µ–º NFT –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      await this.refreshAllNFTs()
      
      // 3. –û–¢–ö–õ–Æ–ß–ï–ù–û: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≥—Ä—É–∑—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
      // await this.refreshAllTransactions() 
      console.log(`‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ (–¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é)`)
      
      this.ecosystemData.lastUpdate = Date.now()
      const totalTime = Date.now() - startTime
      
      console.log(`‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ ${totalTime}ms`)
      console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${this.ecosystemData.balances.size} –±–∞–ª–∞–Ω—Å–æ–≤, ${this.ecosystemData.nfts.size} NFT –∫–æ–ª–ª–µ–∫—Ü–∏–π`)
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:`, error)
    }
  }

  /**
   * Batch-–∑–∞–≥—Ä—É–∑–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
   */
  private async refreshAllBalances(): Promise<void> {
    const wallets = this.ecosystemData.participants.map(p => p.walletAddress)
    const baseUrl = getBaseUrl()
    
    if (wallets.length === 0) return
    
    try {
      const response = await fetch(`${baseUrl}/api/token-balances`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          wallets,
          mint: this.PECOIN_MINT
        })
      })
      
      if (response.ok) {
        const data = await response.json()
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
        Object.entries(data.balances).forEach(([wallet, balance]) => {
          this.ecosystemData.balances.set(wallet, balance as number)
        })
        
        console.log(`‚úÖ Batch-–∑–∞–≥—Ä—É–∂–µ–Ω–æ ${Object.keys(data.balances).length} –±–∞–ª–∞–Ω—Å–æ–≤`)
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤:`, error)
    }
  }

  /**
   * –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ NFT –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
   */
  private async refreshAllNFTs(): Promise<void> {
    if (this.ecosystemData.participants.length === 0) return
    
    const batchSize = 8 // –ú–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    const baseUrl = getBaseUrl()
    
    for (let i = 0; i < this.ecosystemData.participants.length; i += batchSize) {
      const batch = this.ecosystemData.participants.slice(i, i + batchSize)
      
      const promises = batch.map(async (participant) => {
        try {
          const response = await fetch(`${baseUrl}/api/nft-collection`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ walletAddress: participant.walletAddress })
          })
          
          if (response.ok) {
            const data = await response.json()
            this.ecosystemData.nfts.set(participant.walletAddress, data.nfts || [])
            return data.nfts?.length || 0
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ NFT –¥–ª—è ${participant.name}:`, error)
          return 0
        }
      })
      
      const results = await Promise.all(promises)
      const totalNFTs = results.reduce((sum, count) => sum + count, 0)
      console.log(`‚úÖ Batch ${Math.floor(i/batchSize) + 1}: –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${totalNFTs} NFT`)
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
      if (i + batchSize < this.ecosystemData.participants.length) {
        await new Promise(resolve => setTimeout(resolve, 1500))
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–º–≥–Ω–æ–≤–µ–Ω–Ω–æ –∏–∑ –∫—ç—à–∞)
   */
  getParticipantData(walletAddress: string): {
    participant: DynamicParticipant | null
    balance: number
    nfts: any[]
    transactions: any[]
    lastUpdate: number
  } {
    const participant = this.ecosystemData.participants.find(p => p.walletAddress === walletAddress)
    
    return {
      participant: participant || null,
      balance: this.ecosystemData.balances.get(walletAddress) || 0,
      nfts: this.ecosystemData.nfts.get(walletAddress) || [],
      transactions: this.ecosystemData.transactions.get(walletAddress) || [],
      lastUpdate: this.ecosystemData.lastUpdate
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã
   */
  getEcosystemStats(): {
    totalParticipants: number
    teams: number
    startups: number
    staff: number
    totalBalance: number
    totalNFTs: number
    totalTransactions: number
    lastUpdate: number
    lastParticipantsRefresh: number
    cacheAge: number
    participantsAge: number
  } {
    const totalBalance = Array.from(this.ecosystemData.balances.values())
      .reduce((sum, balance) => sum + balance, 0)
    
    const totalNFTs = Array.from(this.ecosystemData.nfts.values())
      .reduce((sum, nfts) => sum + nfts.length, 0)
    
    const totalTransactions = Array.from(this.ecosystemData.transactions.values())
      .reduce((sum, txs) => sum + txs.length, 0)
    
    const teams = this.ecosystemData.participants.filter(p => p.type === 'team').length
    const startups = this.ecosystemData.participants.filter(p => p.type === 'startup').length
    const staff = this.ecosystemData.participants.filter(p => p.type === 'staff').length
    
    return {
      totalParticipants: this.ecosystemData.participants.length,
      teams,
      startups,
      staff,
      totalBalance,
      totalNFTs,
      totalTransactions,
      lastUpdate: this.ecosystemData.lastUpdate,
      lastParticipantsRefresh: this.ecosystemData.lastParticipantsRefresh,
      cacheAge: Date.now() - this.ecosystemData.lastUpdate,
      participantsAge: Date.now() - this.ecosystemData.lastParticipantsRefresh
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
   */
  getAllParticipants(): DynamicParticipant[] {
    return [...this.ecosystemData.participants]
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –° –±–∞–ª–∞–Ω—Å–∞–º–∏ (–¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤)
   */
  getAllParticipantsWithBalances(): Array<DynamicParticipant & { balance: number }> {
    return this.ecosystemData.participants.map(participant => ({
      ...participant,
      balance: this.ecosystemData.balances.get(participant.walletAddress) || 0
    }))
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
   */
  async refreshParticipant(walletAddress: string): Promise<void> {
    const participant = this.ecosystemData.participants.find(p => p.walletAddress === walletAddress)
    if (!participant) {
      console.log(`‚ö†Ô∏è –£—á–∞—Å—Ç–Ω–∏–∫ ${walletAddress} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —ç–∫–æ—Å–∏—Å—Ç–µ–º–µ`)
      return
    }

    console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞: ${participant.name}`)
    
    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
    await Promise.all([
      this.refreshParticipantBalance(walletAddress),
      this.refreshParticipantNFTs(walletAddress),
      this.refreshParticipantTransactions(walletAddress)
    ])
  }

  private async refreshParticipantBalance(walletAddress: string): Promise<void> {
    serverCache.invalidate(`token-balance:owner:${walletAddress}`)
    await this.refreshAllBalances()
  }

  private async refreshParticipantNFTs(walletAddress: string): Promise<void> {
    serverCache.invalidate(`nft-collection:wallet:${walletAddress}`)
    
    const baseUrl = getBaseUrl()
    try {
      const response = await fetch(`${baseUrl}/api/nft-collection`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ walletAddress })
      })
      
      if (response.ok) {
        const data = await response.json()
        this.ecosystemData.nfts.set(walletAddress, data.nfts || [])
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è NFT –¥–ª—è ${walletAddress}:`, error)
    }
  }

  private async refreshParticipantTransactions(walletAddress: string): Promise<void> {
    serverCache.invalidate(`tx-history:${walletAddress}`)
    
    const baseUrl = getBaseUrl()
    try {
      const response = await fetch(`${baseUrl}/api/pecoin-history`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ walletAddress, limit: 10 })
      })
      
      if (response.ok) {
        const data = await response.json()
        this.ecosystemData.transactions.set(walletAddress, data.transactions || [])
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è ${walletAddress}:`, error)
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–û–¢–ö–õ–Æ–ß–ï–ù–û –¥–ª—è production –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏)
   */
  private startPeriodicRefresh(): void {
    // –û–¢–ö–õ–Æ–ß–ï–ù–û –¥–ª—è production - —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ API
    if (process.env.NODE_ENV === 'production') {
      console.log('‚ö†Ô∏è –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è production (—Å–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ API)')
      return
    }
    
    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–π–º–µ—Ä–æ–≤
    if (this.refreshTimer) clearInterval(this.refreshTimer)
    if (this.participantsTimer) clearInterval(this.participantsTimer)
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è development)
    this.refreshTimer = setInterval(() => {
      console.log(`‚è∞ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã`)
      this.refreshAllData()
    }, this.GLOBAL_REFRESH_INTERVAL)
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è development)
    this.participantsTimer = setInterval(() => {
      console.log(`‚è∞ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`)
      this.refreshParticipants()
    }, this.PARTICIPANTS_REFRESH_INTERVAL)
    
    console.log('‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω—ã (development —Ä–µ–∂–∏–º)')
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
   */
  stopPeriodicRefresh(): void {
    if (this.refreshTimer) {
      clearInterval(this.refreshTimer)
      this.refreshTimer = undefined
    }
    if (this.participantsTimer) {
      clearInterval(this.participantsTimer)
      this.participantsTimer = undefined
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é (—Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞)
   */
  async loadParticipantTransactionsOnDemand(walletAddress: string): Promise<any[]> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Å–Ω–∞—á–∞–ª–∞
    const cached = this.ecosystemData.transactions.get(walletAddress)
    if (cached && cached.length > 0) {
      console.log(`üéØ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è ${walletAddress} —É–∂–µ –≤ –∫—ç—à–µ`)
      return cached
    }
    
    console.log(`üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è ${walletAddress} –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é`)
    await this.refreshParticipantTransactions(walletAddress)
    return this.ecosystemData.transactions.get(walletAddress) || []
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const dynamicEcosystemCache = new DynamicEcosystemCache()

// –¢–∏–ø—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
export type { DynamicParticipant } 