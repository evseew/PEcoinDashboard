// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è API endpoints
// –ò–∑–±–µ–≥–∞–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ

interface CacheItem<T> {
  data: T
  timestamp: number
  ttl: number
  accessCount: number
  lastAccess: number
}

class ServerCache {
  private cache = new Map<string, CacheItem<any>>()
  private pendingRequests = new Map<string, Promise<any>>()

  // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
  // ‚úÖ –§–ò–ù–ê–õ–¨–ù–û –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û –¥–ª—è –ª—É—á—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏
  private readonly TTL_CONFIG = {
    NFT_COLLECTION: 10 * 60 * 1000,    // 10 –º–∏–Ω—É—Ç - NFT –º–µ–Ω—è—é—Ç—Å—è —Ä–µ–¥–∫–æ
    TOKEN_BALANCE: 2 * 60 * 1000,      // ‚úÖ –£–ú–ï–ù–¨–®–ï–ù–û: 2 –º–∏–Ω—É—Ç—ã –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–æ–≤
    NFT_METADATA: 30 * 60 * 1000,      // 30 –º–∏–Ω—É—Ç - –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–µ–∏–∑–º–µ–Ω–Ω—ã
    WALLET_INFO: 3 * 60 * 1000,        // ‚úÖ –£–ú–ï–ù–¨–®–ï–ù–û: 3 –º–∏–Ω—É—Ç—ã - –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–∞
    TRANSACTION_HISTORY: 2 * 60 * 1000, // 2 –º–∏–Ω—É—Ç—ã - –∏—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    TRANSACTION_HISTORY_EMPTY: 60 * 1000, // 1 –º–∏–Ω—É—Ç–∞ - –ø—É—Å—Ç–∞—è –∏—Å—Ç–æ—Ä–∏—è
    NFT_TRANSACTIONS: 90 * 1000,       // ‚úÖ –£–ú–ï–ù–¨–®–ï–ù–û: 90 —Å–µ–∫—É–Ω–¥ - NFT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —Å–≤–µ–∂–µ—Å—Ç–∏
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ, –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞)
   */
  get(key: string): any | null {
    const now = Date.now()
    const cached = this.cache.get(key)
    
    if (cached && (now - cached.timestamp) < cached.ttl) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç—É–ø–∞
      cached.accessCount++
      cached.lastAccess = now
      return cached.data
    }
    
    return null
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à –Ω–∞–ø—Ä—è–º—É—é
   */
  set<T>(
    key: string, 
    data: T, 
    cacheType: keyof typeof this.TTL_CONFIG = 'NFT_COLLECTION'
  ): void {
    const ttl = this.TTL_CONFIG[cacheType]
    const now = Date.now()
    
    this.cache.set(key, {
      data,
      timestamp: now,
      ttl,
      accessCount: 1,
      lastAccess: now
    })
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å
   */
  async getOrFetch<T>(
    key: string,
    fetcher: () => Promise<T>,
    cacheType: keyof typeof this.TTL_CONFIG = 'NFT_COLLECTION'
  ): Promise<T> {
    const now = Date.now()
    const ttl = this.TTL_CONFIG[cacheType]
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cached = this.cache.get(key)
    if (cached && (now - cached.timestamp) < cached.ttl) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç—É–ø–∞
      cached.accessCount++
      cached.lastAccess = now
      const age = Math.round((now - cached.timestamp) / 1000)
      console.log(`üéØ Cache HIT: ${key.slice(0,50)}... (–≤–æ–∑—Ä–∞—Å—Ç: ${age}s, –æ–±—Ä–∞—â–µ–Ω–∏–π: ${cached.accessCount})`)
      return cached.data
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è—é—â–µ–≥–æ—Å—è –∑–∞–ø—Ä–æ—Å–∞
    const pending = this.pendingRequests.get(key)
    if (pending) {
      console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è—é—â–µ–≥–æ—Å—è –∑–∞–ø—Ä–æ—Å–∞: ${key.slice(0,50)}...`)
      return await pending
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    const cacheAge = cached ? Math.round((now - cached.timestamp) / 1000) : 0
    console.log(`üîÑ Cache MISS: ${key.slice(0,50)}... ${cached ? `(—É—Å—Ç–∞—Ä–µ–ª –Ω–∞ ${cacheAge}s)` : '(–Ω–æ–≤—ã–π –∫–ª—é—á)'} - –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ`)
    const fetchPromise = this.executeFetch(key, fetcher, ttl)
    this.pendingRequests.set(key, fetchPromise)

    try {
      const result = await fetchPromise
      return result
    } finally {
      this.pendingRequests.delete(key)
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∫—ç—à
   */
  private async executeFetch<T>(key: string, fetcher: () => Promise<T>, ttl: number): Promise<T> {
    try {
      const data = await fetcher()
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      this.cache.set(key, {
        data,
        timestamp: Date.now(),
        ttl,
        accessCount: 1,
        lastAccess: Date.now()
      })

      return data
    } catch (error) {
      console.error(`‚ùå Error fetching data for key ${key.slice(0,50)}...:`, error)
      throw error
    }
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ –∫—ç—à–∞
   */
  invalidate(keyPattern: string): number {
    let removed = 0
    for (const key of this.cache.keys()) {
      if (key.includes(keyPattern)) {
        this.cache.delete(key)
        removed++
      }
    }
    if (removed > 0) {
      console.log(`üóëÔ∏è Invalidated ${removed} cache entries matching: ${keyPattern}`)
    }
    return removed
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏
   */
  cleanup(): number {
    const now = Date.now()
    let removed = 0
    
    for (const [key, item] of this.cache.entries()) {
      if ((now - item.timestamp) > item.ttl) {
        this.cache.delete(key)
        removed++
      }
    }
    
    if (removed > 0) {
      console.log(`üßπ Cleaned up ${removed} expired cache entries`)
    }
    return removed
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
   */
  getStats() {
    const now = Date.now()
    const items = Array.from(this.cache.values())
    
    return {
      totalItems: items.length,
      totalAccesses: items.reduce((sum, item) => sum + item.accessCount, 0),
      avgAge: items.length > 0 
        ? Math.round(items.reduce((sum, item) => sum + (now - item.timestamp), 0) / items.length / 1000) 
        : 0,
      pendingRequests: this.pendingRequests.size
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –∫–ª—é—á –¥–ª—è –∫—ç—à–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
   */
  static createKey(prefix: string, params: Record<string, any>): string {
    const sortedParams = Object.keys(params)
      .sort()
      .map(key => `${key}:${params[key]}`)
      .join('|')
    return `${prefix}:${sortedParams}`
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à–∞
const serverCache = new ServerCache()

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
if (typeof setInterval !== 'undefined') {
  setInterval(() => {
    serverCache.cleanup()
  }, 5 * 60 * 1000)
}

/**
 * ‚úÖ –ù–û–í–û–ï: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ batch NFT —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 */
export function cacheBatchNFTResults(wallets: string[], results: Record<string, any>): void {
  try {
    // –ö—ç—à–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    Object.entries(results).forEach(([wallet, result]) => {
      if (result.success && result.nfts) {
        const cacheKey = `wallet:${wallet}`
        
        serverCache.set(cacheKey, result, 'NFT_COLLECTION')
      }
    })
    
    // –ö—ç—à–∏—Ä—É–µ–º —Ç–∞–∫–∂–µ –≤–µ—Å—å batch —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª—é—á)
    const batchKey = `batch:${wallets.sort().join(',')}`
    serverCache.set(batchKey, results, 'NFT_COLLECTION')
    
    console.log(`[ServerCache] üíæ –ö—ç—à–∏—Ä–æ–≤–∞–Ω batch NFT —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è ${Object.keys(results).length} –∫–æ—à–µ–ª—å–∫–æ–≤`)
  } catch (error) {
    console.error('[ServerCache] ‚ùå –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è batch NFT:', error)
  }
}

/**
 * ‚úÖ –ù–û–í–û–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö NFT results –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∫–æ—à–µ–ª—å–∫–æ–≤
 */
export function getCachedBatchNFTResults(wallets: string[]): {
  cached: Record<string, any>,
  missing: string[]
} {
  const cached: Record<string, any> = {}
  const missing: string[] = []
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º batch –∫—ç—à
    const batchKey = `batch:${wallets.sort().join(',')}`
    const batchCached = serverCache.get(batchKey)
    
    if (batchCached && typeof batchCached === 'object') {
      console.log(`[ServerCache] üéØ Batch NFT cache HIT –¥–ª—è ${wallets.length} –∫–æ—à–µ–ª—å–∫–æ–≤`)
      return { cached: batchCached, missing: [] }
    }
    
    // –ò–Ω–∞—á–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∫—ç—à–∏
    for (const wallet of wallets) {
      const cacheKey = `wallet:${wallet}`
      const result = serverCache.get(cacheKey)
      
      if (result !== null) {
        cached[wallet] = result
      } else {
        missing.push(wallet)
      }
    }
    
    if (Object.keys(cached).length > 0) {
      console.log(`[ServerCache] üíæ –ß–∞—Å—Ç–∏—á–Ω—ã–π NFT cache: ${Object.keys(cached).length} –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö, ${missing.length} –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å`)
    }
    
    return { cached, missing }
  } catch (error) {
    console.error('[ServerCache] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö NFT:', error)
    return { cached: {}, missing: wallets }
  }
}

export { serverCache, ServerCache } 