// –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ Associated Token Account –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
// –ò–∑–±–µ–≥–∞–µ–º –ø–µ—Ä–µ—Å—á—ë—Ç–∞ ATA –¥–ª—è –æ–¥–Ω–∏—Ö –∏ —Ç–µ—Ö –∂–µ –ø–∞—Ä wallet-mint

import { PublicKey } from '@solana/web3.js'

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª–Ω–æ—Å—Ç—å—é –∏–∑–æ–ª–∏—Ä—É–µ–º –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
const ataCache = new Map<string, string>()

/**
 * ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º—ã –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
 */
function isClient(): boolean {
  return typeof window !== 'undefined'
}

/**
 * ‚úÖ –ü—Ä—è–º–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ ATA –±–µ–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–µ–∑–¥–µ)
 */
function computeATA(mint: string, owner: string): string {
  try {
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –æ–±—ã—á–Ω—ã–π SPL Token Program ID
    const SPL_TOKEN_PROGRAM_ID = new PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA')
    const TOKEN_2022_PROGRAM_ID = new PublicKey('TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb')
    const ASSOCIATED_TOKEN_PROGRAM_ID = new PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL')
    
    const mintPubkey = new PublicKey(mint)
    const ownerPubkey = new PublicKey(owner)
    
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: PEcoin –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Token 2022 Program!
    const PECOIN_MINT = 'FDT9EMUytSwaP8GKiKdyv59rRAsT7gAB57wHUPm7wY9r'
    const TOKEN_PROGRAM_ID = (mint === PECOIN_MINT) ? TOKEN_2022_PROGRAM_ID : SPL_TOKEN_PROGRAM_ID
    
    const [associatedToken] = PublicKey.findProgramAddressSync(
      [
        ownerPubkey.toBuffer(),
        TOKEN_PROGRAM_ID.toBuffer(),
        mintPubkey.toBuffer(),
      ],
      ASSOCIATED_TOKEN_PROGRAM_ID
    )
    
    const ataAddress = associatedToken.toBase58()
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –¥–µ–±–∞–≥–∞
    console.log(`[ATA] Computed for ${mint === PECOIN_MINT ? 'PEcoin' : 'Other'} ${owner.slice(0,8)}...: ${ataAddress.slice(0,8)}... (Program: ${TOKEN_PROGRAM_ID.toBase58().slice(0,8)}...)`)
    
    return ataAddress
  } catch (error) {
    console.error(`[ATA] ‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è ATA –¥–ª—è ${owner.slice(0,8)}...:`, error)
    throw error
  }
}

/**
 * ‚úÖ –ü–æ–ª—É—á–∏—Ç—å ATA –∞–¥—Ä–µ—Å —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º (—Ç–æ–ª—å–∫–æ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ)
 */
export async function getCachedATA(mint: string, owner: string): Promise<string> {
  // ‚úÖ –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
  if (!isClient()) {
    throw new Error('ATA –∫—ç—à –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ')
  }

  const cacheKey = `${mint}:${owner}`
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
  const cached = ataCache.get(cacheKey)
  if (cached) {
    return cached
  }
  
  const ataAddress = computeATA(mint, owner)
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
  ataCache.set(cacheKey, ataAddress)
  
  return ataAddress
}

/**
 * ‚úÖ Batch –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ ATA –∞–¥—Ä–µ—Å–æ–≤ (—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏ –∫–ª–∏–µ–Ω—Ç–µ)
 */
export async function getBatchCachedATAs(mint: string, owners: string[]): Promise<Map<string, string>> {
  const results = new Map<string, string>()
  
  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–∞–±–æ—Ç–∞–µ–º –∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
  console.log(`[ATA Cache] üöÄ Batch –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ ${owners.length} ATA –∞–¥—Ä–µ—Å–æ–≤ (${isClient() ? 'client' : 'server'})`)
  
  for (const owner of owners) {
    try {
      // –ü—Ä—è–º–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ ATA –≤–º–µ—Å—Ç–æ getCachedATA –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      const ataAddress = computeATA(mint, owner)
      results.set(owner, ataAddress)
    } catch (error) {
      console.warn(`[ATA Cache] ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é ${owner.slice(0,8)}... –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ ATA:`, error)
    }
  }
  
  console.log(`[ATA Cache] ‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã—á–∏—Å–ª–µ–Ω–æ ${results.size}/${owners.length} ATA –∞–¥—Ä–µ—Å–æ–≤`)
  return results
}

/**
 * ‚úÖ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ ATA –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ—à–µ–ª—å–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ)
 */
export async function precomputeATAs(mint: string, owners: string[]): Promise<void> {
  // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
  if (!isClient()) {
    console.log('[ATA Cache] ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é –ø—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–∏–µ ATA –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ')
    return
  }
  
  console.log(`[ATA Cache] üöÄ –ü—Ä–µ–¥–≤—ã—á–∏—Å–ª—è—é ATA –¥–ª—è ${owners.length} –∫–æ—à–µ–ª—å–∫–æ–≤...`)
  
  const startTime = Date.now()
  let computed = 0
  
  for (const owner of owners) {
    try {
      await getCachedATA(mint, owner)
      computed++
    } catch (error) {
      console.warn(`[ATA Cache] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è ${owner.slice(0,8)}...:`, error)
    }
  }
  
  const totalTime = Date.now() - startTime
  console.log(`[ATA Cache] ‚úÖ –ü—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–æ ${computed}/${owners.length} ATA –∑–∞ ${totalTime}ms`)
}

/**
 * ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
 */
export function getATACacheStats() {
  return {
    size: ataCache.size,
    keys: Array.from(ataCache.keys()).slice(0, 5) // –ü–µ—Ä–≤—ã–µ 5 –∫–ª—é—á–µ–π –¥–ª—è –¥–µ–±–∞–≥–∞
  }
}

/**
 * ‚úÖ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
 */
export function clearATACache(): void {
  const size = ataCache.size
  ataCache.clear()
  console.log(`[ATA Cache] üóëÔ∏è –û—á–∏—â–µ–Ω –∫—ç—à: —É–¥–∞–ª–µ–Ω–æ ${size} –∑–∞–ø–∏—Å–µ–π`)
} 