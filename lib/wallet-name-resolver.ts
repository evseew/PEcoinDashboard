// –†–µ–∑–æ–ª–≤–∏–Ω–≥ –∞–¥—Ä–µ—Å–æ–≤ –∫–æ—à–µ–ª—å–∫–æ–≤ –≤ –∏–º–µ–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã
import { dynamicEcosystemCache } from './dynamic-ecosystem-cache'

export interface WalletNameInfo {
  name: string
  type: 'team' | 'startup' | 'staff'
  shortAddress: string
}

class WalletNameResolver {
  private nameCache = new Map<string, WalletNameInfo | null>()
  private cacheExpiry = new Map<string, number>()
  private readonly CACHE_DURATION = 5 * 60 * 1000 // 5 –º–∏–Ω—É—Ç

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à
   */
  clearCache() {
    this.nameCache.clear()
    this.cacheExpiry.clear()
    console.log(`[WalletNameResolver] üßπ –ö—ç—à –æ—á–∏—â–µ–Ω`)
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–º—è –¥–ª—è –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
   */
  getNameForWallet(walletAddress: string): WalletNameInfo | null {
    if (!walletAddress || walletAddress === "Unknown" || walletAddress.includes("Unknown/")) {
      return null
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cached = this.nameCache.get(walletAddress)
    const expiry = this.cacheExpiry.get(walletAddress)
    
    if (cached !== undefined && expiry && expiry > Date.now()) {
      return cached
    }

    // –ò—â–µ–º –≤ —ç–∫–æ—Å–∏—Å—Ç–µ–º–µ
    const participants = dynamicEcosystemCache.getAllParticipants()
    
    // –ï—Å–ª–∏ —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞ –ø—É—Å—Ç–∞, –Ω–µ –∫—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (participants.length === 0) {
      console.log(`[WalletNameResolver] ‚ö†Ô∏è –≠–∫–æ—Å–∏—Å—Ç–µ–º–∞ –ø—É—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è ${walletAddress.slice(0, 8)}...`)
      return null
    }

    // –ò—â–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
    const participant = participants.find(p => p.walletAddress === walletAddress)
    
    let result: WalletNameInfo | null = null
    if (participant) {
      result = {
        name: participant.name,
        type: participant.type as 'team' | 'startup' | 'staff',
        shortAddress: this.formatAddress(walletAddress)
      }
      console.log(`[WalletNameResolver] ‚úÖ –ù–∞–π–¥–µ–Ω: ${walletAddress.slice(0, 8)}... -> ${participant.name} (${participant.type})`)
    } else {
      console.log(`[WalletNameResolver] ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω: ${walletAddress.slice(0, 8)}...`)
    }

    // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    this.nameCache.set(walletAddress, result)
    this.cacheExpiry.set(walletAddress, Date.now() + this.CACHE_DURATION)

    return result
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
   */
  getDisplayName(walletAddress: string): string {
    const info = this.getNameForWallet(walletAddress)
    return info ? info.name : this.formatAddress(walletAddress)
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Å —Ç–∏–ø–æ–º
   */
  getDisplayNameWithType(walletAddress: string): string {
    const info = this.getNameForWallet(walletAddress)
    if (info) {
      const typeEmoji = info.type === 'team' ? 'üë•' : info.type === 'startup' ? 'üöÄ' : 'üë®‚Äçüíº'
      return `${typeEmoji} ${info.name}`
    }
    return this.formatAddress(walletAddress)
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å
   */
  private formatAddress(address: string): string {
    if (!address || address.length <= 12) return address
    return `${address.slice(0, 4)}...${address.slice(-4)}`
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
   */
  getCacheStats() {
    const total = this.nameCache.size
    const hits = Array.from(this.nameCache.values()).filter(v => v !== null).length
    const misses = total - hits
    
    return {
      total,
      hits,
      misses,
      hitRate: total > 0 ? (hits / total * 100).toFixed(1) + '%' : '0%'
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
export const walletNameResolver = new WalletNameResolver() 