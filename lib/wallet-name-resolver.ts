// –†–µ–∑–æ–ª–≤–∏–Ω–≥ –∞–¥—Ä–µ—Å–æ–≤ –∫–æ—à–µ–ª—å–∫–æ–≤ –≤ –∏–º–µ–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã
import { supabase } from '@/lib/supabaseClient'

export interface WalletNameInfo {
  name: string
  type: 'team' | 'startup' | 'staff'
  shortAddress: string
}

interface Participant {
  name: string
  walletAddress: string
  type: 'team' | 'startup' | 'staff'
}

class WalletNameResolver {
  private nameCache = new Map<string, WalletNameInfo | null>()
  private cacheExpiry = new Map<string, number>()
  private readonly CACHE_DURATION = 5 * 60 * 1000 // 5 –º–∏–Ω—É—Ç
  private participantsCache: Participant[] = []
  private lastParticipantsRefresh = 0
  private readonly PARTICIPANTS_CACHE_TTL = 5 * 60 * 1000 // 5 –º–∏–Ω—É—Ç

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à
   */
  clearCache() {
    this.nameCache.clear()
    this.cacheExpiry.clear()
    this.participantsCache = []
    this.lastParticipantsRefresh = 0
    console.log(`[WalletNameResolver] üßπ –ö—ç—à –æ—á–∏—â–µ–Ω`)
  }

  /**
   * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ Supabase
   */
  private async refreshParticipants(): Promise<Participant[]> {
    const now = Date.now()
    if (this.participantsCache.length > 0 && (now - this.lastParticipantsRefresh) < this.PARTICIPANTS_CACHE_TTL) {
      return this.participantsCache
    }

    try {
      console.log(`[WalletNameResolver] üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ Supabase...`)
      
      const [teamsResponse, startupsResponse, staffResponse] = await Promise.all([
        supabase.from('teams').select('name, wallet_address'),
        supabase.from('startups').select('name, wallet_address'),
        supabase.from('staff').select('name, wallet_address')
      ])
      
      const participants: Participant[] = []
      
      // –ö–æ–º–∞–Ω–¥—ã
      if (teamsResponse.data) {
        teamsResponse.data.forEach((team: any) => {
          if (team.wallet_address) {
            participants.push({
              name: team.name,
              walletAddress: team.wallet_address,
              type: 'team'
            })
          }
        })
      }
      
      // –°—Ç–∞—Ä—Ç–∞–ø—ã
      if (startupsResponse.data) {
        startupsResponse.data.forEach((startup: any) => {
          if (startup.wallet_address) {
            participants.push({
              name: startup.name,
              walletAddress: startup.wallet_address,
              type: 'startup'
            })
          }
        })
      }
      
      // –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
      if (staffResponse.data) {
        staffResponse.data.forEach((staff: any) => {
          if (staff.wallet_address) {
            participants.push({
              name: staff.name,
              walletAddress: staff.wallet_address,
              type: 'staff'
            })
          }
        })
      }
      
      this.participantsCache = participants
      this.lastParticipantsRefresh = now
      
      console.log(`[WalletNameResolver] ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${participants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ Supabase`)
      return participants
      
    } catch (error) {
      console.error(`[WalletNameResolver] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:`, error)
      return []
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–º—è –¥–ª—è –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
   */
  async getNameForWallet(walletAddress: string): Promise<WalletNameInfo | null> {
    if (!walletAddress || walletAddress === "Unknown" || walletAddress.includes("Unknown/")) {
      return null
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cached = this.nameCache.get(walletAddress)
    const expiry = this.cacheExpiry.get(walletAddress)
    
    if (cached !== undefined && expiry && expiry > Date.now()) {
      return cached
    }

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ Supabase
    const participants = await this.refreshParticipants()
    
    // –ï—Å–ª–∏ —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞ –ø—É—Å—Ç–∞, –Ω–µ –∫—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (participants.length === 0) {
      console.log(`[WalletNameResolver] ‚ö†Ô∏è –≠–∫–æ—Å–∏—Å—Ç–µ–º–∞ –ø—É—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è ${walletAddress.slice(0, 8)}...`)
      return null
    }

    // –ò—â–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
    const participant = participants.find(p => p.walletAddress === walletAddress)
    
    let result: WalletNameInfo | null = null
    if (participant) {
      result = {
        name: participant.name,
        type: participant.type as 'team' | 'startup' | 'staff',
        shortAddress: this.formatAddress(walletAddress)
      }
      console.log(`[WalletNameResolver] ‚úÖ –ù–∞–π–¥–µ–Ω: ${walletAddress.slice(0, 8)}... -> ${participant.name} (${participant.type})`)
    } else {
      console.log(`[WalletNameResolver] ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω: ${walletAddress.slice(0, 8)}...`)
    }

    // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    this.nameCache.set(walletAddress, result)
    this.cacheExpiry.set(walletAddress, Date.now() + this.CACHE_DURATION)

    return result
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è (DEPRECATED - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ async –≤–µ—Ä—Å–∏—é)
   */
  getDisplayName(walletAddress: string): string {
    console.log(`[WalletNameResolver] ‚ö†Ô∏è getDisplayName —É—Å—Ç–∞—Ä–µ–ª, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ async getNameForWallet`)
    return this.formatAddress(walletAddress)
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Å —Ç–∏–ø–æ–º (DEPRECATED - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ async –≤–µ—Ä—Å–∏—é)
   */
  getDisplayNameWithType(walletAddress: string): string {
    console.log(`[WalletNameResolver] ‚ö†Ô∏è getDisplayNameWithType —É—Å—Ç–∞—Ä–µ–ª, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ async getNameForWallet`)
    return this.formatAddress(walletAddress)
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å
   */
  private formatAddress(address: string): string {
    if (!address || address.length <= 12) return address
    return `${address.slice(0, 4)}...${address.slice(-4)}`
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
   */
  getCacheStats() {
    const total = this.nameCache.size
    const hits = Array.from(this.nameCache.values()).filter(v => v !== null).length
    const misses = total - hits
    
    return {
      total,
      hits,
      misses,
      hitRate: total > 0 ? (hits / total * 100).toFixed(1) + '%' : '0%',
      participantsLoaded: this.participantsCache.length > 0
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
export const walletNameResolver = new WalletNameResolver() 