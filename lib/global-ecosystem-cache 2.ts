// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–º–∫–Ω—É—Ç–æ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã PEcoin
// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

import { serverCache } from './server-cache'
import { getCachedTokenBalances } from './cached-token-balance'

interface EcosystemParticipant {
  walletAddress: string
  type: 'team' | 'startup' | 'employee'
  name: string
  entity?: string // –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã/—Å—Ç–∞—Ä—Ç–∞–ø–∞ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
}

interface EcosystemData {
  balances: Map<string, number>
  nfts: Map<string, any[]>
  transactions: Map<string, any[]>
  lastUpdate: number
}

class EcosystemCache {
  private participants: EcosystemParticipant[] = []
  private ecosystemData: EcosystemData = {
    balances: new Map(),
    nfts: new Map(),
    transactions: new Map(),
    lastUpdate: 0
  }
  
  private readonly GLOBAL_REFRESH_INTERVAL = 5 * 60 * 1000 // 5 –º–∏–Ω—É—Ç
  private readonly PECOIN_MINT = "FDT9EMUytSwaP8GKiKdyv59rRAsT7gAB57wHUPm7wY9r"
  private refreshTimer?: NodeJS.Timeout

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã
   */
  async initializeEcosystem(participants: EcosystemParticipant[]): Promise<void> {
    console.log(`üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã: ${participants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`)
    this.participants = participants
    
    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    await this.refreshAllData()
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    this.startPeriodicRefresh()
    
    console.log(`‚úÖ –≠–∫–æ—Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è ${participants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`)
  }

  /**
   * –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
   */
  async refreshAllData(): Promise<void> {
    const startTime = Date.now()
    console.log(`üîÑ –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã...`)
    
    try {
      // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–ª–∞–Ω—Å—ã –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ batch-–∑–∞–ø—Ä–æ—Å–æ–º
      await this.refreshAllBalances()
      
      // 2. –ó–∞–≥—Ä—É–∂–∞–µ–º NFT –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      await this.refreshAllNFTs()
      
      // 3. –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      await this.refreshAllTransactions()
      
      this.ecosystemData.lastUpdate = Date.now()
      const totalTime = Date.now() - startTime
      
      console.log(`‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ ${totalTime}ms`)
      console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${this.ecosystemData.balances.size} –±–∞–ª–∞–Ω—Å–æ–≤, ${this.ecosystemData.nfts.size} NFT –∫–æ–ª–ª–µ–∫—Ü–∏–π`)
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:`, error)
    }
  }

  /**
   * Batch-–∑–∞–≥—Ä—É–∑–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
   */
  private async refreshAllBalances(): Promise<void> {
    const wallets = this.participants.map(p => p.walletAddress)
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π batch API
      const response = await fetch('/api/token-balances', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          wallets,
          mint: this.PECOIN_MINT
        })
      })
      
      if (response.ok) {
        const data = await response.json()
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
        Object.entries(data.balances).forEach(([wallet, balance]) => {
          this.ecosystemData.balances.set(wallet, balance as number)
        })
        
        console.log(`‚úÖ Batch-–∑–∞–≥—Ä—É–∂–µ–Ω–æ ${Object.keys(data.balances).length} –±–∞–ª–∞–Ω—Å–æ–≤`)
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤:`, error)
    }
  }

  /**
   * –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ NFT –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
   */
  private async refreshAllNFTs(): Promise<void> {
    const batchSize = 10 // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ 10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    
    for (let i = 0; i < this.participants.length; i += batchSize) {
      const batch = this.participants.slice(i, i + batchSize)
      
      const promises = batch.map(async (participant) => {
        try {
          const response = await fetch('/api/nft-collection', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ walletAddress: participant.walletAddress })
          })
          
          if (response.ok) {
            const data = await response.json()
            this.ecosystemData.nfts.set(participant.walletAddress, data.nfts || [])
            return data.nfts?.length || 0
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ NFT –¥–ª—è ${participant.walletAddress}:`, error)
          return 0
        }
      })
      
      const results = await Promise.all(promises)
      const totalNFTs = results.reduce((sum, count) => sum + count, 0)
      console.log(`‚úÖ Batch ${Math.floor(i/batchSize) + 1}: –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${totalNFTs} NFT`)
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
      if (i + batchSize < this.participants.length) {
        await new Promise(resolve => setTimeout(resolve, 1000))
      }
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
   */
  private async refreshAllTransactions(): Promise<void> {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –±–∞–ª–∞–Ω—Å–æ–º > 0
    const activeParticipants = this.participants.filter(p => 
      (this.ecosystemData.balances.get(p.walletAddress) || 0) > 0
    )
    
    console.log(`üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è ${activeParticipants.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`)
    
    const promises = activeParticipants.map(async (participant) => {
      try {
        const response = await fetch('/api/pecoin-history', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ 
            walletAddress: participant.walletAddress,
            limit: 10 
          })
        })
        
        if (response.ok) {
          const data = await response.json()
          this.ecosystemData.transactions.set(participant.walletAddress, data.transactions || [])
          return data.transactions?.length || 0
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è ${participant.walletAddress}:`, error)
        return 0
      }
    })
    
    const results = await Promise.all(promises)
    const totalTxs = results.reduce((sum, count) => sum + count, 0)
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${totalTxs} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`)
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–º–≥–Ω–æ–≤–µ–Ω–Ω–æ –∏–∑ –∫—ç—à–∞)
   */
  getParticipantData(walletAddress: string): {
    balance: number
    nfts: any[]
    transactions: any[]
    lastUpdate: number
  } {
    return {
      balance: this.ecosystemData.balances.get(walletAddress) || 0,
      nfts: this.ecosystemData.nfts.get(walletAddress) || [],
      transactions: this.ecosystemData.transactions.get(walletAddress) || [],
      lastUpdate: this.ecosystemData.lastUpdate
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã
   */
  getEcosystemStats(): {
    totalParticipants: number
    totalBalance: number
    totalNFTs: number
    totalTransactions: number
    lastUpdate: number
    cacheAge: number
  } {
    const totalBalance = Array.from(this.ecosystemData.balances.values())
      .reduce((sum, balance) => sum + balance, 0)
    
    const totalNFTs = Array.from(this.ecosystemData.nfts.values())
      .reduce((sum, nfts) => sum + nfts.length, 0)
    
    const totalTransactions = Array.from(this.ecosystemData.transactions.values())
      .reduce((sum, txs) => sum + txs.length, 0)
    
    return {
      totalParticipants: this.participants.length,
      totalBalance,
      totalNFTs,
      totalTransactions,
      lastUpdate: this.ecosystemData.lastUpdate,
      cacheAge: Date.now() - this.ecosystemData.lastUpdate
    }
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
   */
  async refreshParticipant(walletAddress: string): Promise<void> {
    const participant = this.participants.find(p => p.walletAddress === walletAddress)
    if (!participant) return

    console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞: ${walletAddress}`)
    
    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
    await Promise.all([
      this.refreshParticipantBalance(walletAddress),
      this.refreshParticipantNFTs(walletAddress),
      this.refreshParticipantTransactions(walletAddress)
    ])
  }

  private async refreshParticipantBalance(walletAddress: string): Promise<void> {
    // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–Ω–æ–≤–æ
    serverCache.invalidate(`token-balance:owner:${walletAddress}`)
    await this.refreshAllBalances()
  }

  private async refreshParticipantNFTs(walletAddress: string): Promise<void> {
    serverCache.invalidate(`nft-collection:wallet:${walletAddress}`)
    
    try {
      const response = await fetch('/api/nft-collection', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ walletAddress })
      })
      
      if (response.ok) {
        const data = await response.json()
        this.ecosystemData.nfts.set(walletAddress, data.nfts || [])
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è NFT –¥–ª—è ${walletAddress}:`, error)
    }
  }

  private async refreshParticipantTransactions(walletAddress: string): Promise<void> {
    serverCache.invalidate(`tx-history:${walletAddress}`)
    
    try {
      const response = await fetch('/api/pecoin-history', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ walletAddress, limit: 10 })
      })
      
      if (response.ok) {
        const data = await response.json()
        this.ecosystemData.transactions.set(walletAddress, data.transactions || [])
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è ${walletAddress}:`, error)
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  private startPeriodicRefresh(): void {
    if (this.refreshTimer) {
      clearInterval(this.refreshTimer)
    }
    
    this.refreshTimer = setInterval(() => {
      console.log(`‚è∞ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã`)
      this.refreshAllData()
    }, this.GLOBAL_REFRESH_INTERVAL)
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  stopPeriodicRefresh(): void {
    if (this.refreshTimer) {
      clearInterval(this.refreshTimer)
      this.refreshTimer = undefined
    }
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const ecosystemCache = new EcosystemCache()

// –¢–∏–ø—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
export type { EcosystemParticipant } 